
TEST-4-I2C_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053ec  080053ec  00007030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080053ec  080053ec  000063ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f4  080053f4  00007030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f4  080053f4  000063f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053f8  080053f8  000063f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  080053fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000030  0800542c  00007030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  0800542c  00007294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010534  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002734  00000000  00000000  0001758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00019cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ff  00000000  00000000  0001a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bac3  00000000  00000000  0001b39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123d1  00000000  00000000  00036e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b04a6  00000000  00000000  00049233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f96d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd8  00000000  00000000  000f971c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000fc3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000030 	.word	0x20000030
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800534c 	.word	0x0800534c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000034 	.word	0x20000034
 8000100:	0800534c 	.word	0x0800534c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_DMA_Init+0x48>)
 8000624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_DMA_Init+0x48>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	639a      	str	r2, [r3, #56]	@ 0x38
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_DMA_Init+0x48>)
 8000630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2009      	movs	r0, #9
 8000640:	f000 fdb2 	bl	80011a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000644:	2009      	movs	r0, #9
 8000646:	f000 fdc4 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	200a      	movs	r0, #10
 8000650:	f000 fdaa 	bl	80011a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fdbc 	bl	80011d2 <HAL_NVIC_EnableIRQ>

}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b08b      	sub	sp, #44	@ 0x2c
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	2414      	movs	r4, #20
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2314      	movs	r3, #20
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f004 fe3b 	bl	80052f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <MX_GPIO_Init+0xd8>)
 8000680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <MX_GPIO_Init+0xd8>)
 8000684:	2104      	movs	r1, #4
 8000686:	430a      	orrs	r2, r1
 8000688:	635a      	str	r2, [r3, #52]	@ 0x34
 800068a:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <MX_GPIO_Init+0xd8>)
 800068c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068e:	2204      	movs	r2, #4
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000696:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <MX_GPIO_Init+0xd8>)
 8000698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <MX_GPIO_Init+0xd8>)
 800069c:	2120      	movs	r1, #32
 800069e:	430a      	orrs	r2, r1
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a2:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <MX_GPIO_Init+0xd8>)
 80006a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a6:	2220      	movs	r2, #32
 80006a8:	4013      	ands	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <MX_GPIO_Init+0xd8>)
 80006b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_GPIO_Init+0xd8>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_GPIO_Init+0xd8>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_GPIO_Init+0xd8>)
 80006c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_GPIO_Init+0xd8>)
 80006cc:	2102      	movs	r1, #2
 80006ce:	430a      	orrs	r2, r1
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_GPIO_Init+0xd8>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d6:	2202      	movs	r2, #2
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006de:	23a0      	movs	r3, #160	@ 0xa0
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 fa64 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2280      	movs	r2, #128	@ 0x80
 80006f0:	0192      	lsls	r2, r2, #6
 80006f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2288      	movs	r2, #136	@ 0x88
 80006f8:	0352      	lsls	r2, r2, #13
 80006fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000702:	193b      	adds	r3, r7, r4
 8000704:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <MX_GPIO_Init+0xdc>)
 8000706:	0019      	movs	r1, r3
 8000708:	0010      	movs	r0, r2
 800070a:	f001 f8e7 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800070e:	0021      	movs	r1, r4
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2220      	movs	r2, #32
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2201      	movs	r2, #1
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2202      	movs	r2, #2
 8000726:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000728:	187a      	adds	r2, r7, r1
 800072a:	23a0      	movs	r3, #160	@ 0xa0
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f001 f8d3 	bl	80018dc <HAL_GPIO_Init>

}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b00b      	add	sp, #44	@ 0x2c
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40021000 	.word	0x40021000
 8000744:	50000800 	.word	0x50000800

08000748 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_I2C1_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <MX_I2C1_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000754:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <MX_I2C1_Init+0x7c>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_I2C1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fa4d 	bl	8001c24 <HAL_I2C_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078e:	f000 f945 	bl	8000a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_I2C1_Init+0x74>)
 8000794:	2100      	movs	r1, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fe4a 	bl	8002430 <HAL_I2CEx_ConfigAnalogFilter>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 f93c 	bl	8000a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <MX_I2C1_Init+0x74>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 fe8d 	bl	80024c8 <HAL_I2CEx_ConfigDigitalFilter>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 f933 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000004c 	.word	0x2000004c
 80007c0:	40005400 	.word	0x40005400
 80007c4:	10b17db5 	.word	0x10b17db5

080007c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b09d      	sub	sp, #116	@ 0x74
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	235c      	movs	r3, #92	@ 0x5c
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	0018      	movs	r0, r3
 80007d6:	2314      	movs	r3, #20
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f004 fd8a 	bl	80052f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e0:	2410      	movs	r4, #16
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	0018      	movs	r0, r3
 80007e6:	234c      	movs	r3, #76	@ 0x4c
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f004 fd82 	bl	80052f4 <memset>
  if(i2cHandle->Instance==I2C1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a22      	ldr	r2, [pc, #136]	@ (8000880 <HAL_I2C_MspInit+0xb8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d13e      	bne.n	8000878 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2220      	movs	r2, #32
 80007fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	f002 fbff 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000812:	f000 f903 	bl	8000a1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <HAL_I2C_MspInit+0xbc>)
 8000818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <HAL_I2C_MspInit+0xbc>)
 800081c:	2102      	movs	r1, #2
 800081e:	430a      	orrs	r2, r1
 8000820:	635a      	str	r2, [r3, #52]	@ 0x34
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <HAL_I2C_MspInit+0xbc>)
 8000824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000826:	2202      	movs	r2, #2
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800082e:	215c      	movs	r1, #92	@ 0x5c
 8000830:	187b      	adds	r3, r7, r1
 8000832:	22c0      	movs	r2, #192	@ 0xc0
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2212      	movs	r2, #18
 800083c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2206      	movs	r2, #6
 800084e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	187b      	adds	r3, r7, r1
 8000852:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <HAL_I2C_MspInit+0xc0>)
 8000854:	0019      	movs	r1, r3
 8000856:	0010      	movs	r0, r2
 8000858:	f001 f840 	bl	80018dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <HAL_I2C_MspInit+0xbc>)
 800085e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <HAL_I2C_MspInit+0xbc>)
 8000862:	2180      	movs	r1, #128	@ 0x80
 8000864:	0389      	lsls	r1, r1, #14
 8000866:	430a      	orrs	r2, r1
 8000868:	63da      	str	r2, [r3, #60]	@ 0x3c
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_I2C_MspInit+0xbc>)
 800086c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800086e:	2380      	movs	r3, #128	@ 0x80
 8000870:	039b      	lsls	r3, r3, #14
 8000872:	4013      	ands	r3, r2
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b01d      	add	sp, #116	@ 0x74
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	40005400 	.word	0x40005400
 8000884:	40021000 	.word	0x40021000
 8000888:	50000400 	.word	0x50000400

0800088c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0b      	ldr	r2, [pc, #44]	@ (80008c8 <HAL_UART_RxCpltCallback+0x3c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d105      	bne.n	80008aa <HAL_UART_RxCpltCallback+0x1e>
	{
		//answer to host
		HAL_UART_Transmit_IT(&huart1,uart1_tx1_buff,sizeof(uart1_tx1_buff));
 800089e:	490b      	ldr	r1, [pc, #44]	@ (80008cc <HAL_UART_RxCpltCallback+0x40>)
 80008a0:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <HAL_UART_RxCpltCallback+0x44>)
 80008a2:	220d      	movs	r2, #13
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 fe43 	bl	8003530 <HAL_UART_Transmit_IT>
	}

	if(huart->Instance==USART2)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a09      	ldr	r2, [pc, #36]	@ (80008d4 <HAL_UART_RxCpltCallback+0x48>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d105      	bne.n	80008c0 <HAL_UART_RxCpltCallback+0x34>
	{
		//answer to host
		HAL_UART_Transmit_IT(&huart2,uart2_tx2_buff,sizeof(uart2_tx2_buff));
 80008b4:	4908      	ldr	r1, [pc, #32]	@ (80008d8 <HAL_UART_RxCpltCallback+0x4c>)
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_UART_RxCpltCallback+0x50>)
 80008b8:	220d      	movs	r2, #13
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 fe38 	bl	8003530 <HAL_UART_Transmit_IT>
	}
}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40013800 	.word	0x40013800
 80008cc:	20000000 	.word	0x20000000
 80008d0:	200000a8 	.word	0x200000a8
 80008d4:	40004400 	.word	0x40004400
 80008d8:	20000010 	.word	0x20000010
 80008dc:	2000013c 	.word	0x2000013c

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f000 faf3 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f839 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ee:	f7ff febb 	bl	8000668 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f2:	f7ff fe93 	bl	800061c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008f6:	f000 f95d 	bl	8000bb4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80008fa:	f000 f90d 	bl	8000b18 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008fe:	f7ff ff23 	bl	8000748 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,uart1_rx1_buff,sizeof(uart1_rx1_buff));//receive int enable
 8000902:	4911      	ldr	r1, [pc, #68]	@ (8000948 <main+0x68>)
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <main+0x6c>)
 8000906:	2204      	movs	r2, #4
 8000908:	0018      	movs	r0, r3
 800090a:	f002 feb9 	bl	8003680 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,uart2_rx2_buff,sizeof(uart2_rx2_buff));//receive int enable
 800090e:	4910      	ldr	r1, [pc, #64]	@ (8000950 <main+0x70>)
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <main+0x74>)
 8000912:	2204      	movs	r2, #4
 8000914:	0018      	movs	r0, r3
 8000916:	f002 feb3 	bl	8003680 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Master_Transmit(&hi2c1,0xA0,i2c1_tx1_buff,sizeof(i2c1_tx1_buff),1000);
 800091a:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <main+0x78>)
 800091c:	480f      	ldr	r0, [pc, #60]	@ (800095c <main+0x7c>)
 800091e:	23fa      	movs	r3, #250	@ 0xfa
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2304      	movs	r3, #4
 8000926:	21a0      	movs	r1, #160	@ 0xa0
 8000928:	f001 fa22 	bl	8001d70 <HAL_I2C_Master_Transmit>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);//LED-Green flash
 800092c:	23a0      	movs	r3, #160	@ 0xa0
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	2120      	movs	r1, #32
 8000932:	0018      	movs	r0, r3
 8000934:	f001 f95b 	bl	8001bee <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);//delay 1000 ms
 8000938:	23fa      	movs	r3, #250	@ 0xfa
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	0018      	movs	r0, r3
 800093e:	f000 fb4d 	bl	8000fdc <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1,0xA0,i2c1_tx1_buff,sizeof(i2c1_tx1_buff),1000);
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	e7e9      	b.n	800091a <main+0x3a>
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	200000a0 	.word	0x200000a0
 800094c:	200000a8 	.word	0x200000a8
 8000950:	200000a4 	.word	0x200000a4
 8000954:	2000013c 	.word	0x2000013c
 8000958:	20000020 	.word	0x20000020
 800095c:	2000004c 	.word	0x2000004c

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b095      	sub	sp, #84	@ 0x54
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	2414      	movs	r4, #20
 8000968:	193b      	adds	r3, r7, r4
 800096a:	0018      	movs	r0, r3
 800096c:	233c      	movs	r3, #60	@ 0x3c
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f004 fcbf 	bl	80052f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	0018      	movs	r0, r3
 800097a:	2310      	movs	r3, #16
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f004 fcb8 	bl	80052f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2380      	movs	r3, #128	@ 0x80
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fde9 	bl	8002560 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2202      	movs	r2, #2
 8000992:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2280      	movs	r2, #128	@ 0x80
 8000998:	0052      	lsls	r2, r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800099c:	0021      	movs	r1, r4
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2240      	movs	r2, #64	@ 0x40
 80009a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2202      	movs	r2, #2
 80009ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2202      	movs	r2, #2
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2208      	movs	r2, #8
 80009c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2280      	movs	r2, #128	@ 0x80
 80009c6:	0292      	lsls	r2, r2, #10
 80009c8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	0492      	lsls	r2, r2, #18
 80009d0:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	0592      	lsls	r2, r2, #22
 80009d8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 fe0b 	bl	80025f8 <HAL_RCC_OscConfig>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009e6:	f000 f819 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2207      	movs	r2, #7
 80009ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2202      	movs	r2, #2
 80009f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2102      	movs	r1, #2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f002 f956 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a10:	f000 f804 	bl	8000a1c <Error_Handler>
  }
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b015      	add	sp, #84	@ 0x54
 8000a1a:	bd90      	pop	{r4, r7, pc}

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	430a      	orrs	r2, r1
 8000a38:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4013      	ands	r3, r2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a4c:	2180      	movs	r1, #128	@ 0x80
 8000a4e:	0549      	lsls	r1, r1, #21
 8000a50:	430a      	orrs	r2, r1
 8000a52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a58:	2380      	movs	r3, #128	@ 0x80
 8000a5a:	055b      	lsls	r3, r3, #21
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a62:	23c0      	movs	r3, #192	@ 0xc0
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fadc 	bl	8001024 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b002      	add	sp, #8
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 fa80 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <DMA1_Channel1_IRQHandler+0x14>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fda4 	bl	8001600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	200001d0 	.word	0x200001d0

08000ac4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 fd98 	bl	8001600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	20000230 	.word	0x20000230

08000adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <USART1_IRQHandler+0x14>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f002 fe32 	bl	800374c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	200000a8 	.word	0x200000a8

08000af4 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af8:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <USART2_LPUART2_IRQHandler+0x14>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f002 fe26 	bl	800374c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	2000013c 	.word	0x2000013c

08000b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b1e:	4a24      	ldr	r2, [pc, #144]	@ (8000bb0 <MX_USART1_UART_Init+0x98>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b24:	22e1      	movs	r2, #225	@ 0xe1
 8000b26:	0252      	lsls	r2, r2, #9
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f002 fc8e 	bl	8003484 <HAL_UART_Init>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b6c:	f7ff ff56 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b72:	2100      	movs	r1, #0
 8000b74:	0018      	movs	r0, r3
 8000b76:	f004 fadd 	bl	8005134 <HAL_UARTEx_SetTxFifoThreshold>
 8000b7a:	1e03      	subs	r3, r0, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7e:	f7ff ff4d 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b82:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	0018      	movs	r0, r3
 8000b88:	f004 fb14 	bl	80051b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b90:	f7ff ff44 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <MX_USART1_UART_Init+0x94>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f004 fa92 	bl	80050c0 <HAL_UARTEx_DisableFifoMode>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba0:	f7ff ff3c 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	200000a8 	.word	0x200000a8
 8000bb0:	40013800 	.word	0x40013800

08000bb4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bba:	4a24      	ldr	r2, [pc, #144]	@ (8000c4c <MX_USART2_UART_Init+0x98>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bbe:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bc0:	22e1      	movs	r2, #225	@ 0xe1
 8000bc2:	0252      	lsls	r2, r2, #9
 8000bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f002 fc40 	bl	8003484 <HAL_UART_Init>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c08:	f7ff ff08 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	0018      	movs	r0, r3
 8000c12:	f004 fa8f 	bl	8005134 <HAL_UARTEx_SetTxFifoThreshold>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c1a:	f7ff feff 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f004 fac6 	bl	80051b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c2c:	f7ff fef6 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <MX_USART2_UART_Init+0x94>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f004 fa44 	bl	80050c0 <HAL_UARTEx_DisableFifoMode>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c3c:	f7ff feee 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	2000013c 	.word	0x2000013c
 8000c4c:	40004400 	.word	0x40004400

08000c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b09f      	sub	sp, #124	@ 0x7c
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	2314      	movs	r3, #20
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f004 fb46 	bl	80052f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	2418      	movs	r4, #24
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	234c      	movs	r3, #76	@ 0x4c
 8000c70:	001a      	movs	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	f004 fb3e 	bl	80052f4 <memset>
  if(uartHandle->Instance==USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a77      	ldr	r2, [pc, #476]	@ (8000e5c <HAL_UART_MspInit+0x20c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d170      	bne.n	8000d64 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0018      	movs	r0, r3
 8000c92:	f002 f9bb 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c9a:	f7ff febf 	bl	8000a1c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c9e:	4b70      	ldr	r3, [pc, #448]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000ca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca2:	4b6f      	ldr	r3, [pc, #444]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000ca4:	2180      	movs	r1, #128	@ 0x80
 8000ca6:	01c9      	lsls	r1, r1, #7
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cac:	4b6c      	ldr	r3, [pc, #432]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	01db      	lsls	r3, r3, #7
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b69      	ldr	r3, [pc, #420]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cbe:	4b68      	ldr	r3, [pc, #416]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cc6:	4b66      	ldr	r3, [pc, #408]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cca:	2204      	movs	r2, #4
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cd2:	2164      	movs	r1, #100	@ 0x64
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2230      	movs	r2, #48	@ 0x30
 8000cd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2202      	movs	r2, #2
 8000cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2201      	movs	r2, #1
 8000cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	4a5b      	ldr	r2, [pc, #364]	@ (8000e64 <HAL_UART_MspInit+0x214>)
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	f000 fdef 	bl	80018dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d00:	4a5a      	ldr	r2, [pc, #360]	@ (8000e6c <HAL_UART_MspInit+0x21c>)
 8000d02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000d04:	4b58      	ldr	r3, [pc, #352]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d06:	2232      	movs	r2, #50	@ 0x32
 8000d08:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0a:	4b57      	ldr	r3, [pc, #348]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d10:	4b55      	ldr	r3, [pc, #340]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d16:	4b54      	ldr	r3, [pc, #336]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d18:	2280      	movs	r2, #128	@ 0x80
 8000d1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d1c:	4b52      	ldr	r3, [pc, #328]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d22:	4b51      	ldr	r3, [pc, #324]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d28:	4b4f      	ldr	r3, [pc, #316]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d34:	4b4c      	ldr	r3, [pc, #304]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fa68 	bl	800120c <HAL_DMA_Init>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000d40:	f7ff fe6c 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2180      	movs	r1, #128	@ 0x80
 8000d48:	4a47      	ldr	r2, [pc, #284]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d4a:	505a      	str	r2, [r3, r1]
 8000d4c:	4b46      	ldr	r3, [pc, #280]	@ (8000e68 <HAL_UART_MspInit+0x218>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	201b      	movs	r0, #27
 8000d58:	f000 fa26 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d5c:	201b      	movs	r0, #27
 8000d5e:	f000 fa38 	bl	80011d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d62:	e076      	b.n	8000e52 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a41      	ldr	r2, [pc, #260]	@ (8000e70 <HAL_UART_MspInit+0x220>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d171      	bne.n	8000e52 <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d6e:	2118      	movs	r1, #24
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2202      	movs	r2, #2
 8000d74:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f002 f944 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8000d88:	f7ff fe48 	bl	8000a1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8c:	4b34      	ldr	r3, [pc, #208]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d90:	4b33      	ldr	r3, [pc, #204]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000d92:	2180      	movs	r1, #128	@ 0x80
 8000d94:	0289      	lsls	r1, r1, #10
 8000d96:	430a      	orrs	r2, r1
 8000d98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d9a:	4b31      	ldr	r3, [pc, #196]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d9e:	2380      	movs	r3, #128	@ 0x80
 8000da0:	029b      	lsls	r3, r3, #10
 8000da2:	4013      	ands	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	430a      	orrs	r2, r1
 8000db2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <HAL_UART_MspInit+0x210>)
 8000db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db8:	2201      	movs	r2, #1
 8000dba:	4013      	ands	r3, r2
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000dc0:	2164      	movs	r1, #100	@ 0x64
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	220c      	movs	r2, #12
 8000dc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2202      	movs	r2, #2
 8000dcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2201      	movs	r2, #1
 8000dde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	187a      	adds	r2, r7, r1
 8000de2:	23a0      	movs	r3, #160	@ 0xa0
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	0011      	movs	r1, r2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 fd77 	bl	80018dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8000dee:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000df0:	4a21      	ldr	r2, [pc, #132]	@ (8000e78 <HAL_UART_MspInit+0x228>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000df6:	2234      	movs	r2, #52	@ 0x34
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000e08:	2280      	movs	r2, #128	@ 0x80
 8000e0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 f9f0 	bl	800120c <HAL_DMA_Init>
 8000e2c:	1e03      	subs	r3, r0, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8000e30:	f7ff fdf4 	bl	8000a1c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2180      	movs	r1, #128	@ 0x80
 8000e38:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000e3a:	505a      	str	r2, [r3, r1]
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <HAL_UART_MspInit+0x224>)
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	201c      	movs	r0, #28
 8000e48:	f000 f9ae 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000e4c:	201c      	movs	r0, #28
 8000e4e:	f000 f9c0 	bl	80011d2 <HAL_NVIC_EnableIRQ>
}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b01f      	add	sp, #124	@ 0x7c
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	40013800 	.word	0x40013800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	50000800 	.word	0x50000800
 8000e68:	200001d0 	.word	0x200001d0
 8000e6c:	40020008 	.word	0x40020008
 8000e70:	40004400 	.word	0x40004400
 8000e74:	20000230 	.word	0x20000230
 8000e78:	4002001c 	.word	0x4002001c

08000e7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e7c:	480d      	ldr	r0, [pc, #52]	@ (8000eb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e80:	f7ff fe44 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	@ (8000ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec8 <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eaa:	f004 fa2b 	bl	8005304 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000eae:	f7ff fd17 	bl	80008e0 <main>

08000eb2 <LoopForever>:

LoopForever:
  b LoopForever
 8000eb2:	e7fe      	b.n	8000eb2 <LoopForever>
  ldr   r0, =_estack
 8000eb4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000ec0:	080053fc 	.word	0x080053fc
  ldr r2, =_sbss
 8000ec4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000ec8:	20000294 	.word	0x20000294

08000ecc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC1_COMP_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <HAL_Init+0x3c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_Init+0x3c>)
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	0049      	lsls	r1, r1, #1
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f810 	bl	8000f10 <HAL_InitTick>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	e001      	b.n	8000f00 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fd94 	bl	8000a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40022000 	.word	0x40022000

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	230f      	movs	r3, #15
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f20:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <HAL_InitTick+0x88>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d02b      	beq.n	8000f80 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f28:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <HAL_InitTick+0x8c>)
 8000f2a:	681c      	ldr	r4, [r3, #0]
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <HAL_InitTick+0x88>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	0019      	movs	r1, r3
 8000f32:	23fa      	movs	r3, #250	@ 0xfa
 8000f34:	0098      	lsls	r0, r3, #2
 8000f36:	f7ff f8e5 	bl	8000104 <__udivsi3>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	0020      	movs	r0, r4
 8000f40:	f7ff f8e0 	bl	8000104 <__udivsi3>
 8000f44:	0003      	movs	r3, r0
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 f953 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d112      	bne.n	8000f76 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d80a      	bhi.n	8000f6c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f922 	bl	80011a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <HAL_InitTick+0x90>)
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e00d      	b.n	8000f88 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e008      	b.n	8000f88 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f76:	230f      	movs	r3, #15
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e003      	b.n	8000f88 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f80:	230f      	movs	r3, #15
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b005      	add	sp, #20
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	2000002c 	.word	0x2000002c
 8000f9c:	20000024 	.word	0x20000024
 8000fa0:	20000028 	.word	0x20000028

08000fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_IncTick+0x1c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	001a      	movs	r2, r3
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <HAL_IncTick+0x20>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	18d2      	adds	r2, r2, r3
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_IncTick+0x20>)
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	2000002c 	.word	0x2000002c
 8000fc4:	20000290 	.word	0x20000290

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b02      	ldr	r3, [pc, #8]	@ (8000fd8 <HAL_GetTick+0x10>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	20000290 	.word	0x20000290

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff fff0 	bl	8000fc8 <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	189b      	adds	r3, r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	f7ff ffe0 	bl	8000fc8 <HAL_GetTick>
 8001008:	0002      	movs	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b004      	add	sp, #16
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	2000002c 	.word	0x2000002c

08001024 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a06      	ldr	r2, [pc, #24]	@ (800104c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001032:	4013      	ands	r3, r2
 8001034:	0019      	movs	r1, r3
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	430a      	orrs	r2, r1
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	40010000 	.word	0x40010000
 800104c:	fffff9ff 	.word	0xfffff9ff

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	0002      	movs	r2, r0
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b7f      	cmp	r3, #127	@ 0x7f
 8001062:	d809      	bhi.n	8001078 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	001a      	movs	r2, r3
 800106a:	231f      	movs	r3, #31
 800106c:	401a      	ands	r2, r3
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <__NVIC_EnableIRQ+0x30>)
 8001070:	2101      	movs	r1, #1
 8001072:	4091      	lsls	r1, r2
 8001074:	000a      	movs	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	0002      	movs	r2, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b7f      	cmp	r3, #127	@ 0x7f
 8001098:	d828      	bhi.n	80010ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109a:	4a2f      	ldr	r2, [pc, #188]	@ (8001158 <__NVIC_SetPriority+0xd4>)
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	33c0      	adds	r3, #192	@ 0xc0
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	589b      	ldr	r3, [r3, r2]
 80010aa:	1dfa      	adds	r2, r7, #7
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	0011      	movs	r1, r2
 80010b0:	2203      	movs	r2, #3
 80010b2:	400a      	ands	r2, r1
 80010b4:	00d2      	lsls	r2, r2, #3
 80010b6:	21ff      	movs	r1, #255	@ 0xff
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	43d2      	mvns	r2, r2
 80010be:	401a      	ands	r2, r3
 80010c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	22ff      	movs	r2, #255	@ 0xff
 80010c8:	401a      	ands	r2, r3
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	0018      	movs	r0, r3
 80010d0:	2303      	movs	r3, #3
 80010d2:	4003      	ands	r3, r0
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	481f      	ldr	r0, [pc, #124]	@ (8001158 <__NVIC_SetPriority+0xd4>)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	430a      	orrs	r2, r1
 80010e4:	33c0      	adds	r3, #192	@ 0xc0
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ea:	e031      	b.n	8001150 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ec:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <__NVIC_SetPriority+0xd8>)
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	0019      	movs	r1, r3
 80010f4:	230f      	movs	r3, #15
 80010f6:	400b      	ands	r3, r1
 80010f8:	3b08      	subs	r3, #8
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3306      	adds	r3, #6
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1dfa      	adds	r2, r7, #7
 8001108:	7812      	ldrb	r2, [r2, #0]
 800110a:	0011      	movs	r1, r2
 800110c:	2203      	movs	r2, #3
 800110e:	400a      	ands	r2, r1
 8001110:	00d2      	lsls	r2, r2, #3
 8001112:	21ff      	movs	r1, #255	@ 0xff
 8001114:	4091      	lsls	r1, r2
 8001116:	000a      	movs	r2, r1
 8001118:	43d2      	mvns	r2, r2
 800111a:	401a      	ands	r2, r3
 800111c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	019b      	lsls	r3, r3, #6
 8001122:	22ff      	movs	r2, #255	@ 0xff
 8001124:	401a      	ands	r2, r3
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	2303      	movs	r3, #3
 800112e:	4003      	ands	r3, r0
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <__NVIC_SetPriority+0xd8>)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	001c      	movs	r4, r3
 800113c:	230f      	movs	r3, #15
 800113e:	4023      	ands	r3, r4
 8001140:	3b08      	subs	r3, #8
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	430a      	orrs	r2, r1
 8001146:	3306      	adds	r3, #6
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	18c3      	adds	r3, r0, r3
 800114c:	3304      	adds	r3, #4
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b003      	add	sp, #12
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	045b      	lsls	r3, r3, #17
 8001170:	429a      	cmp	r2, r3
 8001172:	d301      	bcc.n	8001178 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001174:	2301      	movs	r3, #1
 8001176:	e010      	b.n	800119a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <SysTick_Config+0x44>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	3a01      	subs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001180:	2301      	movs	r3, #1
 8001182:	425b      	negs	r3, r3
 8001184:	2103      	movs	r1, #3
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff ff7c 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <SysTick_Config+0x44>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <SysTick_Config+0x44>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	210f      	movs	r1, #15
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	1c02      	adds	r2, r0, #0
 80011b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	0002      	movs	r2, r0
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff ff33 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff ffaf 	bl	8001160 <SysTick_Config>
 8001202:	0003      	movs	r3, r0
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b002      	add	sp, #8
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e091      	b.n	8001342 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	001a      	movs	r2, r3
 8001224:	4b49      	ldr	r3, [pc, #292]	@ (800134c <HAL_DMA_Init+0x140>)
 8001226:	429a      	cmp	r2, r3
 8001228:	d810      	bhi.n	800124c <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a48      	ldr	r2, [pc, #288]	@ (8001350 <HAL_DMA_Init+0x144>)
 8001230:	4694      	mov	ip, r2
 8001232:	4463      	add	r3, ip
 8001234:	2114      	movs	r1, #20
 8001236:	0018      	movs	r0, r3
 8001238:	f7fe ff64 	bl	8000104 <__udivsi3>
 800123c:	0003      	movs	r3, r0
 800123e:	009a      	lsls	r2, r3, #2
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a43      	ldr	r2, [pc, #268]	@ (8001354 <HAL_DMA_Init+0x148>)
 8001248:	641a      	str	r2, [r3, #64]	@ 0x40
 800124a:	e00f      	b.n	800126c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a41      	ldr	r2, [pc, #260]	@ (8001358 <HAL_DMA_Init+0x14c>)
 8001252:	4694      	mov	ip, r2
 8001254:	4463      	add	r3, ip
 8001256:	2114      	movs	r1, #20
 8001258:	0018      	movs	r0, r3
 800125a:	f7fe ff53 	bl	8000104 <__udivsi3>
 800125e:	0003      	movs	r3, r0
 8001260:	009a      	lsls	r2, r3, #2
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a3c      	ldr	r2, [pc, #240]	@ (800135c <HAL_DMA_Init+0x150>)
 800126a:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2225      	movs	r2, #37	@ 0x25
 8001270:	2102      	movs	r1, #2
 8001272:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4938      	ldr	r1, [pc, #224]	@ (8001360 <HAL_DMA_Init+0x154>)
 8001280:	400a      	ands	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6819      	ldr	r1, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 fa9f 	bl	8001800 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	2380      	movs	r3, #128	@ 0x80
 80012c8:	01db      	lsls	r3, r3, #7
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d102      	bne.n	80012d4 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012dc:	217f      	movs	r1, #127	@ 0x7f
 80012de:	400a      	ands	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d011      	beq.n	8001318 <HAL_DMA_Init+0x10c>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d80d      	bhi.n	8001318 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 fac8 	bl	8001894 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	e008      	b.n	800132a <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2225      	movs	r2, #37	@ 0x25
 8001334:	2101      	movs	r1, #1
 8001336:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2224      	movs	r2, #36	@ 0x24
 800133c:	2100      	movs	r1, #0
 800133e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	40020407 	.word	0x40020407
 8001350:	bffdfff8 	.word	0xbffdfff8
 8001354:	40020000 	.word	0x40020000
 8001358:	bffdfbf8 	.word	0xbffdfbf8
 800135c:	40020400 	.word	0x40020400
 8001360:	ffff800f 	.word	0xffff800f

08001364 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001372:	2317      	movs	r3, #23
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2224      	movs	r2, #36	@ 0x24
 800137e:	5c9b      	ldrb	r3, [r3, r2]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_DMA_Start_IT+0x24>
 8001384:	2302      	movs	r3, #2
 8001386:	e06f      	b.n	8001468 <HAL_DMA_Start_IT+0x104>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2224      	movs	r2, #36	@ 0x24
 800138c:	2101      	movs	r1, #1
 800138e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2225      	movs	r2, #37	@ 0x25
 8001394:	5c9b      	ldrb	r3, [r3, r2]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d157      	bne.n	800144c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2225      	movs	r2, #37	@ 0x25
 80013a0:	2102      	movs	r1, #2
 80013a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	438a      	bics	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f9e1 	bl	8001788 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	210e      	movs	r1, #14
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e00f      	b.n	8001400 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2104      	movs	r1, #4
 80013ec:	438a      	bics	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	210a      	movs	r1, #10
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	@ 0x80
 8001408:	025b      	lsls	r3, r3, #9
 800140a:	4013      	ands	r3, r2
 800140c:	d008      	beq.n	8001420 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001418:	2180      	movs	r1, #128	@ 0x80
 800141a:	0049      	lsls	r1, r1, #1
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001432:	2180      	movs	r1, #128	@ 0x80
 8001434:	0049      	lsls	r1, r1, #1
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e00a      	b.n	8001462 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2224      	movs	r2, #36	@ 0x24
 8001456:	2100      	movs	r1, #0
 8001458:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800145a:	2317      	movs	r3, #23
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001462:	2317      	movs	r3, #23
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	781b      	ldrb	r3, [r3, #0]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b006      	add	sp, #24
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e04f      	b.n	8001522 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2225      	movs	r2, #37	@ 0x25
 8001486:	5c9b      	ldrb	r3, [r3, r2]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d008      	beq.n	80014a0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2204      	movs	r2, #4
 8001492:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2224      	movs	r2, #36	@ 0x24
 8001498:	2100      	movs	r1, #0
 800149a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e040      	b.n	8001522 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	210e      	movs	r1, #14
 80014ac:	438a      	bics	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ba:	491c      	ldr	r1, [pc, #112]	@ (800152c <HAL_DMA_Abort+0xbc>)
 80014bc:	400a      	ands	r2, r1
 80014be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2101      	movs	r1, #1
 80014cc:	438a      	bics	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d4:	221c      	movs	r2, #28
 80014d6:	401a      	ands	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	2101      	movs	r1, #1
 80014de:	4091      	lsls	r1, r2
 80014e0:	000a      	movs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00c      	beq.n	8001510 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001500:	490a      	ldr	r1, [pc, #40]	@ (800152c <HAL_DMA_Abort+0xbc>)
 8001502:	400a      	ands	r2, r1
 8001504:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800150e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2225      	movs	r2, #37	@ 0x25
 8001514:	2101      	movs	r1, #1
 8001516:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2224      	movs	r2, #36	@ 0x24
 800151c:	2100      	movs	r1, #0
 800151e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b002      	add	sp, #8
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	fffffeff 	.word	0xfffffeff

08001530 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001538:	210f      	movs	r1, #15
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2225      	movs	r2, #37	@ 0x25
 8001544:	5c9b      	ldrb	r3, [r3, r2]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d006      	beq.n	800155a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2204      	movs	r2, #4
 8001550:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e048      	b.n	80015ec <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	210e      	movs	r1, #14
 8001566:	438a      	bics	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	438a      	bics	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001584:	491d      	ldr	r1, [pc, #116]	@ (80015fc <HAL_DMA_Abort_IT+0xcc>)
 8001586:	400a      	ands	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	221c      	movs	r2, #28
 8001590:	401a      	ands	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	2101      	movs	r1, #1
 8001598:	4091      	lsls	r1, r2
 800159a:	000a      	movs	r2, r1
 800159c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00c      	beq.n	80015ca <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ba:	4910      	ldr	r1, [pc, #64]	@ (80015fc <HAL_DMA_Abort_IT+0xcc>)
 80015bc:	400a      	ands	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2225      	movs	r2, #37	@ 0x25
 80015ce:	2101      	movs	r1, #1
 80015d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2224      	movs	r2, #36	@ 0x24
 80015d6:	2100      	movs	r1, #0
 80015d8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	0010      	movs	r0, r2
 80015ea:	4798      	blx	r3
    }
  }
  return status;
 80015ec:	230f      	movs	r3, #15
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	781b      	ldrb	r3, [r3, #0]
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	fffffeff 	.word	0xfffffeff

08001600 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161c:	221c      	movs	r2, #28
 800161e:	4013      	ands	r3, r2
 8001620:	2204      	movs	r2, #4
 8001622:	409a      	lsls	r2, r3
 8001624:	0013      	movs	r3, r2
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	d026      	beq.n	800167a <HAL_DMA_IRQHandler+0x7a>
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2204      	movs	r2, #4
 8001630:	4013      	ands	r3, r2
 8001632:	d022      	beq.n	800167a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2220      	movs	r2, #32
 800163c:	4013      	ands	r3, r2
 800163e:	d107      	bne.n	8001650 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2104      	movs	r1, #4
 800164c:	438a      	bics	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001654:	221c      	movs	r2, #28
 8001656:	401a      	ands	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	2104      	movs	r1, #4
 800165e:	4091      	lsls	r1, r2
 8001660:	000a      	movs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001668:	2b00      	cmp	r3, #0
 800166a:	d100      	bne.n	800166e <HAL_DMA_IRQHandler+0x6e>
 800166c:	e080      	b.n	8001770 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	0010      	movs	r0, r2
 8001676:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001678:	e07a      	b.n	8001770 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	221c      	movs	r2, #28
 8001680:	4013      	ands	r3, r2
 8001682:	2202      	movs	r2, #2
 8001684:	409a      	lsls	r2, r3
 8001686:	0013      	movs	r3, r2
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	d03c      	beq.n	8001708 <HAL_DMA_IRQHandler+0x108>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d038      	beq.n	8001708 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2220      	movs	r2, #32
 800169e:	4013      	ands	r3, r2
 80016a0:	d10b      	bne.n	80016ba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	210a      	movs	r1, #10
 80016ae:	438a      	bics	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2225      	movs	r2, #37	@ 0x25
 80016b6:	2101      	movs	r1, #1
 80016b8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	001a      	movs	r2, r3
 80016c0:	4b2e      	ldr	r3, [pc, #184]	@ (800177c <HAL_DMA_IRQHandler+0x17c>)
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d909      	bls.n	80016da <HAL_DMA_IRQHandler+0xda>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	221c      	movs	r2, #28
 80016cc:	401a      	ands	r2, r3
 80016ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <HAL_DMA_IRQHandler+0x180>)
 80016d0:	2102      	movs	r1, #2
 80016d2:	4091      	lsls	r1, r2
 80016d4:	000a      	movs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	e008      	b.n	80016ec <HAL_DMA_IRQHandler+0xec>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	221c      	movs	r2, #28
 80016e0:	401a      	ands	r2, r3
 80016e2:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <HAL_DMA_IRQHandler+0x184>)
 80016e4:	2102      	movs	r1, #2
 80016e6:	4091      	lsls	r1, r2
 80016e8:	000a      	movs	r2, r1
 80016ea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2224      	movs	r2, #36	@ 0x24
 80016f0:	2100      	movs	r1, #0
 80016f2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d039      	beq.n	8001770 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	0010      	movs	r0, r2
 8001704:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001706:	e033      	b.n	8001770 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	221c      	movs	r2, #28
 800170e:	4013      	ands	r3, r2
 8001710:	2208      	movs	r2, #8
 8001712:	409a      	lsls	r2, r3
 8001714:	0013      	movs	r3, r2
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4013      	ands	r3, r2
 800171a:	d02a      	beq.n	8001772 <HAL_DMA_IRQHandler+0x172>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2208      	movs	r2, #8
 8001720:	4013      	ands	r3, r2
 8001722:	d026      	beq.n	8001772 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	210e      	movs	r1, #14
 8001730:	438a      	bics	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001738:	221c      	movs	r2, #28
 800173a:	401a      	ands	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	2101      	movs	r1, #1
 8001742:	4091      	lsls	r1, r2
 8001744:	000a      	movs	r2, r1
 8001746:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2225      	movs	r2, #37	@ 0x25
 8001752:	2101      	movs	r1, #1
 8001754:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2224      	movs	r2, #36	@ 0x24
 800175a:	2100      	movs	r1, #0
 800175c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	0010      	movs	r0, r2
 800176e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46c0      	nop			@ (mov r8, r8)
}
 8001774:	46bd      	mov	sp, r7
 8001776:	b004      	add	sp, #16
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	40020080 	.word	0x40020080
 8001780:	40020400 	.word	0x40020400
 8001784:	40020000 	.word	0x40020000

08001788 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800179e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	221c      	movs	r2, #28
 80017b8:	401a      	ands	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	2101      	movs	r1, #1
 80017c0:	4091      	lsls	r1, r2
 80017c2:	000a      	movs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d108      	bne.n	80017e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017e6:	e007      	b.n	80017f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	60da      	str	r2, [r3, #12]
}
 80017f8:	46c0      	nop			@ (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}

08001800 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	001a      	movs	r2, r3
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001810:	429a      	cmp	r2, r3
 8001812:	d814      	bhi.n	800183e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4a1a      	ldr	r2, [pc, #104]	@ (8001888 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800181e:	189a      	adds	r2, r3, r2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	001a      	movs	r2, r3
 800182a:	23ff      	movs	r3, #255	@ 0xff
 800182c:	4013      	ands	r3, r2
 800182e:	3b08      	subs	r3, #8
 8001830:	2114      	movs	r1, #20
 8001832:	0018      	movs	r0, r3
 8001834:	f7fe fc66 	bl	8000104 <__udivsi3>
 8001838:	0003      	movs	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e014      	b.n	8001868 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4a11      	ldr	r2, [pc, #68]	@ (800188c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001848:	189a      	adds	r2, r3, r2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	001a      	movs	r2, r3
 8001854:	23ff      	movs	r3, #255	@ 0xff
 8001856:	4013      	ands	r3, r2
 8001858:	3b08      	subs	r3, #8
 800185a:	2114      	movs	r1, #20
 800185c:	0018      	movs	r0, r3
 800185e:	f7fe fc51 	bl	8000104 <__udivsi3>
 8001862:	0003      	movs	r3, r0
 8001864:	3307      	adds	r3, #7
 8001866:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a09      	ldr	r2, [pc, #36]	@ (8001890 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800186c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	221f      	movs	r2, #31
 8001872:	4013      	ands	r3, r2
 8001874:	2201      	movs	r2, #1
 8001876:	409a      	lsls	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40020407 	.word	0x40020407
 8001888:	40020800 	.word	0x40020800
 800188c:	4002081c 	.word	0x4002081c
 8001890:	40020880 	.word	0x40020880

08001894 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	227f      	movs	r2, #127	@ 0x7f
 80018a2:	4013      	ands	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80018aa:	4694      	mov	ip, r2
 80018ac:	4463      	add	r3, ip
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	001a      	movs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a07      	ldr	r2, [pc, #28]	@ (80018d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80018ba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3b01      	subs	r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	4013      	ands	r3, r2
 80018c4:	2201      	movs	r2, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80018cc:	46c0      	nop			@ (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b004      	add	sp, #16
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	1000823f 	.word	0x1000823f
 80018d8:	40020940 	.word	0x40020940

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ea:	e14d      	b.n	8001b88 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d100      	bne.n	8001904 <HAL_GPIO_Init+0x28>
 8001902:	e13e      	b.n	8001b82 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2203      	movs	r2, #3
 800190a:	4013      	ands	r3, r2
 800190c:	2b01      	cmp	r3, #1
 800190e:	d005      	beq.n	800191c <HAL_GPIO_Init+0x40>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	4013      	ands	r3, r2
 8001918:	2b02      	cmp	r3, #2
 800191a:	d130      	bne.n	800197e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	409a      	lsls	r2, r3
 800192a:	0013      	movs	r3, r2
 800192c:	43da      	mvns	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	409a      	lsls	r2, r3
 800193e:	0013      	movs	r3, r2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001952:	2201      	movs	r2, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	2201      	movs	r2, #1
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2203      	movs	r2, #3
 8001984:	4013      	ands	r3, r2
 8001986:	2b03      	cmp	r3, #3
 8001988:	d017      	beq.n	80019ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	409a      	lsls	r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	43da      	mvns	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2203      	movs	r2, #3
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d123      	bne.n	8001a0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	58d3      	ldr	r3, [r2, r3]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2207      	movs	r2, #7
 80019d8:	4013      	ands	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	43da      	mvns	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2107      	movs	r1, #7
 80019f2:	400b      	ands	r3, r1
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	6939      	ldr	r1, [r7, #16]
 8001a0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	409a      	lsls	r2, r3
 8001a34:	0013      	movs	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	23c0      	movs	r3, #192	@ 0xc0
 8001a48:	029b      	lsls	r3, r3, #10
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d100      	bne.n	8001a50 <HAL_GPIO_Init+0x174>
 8001a4e:	e098      	b.n	8001b82 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a50:	4a53      	ldr	r2, [pc, #332]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3318      	adds	r3, #24
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	589b      	ldr	r3, [r3, r2]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	220f      	movs	r2, #15
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	0013      	movs	r3, r2
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	23a0      	movs	r3, #160	@ 0xa0
 8001a78:	05db      	lsls	r3, r3, #23
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d019      	beq.n	8001ab2 <HAL_GPIO_Init+0x1d6>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a48      	ldr	r2, [pc, #288]	@ (8001ba4 <HAL_GPIO_Init+0x2c8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x1d2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a47      	ldr	r2, [pc, #284]	@ (8001ba8 <HAL_GPIO_Init+0x2cc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x1ce>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a46      	ldr	r2, [pc, #280]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x1ca>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a45      	ldr	r2, [pc, #276]	@ (8001bb0 <HAL_GPIO_Init+0x2d4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x1c6>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_Init+0x1d8>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x1d8>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x1d8>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x1d8>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x1d8>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	400a      	ands	r2, r1
 8001aba:	00d2      	lsls	r2, r2, #3
 8001abc:	4093      	lsls	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ac4:	4936      	ldr	r1, [pc, #216]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3318      	adds	r3, #24
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad2:	4b33      	ldr	r3, [pc, #204]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43da      	mvns	r2, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	035b      	lsls	r3, r3, #13
 8001aea:	4013      	ands	r3, r2
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af6:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001afc:	4b28      	ldr	r3, [pc, #160]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43da      	mvns	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	4013      	ands	r3, r2
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b26:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001b28:	2384      	movs	r3, #132	@ 0x84
 8001b2a:	58d3      	ldr	r3, [r2, r3]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43da      	mvns	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	4013      	ands	r3, r2
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b4c:	4914      	ldr	r1, [pc, #80]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001b4e:	2284      	movs	r2, #132	@ 0x84
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b54:	4a12      	ldr	r2, [pc, #72]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	58d3      	ldr	r3, [r2, r3]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	2380      	movs	r3, #128	@ 0x80
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b7a:	4909      	ldr	r1, [pc, #36]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001b7c:	2280      	movs	r2, #128	@ 0x80
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	40da      	lsrs	r2, r3
 8001b90:	1e13      	subs	r3, r2, #0
 8001b92:	d000      	beq.n	8001b96 <HAL_GPIO_Init+0x2ba>
 8001b94:	e6aa      	b.n	80018ec <HAL_GPIO_Init+0x10>
  }
}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b006      	add	sp, #24
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	50000400 	.word	0x50000400
 8001ba8:	50000800 	.word	0x50000800
 8001bac:	50000c00 	.word	0x50000c00
 8001bb0:	50001000 	.word	0x50001000

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	0008      	movs	r0, r1
 8001bbe:	0011      	movs	r1, r2
 8001bc0:	1cbb      	adds	r3, r7, #2
 8001bc2:	1c02      	adds	r2, r0, #0
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	1c7b      	adds	r3, r7, #1
 8001bc8:	1c0a      	adds	r2, r1, #0
 8001bca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bcc:	1c7b      	adds	r3, r7, #1
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd4:	1cbb      	adds	r3, r7, #2
 8001bd6:	881a      	ldrh	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bde:	1cbb      	adds	r3, r7, #2
 8001be0:	881a      	ldrh	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	000a      	movs	r2, r1
 8001bf8:	1cbb      	adds	r3, r7, #2
 8001bfa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c02:	1cbb      	adds	r3, r7, #2
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	041a      	lsls	r2, r3, #16
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	1cb9      	adds	r1, r7, #2
 8001c12:	8809      	ldrh	r1, [r1, #0]
 8001c14:	400b      	ands	r3, r1
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]
}
 8001c1c:	46c0      	nop			@ (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b004      	add	sp, #16
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e08f      	b.n	8001d56 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2241      	movs	r2, #65	@ 0x41
 8001c3a:	5c9b      	ldrb	r3, [r3, r2]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d107      	bne.n	8001c52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2240      	movs	r2, #64	@ 0x40
 8001c46:	2100      	movs	r1, #0
 8001c48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7fe fdbb 	bl	80007c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2241      	movs	r2, #65	@ 0x41
 8001c56:	2124      	movs	r1, #36	@ 0x24
 8001c58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	438a      	bics	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	493b      	ldr	r1, [pc, #236]	@ (8001d60 <HAL_I2C_Init+0x13c>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4938      	ldr	r1, [pc, #224]	@ (8001d64 <HAL_I2C_Init+0x140>)
 8001c84:	400a      	ands	r2, r1
 8001c86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d108      	bne.n	8001ca2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	0209      	lsls	r1, r1, #8
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	e007      	b.n	8001cb2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2184      	movs	r1, #132	@ 0x84
 8001cac:	0209      	lsls	r1, r1, #8
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d109      	bne.n	8001cce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2180      	movs	r1, #128	@ 0x80
 8001cc6:	0109      	lsls	r1, r1, #4
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	e007      	b.n	8001cde <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4923      	ldr	r1, [pc, #140]	@ (8001d68 <HAL_I2C_Init+0x144>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4920      	ldr	r1, [pc, #128]	@ (8001d6c <HAL_I2C_Init+0x148>)
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	491a      	ldr	r1, [pc, #104]	@ (8001d64 <HAL_I2C_Init+0x140>)
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69d9      	ldr	r1, [r3, #28]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2101      	movs	r1, #1
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2241      	movs	r2, #65	@ 0x41
 8001d42:	2120      	movs	r1, #32
 8001d44:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2242      	movs	r2, #66	@ 0x42
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	f0ffffff 	.word	0xf0ffffff
 8001d64:	ffff7fff 	.word	0xffff7fff
 8001d68:	fffff7ff 	.word	0xfffff7ff
 8001d6c:	02008000 	.word	0x02008000

08001d70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	0008      	movs	r0, r1
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	230a      	movs	r3, #10
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	1c02      	adds	r2, r0, #0
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	2308      	movs	r3, #8
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	1c0a      	adds	r2, r1, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2241      	movs	r2, #65	@ 0x41
 8001d92:	5c9b      	ldrb	r3, [r3, r2]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d000      	beq.n	8001d9c <HAL_I2C_Master_Transmit+0x2c>
 8001d9a:	e10a      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2240      	movs	r2, #64	@ 0x40
 8001da0:	5c9b      	ldrb	r3, [r3, r2]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_I2C_Master_Transmit+0x3a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e104      	b.n	8001fb4 <HAL_I2C_Master_Transmit+0x244>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2240      	movs	r2, #64	@ 0x40
 8001dae:	2101      	movs	r1, #1
 8001db0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001db2:	f7ff f909 	bl	8000fc8 <HAL_GetTick>
 8001db6:	0003      	movs	r3, r0
 8001db8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	0219      	lsls	r1, r3, #8
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2319      	movs	r3, #25
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f000 f91e 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0ef      	b.n	8001fb4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2241      	movs	r2, #65	@ 0x41
 8001dd8:	2121      	movs	r1, #33	@ 0x21
 8001dda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2242      	movs	r2, #66	@ 0x42
 8001de0:	2110      	movs	r1, #16
 8001de2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2208      	movs	r2, #8
 8001df4:	18ba      	adds	r2, r7, r2
 8001df6:	8812      	ldrh	r2, [r2, #0]
 8001df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2bff      	cmp	r3, #255	@ 0xff
 8001e08:	d906      	bls.n	8001e18 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	22ff      	movs	r2, #255	@ 0xff
 8001e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	045b      	lsls	r3, r3, #17
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e007      	b.n	8001e28 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	049b      	lsls	r3, r3, #18
 8001e26:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d027      	beq.n	8001e80 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	697c      	ldr	r4, [r7, #20]
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	8819      	ldrh	r1, [r3, #0]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	4b51      	ldr	r3, [pc, #324]	@ (8001fbc <HAL_I2C_Master_Transmit+0x24c>)
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	0023      	movs	r3, r4
 8001e7a:	f000 fa9f 	bl	80023bc <I2C_TransferConfig>
 8001e7e:	e06f      	b.n	8001f60 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	697c      	ldr	r4, [r7, #20]
 8001e88:	230a      	movs	r3, #10
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	8819      	ldrh	r1, [r3, #0]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	4b4a      	ldr	r3, [pc, #296]	@ (8001fbc <HAL_I2C_Master_Transmit+0x24c>)
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	0023      	movs	r3, r4
 8001e96:	f000 fa91 	bl	80023bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e9a:	e061      	b.n	8001f60 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f908 	bl	80020b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ea8:	1e03      	subs	r3, r0, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e081      	b.n	8001fb4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03a      	beq.n	8001f60 <HAL_I2C_Master_Transmit+0x1f0>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d136      	bne.n	8001f60 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	0013      	movs	r3, r2
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	f000 f882 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001f04:	1e03      	subs	r3, r0, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e053      	b.n	8001fb4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2bff      	cmp	r3, #255	@ 0xff
 8001f14:	d911      	bls.n	8001f3a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	22ff      	movs	r2, #255	@ 0xff
 8001f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	045c      	lsls	r4, r3, #17
 8001f26:	230a      	movs	r3, #10
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	8819      	ldrh	r1, [r3, #0]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	0023      	movs	r3, r4
 8001f34:	f000 fa42 	bl	80023bc <I2C_TransferConfig>
 8001f38:	e012      	b.n	8001f60 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	049c      	lsls	r4, r3, #18
 8001f4e:	230a      	movs	r3, #10
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	8819      	ldrh	r1, [r3, #0]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	2300      	movs	r3, #0
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	0023      	movs	r3, r4
 8001f5c:	f000 fa2e 	bl	80023bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d198      	bne.n	8001e9c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 f8e7 	bl	8002144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f76:	1e03      	subs	r3, r0, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e01a      	b.n	8001fb4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2220      	movs	r2, #32
 8001f84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	490b      	ldr	r1, [pc, #44]	@ (8001fc0 <HAL_I2C_Master_Transmit+0x250>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2241      	movs	r2, #65	@ 0x41
 8001f9a:	2120      	movs	r1, #32
 8001f9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2242      	movs	r2, #66	@ 0x42
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2240      	movs	r2, #64	@ 0x40
 8001faa:	2100      	movs	r1, #0
 8001fac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
  }
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b007      	add	sp, #28
 8001fba:	bd90      	pop	{r4, r7, pc}
 8001fbc:	80002000 	.word	0x80002000
 8001fc0:	fe00e800 	.word	0xfe00e800

08001fc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d103      	bne.n	8001fe2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d007      	beq.n	8002000 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	619a      	str	r2, [r3, #24]
  }
}
 8002000:	46c0      	nop			@ (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	1dfb      	adds	r3, r7, #7
 8002016:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002018:	e03a      	b.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f8d3 	bl	80021cc <I2C_IsErrorOccurred>
 8002026:	1e03      	subs	r3, r0, #0
 8002028:	d001      	beq.n	800202e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e040      	b.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	d02d      	beq.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002034:	f7fe ffc8 	bl	8000fc8 <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d302      	bcc.n	800204a <I2C_WaitOnFlagUntilTimeout+0x42>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d122      	bne.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	4013      	ands	r3, r2
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	425a      	negs	r2, r3
 800205a:	4153      	adcs	r3, r2
 800205c:	b2db      	uxtb	r3, r3
 800205e:	001a      	movs	r2, r3
 8002060:	1dfb      	adds	r3, r7, #7
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d113      	bne.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206c:	2220      	movs	r2, #32
 800206e:	431a      	orrs	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2241      	movs	r2, #65	@ 0x41
 8002078:	2120      	movs	r1, #32
 800207a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2242      	movs	r2, #66	@ 0x42
 8002080:	2100      	movs	r1, #0
 8002082:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2240      	movs	r2, #64	@ 0x40
 8002088:	2100      	movs	r1, #0
 800208a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e00f      	b.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	4013      	ands	r3, r2
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	425a      	negs	r2, r3
 80020a0:	4153      	adcs	r3, r2
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	001a      	movs	r2, r3
 80020a6:	1dfb      	adds	r3, r7, #7
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d0b5      	beq.n	800201a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b004      	add	sp, #16
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c4:	e032      	b.n	800212c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f87d 	bl	80021cc <I2C_IsErrorOccurred>
 80020d2:	1e03      	subs	r3, r0, #0
 80020d4:	d001      	beq.n	80020da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e030      	b.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3301      	adds	r3, #1
 80020de:	d025      	beq.n	800212c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e0:	f7fe ff72 	bl	8000fc8 <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d302      	bcc.n	80020f6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d11a      	bne.n	800212c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	2b02      	cmp	r3, #2
 8002102:	d013      	beq.n	800212c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002108:	2220      	movs	r2, #32
 800210a:	431a      	orrs	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2241      	movs	r2, #65	@ 0x41
 8002114:	2120      	movs	r1, #32
 8002116:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2242      	movs	r2, #66	@ 0x42
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2240      	movs	r2, #64	@ 0x40
 8002124:	2100      	movs	r1, #0
 8002126:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e007      	b.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2202      	movs	r2, #2
 8002134:	4013      	ands	r3, r2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d1c5      	bne.n	80020c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}

08002144 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002150:	e02f      	b.n	80021b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f837 	bl	80021cc <I2C_IsErrorOccurred>
 800215e:	1e03      	subs	r3, r0, #0
 8002160:	d001      	beq.n	8002166 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e02d      	b.n	80021c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002166:	f7fe ff2f 	bl	8000fc8 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	429a      	cmp	r2, r3
 8002174:	d302      	bcc.n	800217c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d11a      	bne.n	80021b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2220      	movs	r2, #32
 8002184:	4013      	ands	r3, r2
 8002186:	2b20      	cmp	r3, #32
 8002188:	d013      	beq.n	80021b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	2220      	movs	r2, #32
 8002190:	431a      	orrs	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2241      	movs	r2, #65	@ 0x41
 800219a:	2120      	movs	r1, #32
 800219c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2242      	movs	r2, #66	@ 0x42
 80021a2:	2100      	movs	r1, #0
 80021a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2240      	movs	r2, #64	@ 0x40
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e007      	b.n	80021c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2220      	movs	r2, #32
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d1c8      	bne.n	8002152 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2327      	movs	r3, #39	@ 0x27
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2210      	movs	r2, #16
 80021f4:	4013      	ands	r3, r2
 80021f6:	d100      	bne.n	80021fa <I2C_IsErrorOccurred+0x2e>
 80021f8:	e079      	b.n	80022ee <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2210      	movs	r2, #16
 8002200:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002202:	e057      	b.n	80022b4 <I2C_IsErrorOccurred+0xe8>
 8002204:	2227      	movs	r2, #39	@ 0x27
 8002206:	18bb      	adds	r3, r7, r2
 8002208:	18ba      	adds	r2, r7, r2
 800220a:	7812      	ldrb	r2, [r2, #0]
 800220c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	d04f      	beq.n	80022b4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002214:	f7fe fed8 	bl	8000fc8 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	429a      	cmp	r2, r3
 8002222:	d302      	bcc.n	800222a <I2C_IsErrorOccurred+0x5e>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d144      	bne.n	80022b4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	01db      	lsls	r3, r3, #7
 8002234:	4013      	ands	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002238:	2013      	movs	r0, #19
 800223a:	183b      	adds	r3, r7, r0
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	2142      	movs	r1, #66	@ 0x42
 8002240:	5c52      	ldrb	r2, [r2, r1]
 8002242:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	401a      	ands	r2, r3
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	429a      	cmp	r2, r3
 8002256:	d126      	bne.n	80022a6 <I2C_IsErrorOccurred+0xda>
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	01db      	lsls	r3, r3, #7
 800225e:	429a      	cmp	r2, r3
 8002260:	d021      	beq.n	80022a6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002262:	183b      	adds	r3, r7, r0
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b20      	cmp	r3, #32
 8002268:	d01d      	beq.n	80022a6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	01c9      	lsls	r1, r1, #7
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800227c:	f7fe fea4 	bl	8000fc8 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002284:	e00f      	b.n	80022a6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002286:	f7fe fe9f 	bl	8000fc8 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b19      	cmp	r3, #25
 8002292:	d908      	bls.n	80022a6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	2220      	movs	r2, #32
 8002298:	4313      	orrs	r3, r2
 800229a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800229c:	2327      	movs	r3, #39	@ 0x27
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]

              break;
 80022a4:	e006      	b.n	80022b4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2220      	movs	r2, #32
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d1e8      	bne.n	8002286 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2220      	movs	r2, #32
 80022bc:	4013      	ands	r3, r2
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d004      	beq.n	80022cc <I2C_IsErrorOccurred+0x100>
 80022c2:	2327      	movs	r3, #39	@ 0x27
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d09b      	beq.n	8002204 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022cc:	2327      	movs	r3, #39	@ 0x27
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	2204      	movs	r2, #4
 80022e2:	4313      	orrs	r3, r2
 80022e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022e6:	2327      	movs	r3, #39	@ 0x27
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	d00c      	beq.n	800231a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2201      	movs	r2, #1
 8002304:	4313      	orrs	r3, r2
 8002306:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2280      	movs	r2, #128	@ 0x80
 800230e:	0052      	lsls	r2, r2, #1
 8002310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002312:	2327      	movs	r3, #39	@ 0x27
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4013      	ands	r3, r2
 8002322:	d00c      	beq.n	800233e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	2208      	movs	r2, #8
 8002328:	4313      	orrs	r3, r2
 800232a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2280      	movs	r2, #128	@ 0x80
 8002332:	00d2      	lsls	r2, r2, #3
 8002334:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002336:	2327      	movs	r3, #39	@ 0x27
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4013      	ands	r3, r2
 8002346:	d00c      	beq.n	8002362 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	2202      	movs	r2, #2
 800234c:	4313      	orrs	r3, r2
 800234e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2280      	movs	r2, #128	@ 0x80
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800235a:	2327      	movs	r3, #39	@ 0x27
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002362:	2327      	movs	r3, #39	@ 0x27
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01d      	beq.n	80023a8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	0018      	movs	r0, r3
 8002370:	f7ff fe28 	bl	8001fc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	490e      	ldr	r1, [pc, #56]	@ (80023b8 <I2C_IsErrorOccurred+0x1ec>)
 8002380:	400a      	ands	r2, r1
 8002382:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2241      	movs	r2, #65	@ 0x41
 8002394:	2120      	movs	r1, #32
 8002396:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2242      	movs	r2, #66	@ 0x42
 800239c:	2100      	movs	r1, #0
 800239e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2240      	movs	r2, #64	@ 0x40
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80023a8:	2327      	movs	r3, #39	@ 0x27
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b00a      	add	sp, #40	@ 0x28
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	fe00e800 	.word	0xfe00e800

080023bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	0008      	movs	r0, r1
 80023c6:	0011      	movs	r1, r2
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	240a      	movs	r4, #10
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	1c02      	adds	r2, r0, #0
 80023d0:	801a      	strh	r2, [r3, #0]
 80023d2:	2009      	movs	r0, #9
 80023d4:	183b      	adds	r3, r7, r0
 80023d6:	1c0a      	adds	r2, r1, #0
 80023d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023da:	193b      	adds	r3, r7, r4
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	059b      	lsls	r3, r3, #22
 80023e0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	0419      	lsls	r1, r3, #16
 80023e8:	23ff      	movs	r3, #255	@ 0xff
 80023ea:	041b      	lsls	r3, r3, #16
 80023ec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023ee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f6:	4313      	orrs	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002406:	0d51      	lsrs	r1, r2, #21
 8002408:	2280      	movs	r2, #128	@ 0x80
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	400a      	ands	r2, r1
 800240e:	4907      	ldr	r1, [pc, #28]	@ (800242c <I2C_TransferConfig+0x70>)
 8002410:	430a      	orrs	r2, r1
 8002412:	43d2      	mvns	r2, r2
 8002414:	401a      	ands	r2, r3
 8002416:	0011      	movs	r1, r2
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	b007      	add	sp, #28
 8002428:	bd90      	pop	{r4, r7, pc}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	03ff63ff 	.word	0x03ff63ff

08002430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2241      	movs	r2, #65	@ 0x41
 800243e:	5c9b      	ldrb	r3, [r3, r2]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b20      	cmp	r3, #32
 8002444:	d138      	bne.n	80024b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2240      	movs	r2, #64	@ 0x40
 800244a:	5c9b      	ldrb	r3, [r3, r2]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002450:	2302      	movs	r3, #2
 8002452:	e032      	b.n	80024ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2240      	movs	r2, #64	@ 0x40
 8002458:	2101      	movs	r1, #1
 800245a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2241      	movs	r2, #65	@ 0x41
 8002460:	2124      	movs	r1, #36	@ 0x24
 8002462:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2101      	movs	r1, #1
 8002470:	438a      	bics	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4911      	ldr	r1, [pc, #68]	@ (80024c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002480:	400a      	ands	r2, r1
 8002482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2241      	movs	r2, #65	@ 0x41
 80024a8:	2120      	movs	r1, #32
 80024aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2240      	movs	r2, #64	@ 0x40
 80024b0:	2100      	movs	r1, #0
 80024b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	ffffefff 	.word	0xffffefff

080024c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2241      	movs	r2, #65	@ 0x41
 80024d6:	5c9b      	ldrb	r3, [r3, r2]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d139      	bne.n	8002552 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2240      	movs	r2, #64	@ 0x40
 80024e2:	5c9b      	ldrb	r3, [r3, r2]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e033      	b.n	8002554 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2240      	movs	r2, #64	@ 0x40
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2241      	movs	r2, #65	@ 0x41
 80024f8:	2124      	movs	r1, #36	@ 0x24
 80024fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2101      	movs	r1, #1
 8002508:	438a      	bics	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a11      	ldr	r2, [pc, #68]	@ (800255c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	430a      	orrs	r2, r1
 800253c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2241      	movs	r2, #65	@ 0x41
 8002542:	2120      	movs	r1, #32
 8002544:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2240      	movs	r2, #64	@ 0x40
 800254a:	2100      	movs	r1, #0
 800254c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
  }
}
 8002554:	0018      	movs	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	b004      	add	sp, #16
 800255a:	bd80      	pop	{r7, pc}
 800255c:	fffff0ff 	.word	0xfffff0ff

08002560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	@ (80025d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800256e:	4013      	ands	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	2380      	movs	r3, #128	@ 0x80
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	429a      	cmp	r2, r3
 8002582:	d11f      	bne.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002584:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	0013      	movs	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	189b      	adds	r3, r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4912      	ldr	r1, [pc, #72]	@ (80025dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002592:	0018      	movs	r0, r3
 8002594:	f7fd fdb6 	bl	8000104 <__udivsi3>
 8002598:	0003      	movs	r3, r0
 800259a:	3301      	adds	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800259e:	e008      	b.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e001      	b.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e009      	b.n	80025c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b2:	4b07      	ldr	r3, [pc, #28]	@ (80025d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	401a      	ands	r2, r3
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d0ed      	beq.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b004      	add	sp, #16
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	40007000 	.word	0x40007000
 80025d4:	fffff9ff 	.word	0xfffff9ff
 80025d8:	20000024 	.word	0x20000024
 80025dc:	000f4240 	.word	0x000f4240

080025e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	23e0      	movs	r3, #224	@ 0xe0
 80025ea:	01db      	lsls	r3, r3, #7
 80025ec:	4013      	ands	r3, r2
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f000 fb50 	bl	8002cac <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	4013      	ands	r3, r2
 8002614:	d100      	bne.n	8002618 <HAL_RCC_OscConfig+0x20>
 8002616:	e07c      	b.n	8002712 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002618:	4bc3      	ldr	r3, [pc, #780]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2238      	movs	r2, #56	@ 0x38
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002622:	4bc1      	ldr	r3, [pc, #772]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2203      	movs	r2, #3
 8002628:	4013      	ands	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b10      	cmp	r3, #16
 8002630:	d102      	bne.n	8002638 <HAL_RCC_OscConfig+0x40>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d002      	beq.n	800263e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b08      	cmp	r3, #8
 800263c:	d10b      	bne.n	8002656 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263e:	4bba      	ldr	r3, [pc, #744]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	4013      	ands	r3, r2
 8002648:	d062      	beq.n	8002710 <HAL_RCC_OscConfig+0x118>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d15e      	bne.n	8002710 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e32a      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	025b      	lsls	r3, r3, #9
 800265e:	429a      	cmp	r2, r3
 8002660:	d107      	bne.n	8002672 <HAL_RCC_OscConfig+0x7a>
 8002662:	4bb1      	ldr	r3, [pc, #708]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4bb0      	ldr	r3, [pc, #704]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002668:	2180      	movs	r1, #128	@ 0x80
 800266a:	0249      	lsls	r1, r1, #9
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e020      	b.n	80026b4 <HAL_RCC_OscConfig+0xbc>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	23a0      	movs	r3, #160	@ 0xa0
 8002678:	02db      	lsls	r3, r3, #11
 800267a:	429a      	cmp	r2, r3
 800267c:	d10e      	bne.n	800269c <HAL_RCC_OscConfig+0xa4>
 800267e:	4baa      	ldr	r3, [pc, #680]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4ba9      	ldr	r3, [pc, #676]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002684:	2180      	movs	r1, #128	@ 0x80
 8002686:	02c9      	lsls	r1, r1, #11
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	4ba6      	ldr	r3, [pc, #664]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4ba5      	ldr	r3, [pc, #660]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002692:	2180      	movs	r1, #128	@ 0x80
 8002694:	0249      	lsls	r1, r1, #9
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0xbc>
 800269c:	4ba2      	ldr	r3, [pc, #648]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4ba1      	ldr	r3, [pc, #644]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80026a2:	49a2      	ldr	r1, [pc, #648]	@ (800292c <HAL_RCC_OscConfig+0x334>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	4b9f      	ldr	r3, [pc, #636]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b9e      	ldr	r3, [pc, #632]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80026ae:	49a0      	ldr	r1, [pc, #640]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026b0:	400a      	ands	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d014      	beq.n	80026e6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fc84 	bl	8000fc8 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c6:	f7fe fc7f 	bl	8000fc8 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	@ 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e2e9      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d8:	4b93      	ldr	r3, [pc, #588]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	4013      	ands	r3, r2
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0xce>
 80026e4:	e015      	b.n	8002712 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fc6f 	bl	8000fc8 <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fc6a 	bl	8000fc8 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e2d4      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002702:	4b89      	ldr	r3, [pc, #548]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	029b      	lsls	r3, r3, #10
 800270a:	4013      	ands	r3, r2
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0xf8>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2202      	movs	r2, #2
 8002718:	4013      	ands	r3, r2
 800271a:	d100      	bne.n	800271e <HAL_RCC_OscConfig+0x126>
 800271c:	e099      	b.n	8002852 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271e:	4b82      	ldr	r3, [pc, #520]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2238      	movs	r2, #56	@ 0x38
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002728:	4b7f      	ldr	r3, [pc, #508]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2203      	movs	r2, #3
 800272e:	4013      	ands	r3, r2
 8002730:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b10      	cmp	r3, #16
 8002736:	d102      	bne.n	800273e <HAL_RCC_OscConfig+0x146>
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d002      	beq.n	8002744 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d135      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002744:	4b78      	ldr	r3, [pc, #480]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	@ 0x80
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4013      	ands	r3, r2
 800274e:	d005      	beq.n	800275c <HAL_RCC_OscConfig+0x164>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e2a7      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b72      	ldr	r3, [pc, #456]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a74      	ldr	r2, [pc, #464]	@ (8002934 <HAL_RCC_OscConfig+0x33c>)
 8002762:	4013      	ands	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	021a      	lsls	r2, r3, #8
 800276c:	4b6e      	ldr	r3, [pc, #440]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d112      	bne.n	800279e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002778:	4b6b      	ldr	r3, [pc, #428]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a6e      	ldr	r2, [pc, #440]	@ (8002938 <HAL_RCC_OscConfig+0x340>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	4b68      	ldr	r3, [pc, #416]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800278c:	4b66      	ldr	r3, [pc, #408]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0adb      	lsrs	r3, r3, #11
 8002792:	2207      	movs	r2, #7
 8002794:	4013      	ands	r3, r2
 8002796:	4a69      	ldr	r2, [pc, #420]	@ (800293c <HAL_RCC_OscConfig+0x344>)
 8002798:	40da      	lsrs	r2, r3
 800279a:	4b69      	ldr	r3, [pc, #420]	@ (8002940 <HAL_RCC_OscConfig+0x348>)
 800279c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800279e:	4b69      	ldr	r3, [pc, #420]	@ (8002944 <HAL_RCC_OscConfig+0x34c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7fe fbb4 	bl	8000f10 <HAL_InitTick>
 80027a8:	1e03      	subs	r3, r0, #0
 80027aa:	d051      	beq.n	8002850 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e27d      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d030      	beq.n	800281a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002938 <HAL_RCC_OscConfig+0x340>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	4b58      	ldr	r3, [pc, #352]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b56      	ldr	r3, [pc, #344]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b55      	ldr	r3, [pc, #340]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80027d2:	2180      	movs	r1, #128	@ 0x80
 80027d4:	0049      	lsls	r1, r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fbf5 	bl	8000fc8 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e4:	f7fe fbf0 	bl	8000fc8 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e25a      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4013      	ands	r3, r2
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b49      	ldr	r3, [pc, #292]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a4b      	ldr	r2, [pc, #300]	@ (8002934 <HAL_RCC_OscConfig+0x33c>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	4b45      	ldr	r3, [pc, #276]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002814:	430a      	orrs	r2, r1
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	e01b      	b.n	8002852 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b43      	ldr	r3, [pc, #268]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b42      	ldr	r3, [pc, #264]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002820:	4949      	ldr	r1, [pc, #292]	@ (8002948 <HAL_RCC_OscConfig+0x350>)
 8002822:	400a      	ands	r2, r1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fbcf 	bl	8000fc8 <HAL_GetTick>
 800282a:	0003      	movs	r3, r0
 800282c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe fbca 	bl	8000fc8 <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e234      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002842:	4b39      	ldr	r3, [pc, #228]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	2380      	movs	r3, #128	@ 0x80
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4013      	ands	r3, r2
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x238>
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002850:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2208      	movs	r2, #8
 8002858:	4013      	ands	r3, r2
 800285a:	d047      	beq.n	80028ec <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800285c:	4b32      	ldr	r3, [pc, #200]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2238      	movs	r2, #56	@ 0x38
 8002862:	4013      	ands	r3, r2
 8002864:	2b18      	cmp	r3, #24
 8002866:	d10a      	bne.n	800287e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002868:	4b2f      	ldr	r3, [pc, #188]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800286a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d03c      	beq.n	80028ec <HAL_RCC_OscConfig+0x2f4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d138      	bne.n	80028ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e216      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d019      	beq.n	80028ba <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002886:	4b28      	ldr	r3, [pc, #160]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002888:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800288a:	4b27      	ldr	r3, [pc, #156]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800288c:	2101      	movs	r1, #1
 800288e:	430a      	orrs	r2, r1
 8002890:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe fb99 	bl	8000fc8 <HAL_GetTick>
 8002896:	0003      	movs	r3, r0
 8002898:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fb94 	bl	8000fc8 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1fe      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80028b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b2:	2202      	movs	r2, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d0f1      	beq.n	800289c <HAL_RCC_OscConfig+0x2a4>
 80028b8:	e018      	b.n	80028ec <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80028bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80028c0:	2101      	movs	r1, #1
 80028c2:	438a      	bics	r2, r1
 80028c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fb7f 	bl	8000fc8 <HAL_GetTick>
 80028ca:	0003      	movs	r3, r0
 80028cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d0:	f7fe fb7a 	bl	8000fc8 <HAL_GetTick>
 80028d4:	0002      	movs	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1e4      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 80028e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e6:	2202      	movs	r2, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	d1f1      	bne.n	80028d0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2204      	movs	r2, #4
 80028f2:	4013      	ands	r3, r2
 80028f4:	d100      	bne.n	80028f8 <HAL_RCC_OscConfig+0x300>
 80028f6:	e0c7      	b.n	8002a88 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f8:	231f      	movs	r3, #31
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002900:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2238      	movs	r2, #56	@ 0x38
 8002906:	4013      	ands	r3, r2
 8002908:	2b20      	cmp	r3, #32
 800290a:	d11f      	bne.n	800294c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_RCC_OscConfig+0x330>)
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d100      	bne.n	8002918 <HAL_RCC_OscConfig+0x320>
 8002916:	e0b7      	b.n	8002a88 <HAL_RCC_OscConfig+0x490>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d000      	beq.n	8002922 <HAL_RCC_OscConfig+0x32a>
 8002920:	e0b2      	b.n	8002a88 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1c2      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	40021000 	.word	0x40021000
 800292c:	fffeffff 	.word	0xfffeffff
 8002930:	fffbffff 	.word	0xfffbffff
 8002934:	ffff80ff 	.word	0xffff80ff
 8002938:	ffffc7ff 	.word	0xffffc7ff
 800293c:	00f42400 	.word	0x00f42400
 8002940:	20000024 	.word	0x20000024
 8002944:	20000028 	.word	0x20000028
 8002948:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800294c:	4bb5      	ldr	r3, [pc, #724]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 800294e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	055b      	lsls	r3, r3, #21
 8002954:	4013      	ands	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x364>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x366>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d011      	beq.n	8002986 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4bb0      	ldr	r3, [pc, #704]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002966:	4baf      	ldr	r3, [pc, #700]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002968:	2180      	movs	r1, #128	@ 0x80
 800296a:	0549      	lsls	r1, r1, #21
 800296c:	430a      	orrs	r2, r1
 800296e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002970:	4bac      	ldr	r3, [pc, #688]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	055b      	lsls	r3, r3, #21
 8002978:	4013      	ands	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800297e:	231f      	movs	r3, #31
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	4ba8      	ldr	r3, [pc, #672]	@ (8002c28 <HAL_RCC_OscConfig+0x630>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	@ 0x80
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4013      	ands	r3, r2
 8002990:	d11a      	bne.n	80029c8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002992:	4ba5      	ldr	r3, [pc, #660]	@ (8002c28 <HAL_RCC_OscConfig+0x630>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4ba4      	ldr	r3, [pc, #656]	@ (8002c28 <HAL_RCC_OscConfig+0x630>)
 8002998:	2180      	movs	r1, #128	@ 0x80
 800299a:	0049      	lsls	r1, r1, #1
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fb12 	bl	8000fc8 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029aa:	f7fe fb0d 	bl	8000fc8 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e177      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029bc:	4b9a      	ldr	r3, [pc, #616]	@ (8002c28 <HAL_RCC_OscConfig+0x630>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x3e6>
 80029d0:	4b94      	ldr	r3, [pc, #592]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 80029d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029d4:	4b93      	ldr	r3, [pc, #588]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	430a      	orrs	r2, r1
 80029da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029dc:	e01c      	b.n	8002a18 <HAL_RCC_OscConfig+0x420>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x408>
 80029e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 80029e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 80029ec:	2104      	movs	r1, #4
 80029ee:	430a      	orrs	r2, r1
 80029f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 80029f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0x420>
 8002a00:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002a02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a04:	4b87      	ldr	r3, [pc, #540]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002a06:	2101      	movs	r1, #1
 8002a08:	438a      	bics	r2, r1
 8002a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a0c:	4b85      	ldr	r3, [pc, #532]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002a0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a10:	4b84      	ldr	r3, [pc, #528]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002a12:	2104      	movs	r1, #4
 8002a14:	438a      	bics	r2, r1
 8002a16:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d014      	beq.n	8002a4a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fad2 	bl	8000fc8 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a28:	e009      	b.n	8002a3e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe facd 	bl	8000fc8 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	4a7d      	ldr	r2, [pc, #500]	@ (8002c2c <HAL_RCC_OscConfig+0x634>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e136      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3e:	4b79      	ldr	r3, [pc, #484]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x432>
 8002a48:	e013      	b.n	8002a72 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fabd 	bl	8000fc8 <HAL_GetTick>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a52:	e009      	b.n	8002a68 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fab8 	bl	8000fc8 <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	4a73      	ldr	r2, [pc, #460]	@ (8002c2c <HAL_RCC_OscConfig+0x634>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e121      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	4b6e      	ldr	r3, [pc, #440]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a72:	231f      	movs	r3, #31
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a7c:	4b69      	ldr	r3, [pc, #420]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a80:	4b68      	ldr	r3, [pc, #416]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002a82:	496b      	ldr	r1, [pc, #428]	@ (8002c30 <HAL_RCC_OscConfig+0x638>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d039      	beq.n	8002b06 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01b      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a9a:	4b62      	ldr	r3, [pc, #392]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b61      	ldr	r3, [pc, #388]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002aa0:	2180      	movs	r1, #128	@ 0x80
 8002aa2:	03c9      	lsls	r1, r1, #15
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fa8e 	bl	8000fc8 <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab2:	f7fe fa89 	bl	8000fc8 <HAL_GetTick>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0f3      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ac4:	4b57      	ldr	r3, [pc, #348]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	4013      	ands	r3, r2
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x4ba>
 8002ad0:	e019      	b.n	8002b06 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ad2:	4b54      	ldr	r3, [pc, #336]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002ad8:	4956      	ldr	r1, [pc, #344]	@ (8002c34 <HAL_RCC_OscConfig+0x63c>)
 8002ada:	400a      	ands	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe fa73 	bl	8000fc8 <HAL_GetTick>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae8:	f7fe fa6e 	bl	8000fc8 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0d8      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	041b      	lsls	r3, r3, #16
 8002b02:	4013      	ands	r3, r2
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d100      	bne.n	8002b10 <HAL_RCC_OscConfig+0x518>
 8002b0e:	e0cc      	b.n	8002caa <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b10:	4b44      	ldr	r3, [pc, #272]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2238      	movs	r2, #56	@ 0x38
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d100      	bne.n	8002b1e <HAL_RCC_OscConfig+0x526>
 8002b1c:	e07b      	b.n	8002c16 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d156      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b3f      	ldr	r3, [pc, #252]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b2c:	4942      	ldr	r1, [pc, #264]	@ (8002c38 <HAL_RCC_OscConfig+0x640>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7fe fa49 	bl	8000fc8 <HAL_GetTick>
 8002b36:	0003      	movs	r3, r0
 8002b38:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe fa44 	bl	8000fc8 <HAL_GetTick>
 8002b40:	0002      	movs	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0ae      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4e:	4b35      	ldr	r3, [pc, #212]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	049b      	lsls	r3, r3, #18
 8002b56:	4013      	ands	r3, r2
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b5a:	4b32      	ldr	r3, [pc, #200]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4a37      	ldr	r2, [pc, #220]	@ (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b86:	431a      	orrs	r2, r3
 8002b88:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8e:	4b25      	ldr	r3, [pc, #148]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b94:	2180      	movs	r1, #128	@ 0x80
 8002b96:	0449      	lsls	r1, r1, #17
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b9c:	4b21      	ldr	r3, [pc, #132]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002ba2:	2180      	movs	r1, #128	@ 0x80
 8002ba4:	0549      	lsls	r1, r1, #21
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe fa0d 	bl	8000fc8 <HAL_GetTick>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe fa08 	bl	8000fc8 <HAL_GetTick>
 8002bb8:	0002      	movs	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e072      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc6:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	049b      	lsls	r3, r3, #18
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x5bc>
 8002bd2:	e06a      	b.n	8002caa <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002bda:	4917      	ldr	r1, [pc, #92]	@ (8002c38 <HAL_RCC_OscConfig+0x640>)
 8002bdc:	400a      	ands	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe f9f2 	bl	8000fc8 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe f9ed 	bl	8000fc8 <HAL_GetTick>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e057      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfc:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	@ 0x80
 8002c02:	049b      	lsls	r3, r3, #18
 8002c04:	4013      	ands	r3, r2
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <HAL_RCC_OscConfig+0x62c>)
 8002c0e:	490c      	ldr	r1, [pc, #48]	@ (8002c40 <HAL_RCC_OscConfig+0x648>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	e049      	b.n	8002caa <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d112      	bne.n	8002c44 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e044      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	00001388 	.word	0x00001388
 8002c30:	efffffff 	.word	0xefffffff
 8002c34:	ffbfffff 	.word	0xffbfffff
 8002c38:	feffffff 	.word	0xfeffffff
 8002c3c:	11c1808c 	.word	0x11c1808c
 8002c40:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c44:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_RCC_OscConfig+0x6bc>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	401a      	ands	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d126      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2270      	movs	r2, #112	@ 0x70
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d11f      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	23fe      	movs	r3, #254	@ 0xfe
 8002c6a:	01db      	lsls	r3, r3, #7
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d116      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	23f8      	movs	r3, #248	@ 0xf8
 8002c7c:	039b      	lsls	r3, r3, #14
 8002c7e:	401a      	ands	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d10e      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	23e0      	movs	r3, #224	@ 0xe0
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	401a      	ands	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	0f5b      	lsrs	r3, r3, #29
 8002c9c:	075a      	lsls	r2, r3, #29
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b008      	add	sp, #32
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0e9      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b76      	ldr	r3, [pc, #472]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d91e      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b73      	ldr	r3, [pc, #460]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2207      	movs	r2, #7
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	4b70      	ldr	r3, [pc, #448]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cec:	f7fe f96c 	bl	8000fc8 <HAL_GetTick>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cf4:	e009      	b.n	8002d0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf6:	f7fe f967 	bl	8000fc8 <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	4a6a      	ldr	r2, [pc, #424]	@ (8002eac <HAL_RCC_ClockConfig+0x1f4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0ca      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2207      	movs	r2, #7
 8002d10:	4013      	ands	r3, r2
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d1ee      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d015      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2204      	movs	r2, #4
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d006      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d2c:	4b60      	ldr	r3, [pc, #384]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4b5f      	ldr	r3, [pc, #380]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d32:	21e0      	movs	r1, #224	@ 0xe0
 8002d34:	01c9      	lsls	r1, r1, #7
 8002d36:	430a      	orrs	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1fc>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	4b59      	ldr	r3, [pc, #356]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	d057      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d60:	4b53      	ldr	r3, [pc, #332]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	029b      	lsls	r3, r3, #10
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d12b      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e097      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d78:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	@ 0x80
 8002d7e:	049b      	lsls	r3, r3, #18
 8002d80:	4013      	ands	r3, r2
 8002d82:	d11f      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e08b      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d90:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d113      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e07f      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da8:	4b41      	ldr	r3, [pc, #260]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dac:	2202      	movs	r2, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	d108      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e074      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db6:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dba:	2202      	movs	r2, #2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e06d      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2207      	movs	r2, #7
 8002dca:	4393      	bics	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4b37      	ldr	r3, [pc, #220]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd8:	f7fe f8f6 	bl	8000fc8 <HAL_GetTick>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de0:	e009      	b.n	8002df6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de2:	f7fe f8f1 	bl	8000fc8 <HAL_GetTick>
 8002de6:	0002      	movs	r2, r0
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	4a2f      	ldr	r2, [pc, #188]	@ (8002eac <HAL_RCC_ClockConfig+0x1f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e054      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df6:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2238      	movs	r2, #56	@ 0x38
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1ec      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e08:	4b27      	ldr	r3, [pc, #156]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	4013      	ands	r3, r2
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d21e      	bcs.n	8002e54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	4393      	bics	r3, r2
 8002e1e:	0019      	movs	r1, r3
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e28:	f7fe f8ce 	bl	8000fc8 <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e30:	e009      	b.n	8002e46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e32:	f7fe f8c9 	bl	8000fc8 <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002eac <HAL_RCC_ClockConfig+0x1f4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e02c      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e46:	4b18      	ldr	r3, [pc, #96]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1ee      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5e:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4a15      	ldr	r2, [pc, #84]	@ (8002eb8 <HAL_RCC_ClockConfig+0x200>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e72:	f000 f829 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e76:	0001      	movs	r1, r0
 8002e78:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	220f      	movs	r2, #15
 8002e80:	401a      	ands	r2, r3
 8002e82:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <HAL_RCC_ClockConfig+0x204>)
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	58d3      	ldr	r3, [r2, r3]
 8002e88:	221f      	movs	r2, #31
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	000a      	movs	r2, r1
 8002e8e:	40da      	lsrs	r2, r3
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_ClockConfig+0x208>)
 8002e92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_ClockConfig+0x20c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7fe f839 	bl	8000f10 <HAL_InitTick>
 8002e9e:	0003      	movs	r3, r0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b004      	add	sp, #16
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	00001388 	.word	0x00001388
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	fffff0ff 	.word	0xfffff0ff
 8002eb8:	ffff8fff 	.word	0xffff8fff
 8002ebc:	08005364 	.word	0x08005364
 8002ec0:	20000024 	.word	0x20000024
 8002ec4:	20000028 	.word	0x20000028

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ece:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2238      	movs	r2, #56	@ 0x38
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d10f      	bne.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ed8:	4b39      	ldr	r3, [pc, #228]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0adb      	lsrs	r3, r3, #11
 8002ede:	2207      	movs	r2, #7
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	0013      	movs	r3, r2
 8002ee8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	4835      	ldr	r0, [pc, #212]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002eee:	f7fd f909 	bl	8000104 <__udivsi3>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	e05d      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef8:	4b31      	ldr	r3, [pc, #196]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2238      	movs	r2, #56	@ 0x38
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f04:	4b30      	ldr	r3, [pc, #192]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	e054      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2238      	movs	r2, #56	@ 0x38
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d138      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f16:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f20:	4b27      	ldr	r3, [pc, #156]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	2207      	movs	r2, #7
 8002f28:	4013      	ands	r3, r2
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d10d      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	4824      	ldr	r0, [pc, #144]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f38:	f7fd f8e4 	bl	8000104 <__udivsi3>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	0019      	movs	r1, r3
 8002f40:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	227f      	movs	r2, #127	@ 0x7f
 8002f48:	4013      	ands	r3, r2
 8002f4a:	434b      	muls	r3, r1
 8002f4c:	617b      	str	r3, [r7, #20]
        break;
 8002f4e:	e00d      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	481c      	ldr	r0, [pc, #112]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f54:	f7fd f8d6 	bl	8000104 <__udivsi3>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	4b18      	ldr	r3, [pc, #96]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	227f      	movs	r2, #127	@ 0x7f
 8002f64:	4013      	ands	r3, r2
 8002f66:	434b      	muls	r3, r1
 8002f68:	617b      	str	r3, [r7, #20]
        break;
 8002f6a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f6c:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0f5b      	lsrs	r3, r3, #29
 8002f72:	2207      	movs	r2, #7
 8002f74:	4013      	ands	r3, r2
 8002f76:	3301      	adds	r3, #1
 8002f78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	6978      	ldr	r0, [r7, #20]
 8002f7e:	f7fd f8c1 	bl	8000104 <__udivsi3>
 8002f82:	0003      	movs	r3, r0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	e015      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f88:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2238      	movs	r2, #56	@ 0x38
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d103      	bne.n	8002f9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f94:	2380      	movs	r3, #128	@ 0x80
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f9c:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2238      	movs	r2, #56	@ 0x38
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b18      	cmp	r3, #24
 8002fa6:	d103      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fa8:	23fa      	movs	r3, #250	@ 0xfa
 8002faa:	01db      	lsls	r3, r3, #7
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	e001      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fb4:	693b      	ldr	r3, [r7, #16]
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b006      	add	sp, #24
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	00f42400 	.word	0x00f42400
 8002fc8:	007a1200 	.word	0x007a1200

08002fcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b02      	ldr	r3, [pc, #8]	@ (8002fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	20000024 	.word	0x20000024

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002fe4:	f7ff fff2 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fe8:	0004      	movs	r4, r0
 8002fea:	f7ff faf9 	bl	80025e0 <LL_RCC_GetAPB1Prescaler>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	0b1a      	lsrs	r2, r3, #12
 8002ff2:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff4:	0092      	lsls	r2, r2, #2
 8002ff6:	58d3      	ldr	r3, [r2, r3]
 8002ff8:	221f      	movs	r2, #31
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	40dc      	lsrs	r4, r3
 8002ffe:	0023      	movs	r3, r4
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	bdb0      	pop	{r4, r5, r7, pc}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	080053a4 	.word	0x080053a4

0800300c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003014:	2313      	movs	r3, #19
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800301c:	2312      	movs	r3, #18
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	@ 0x80
 800302a:	029b      	lsls	r3, r3, #10
 800302c:	4013      	ands	r3, r2
 800302e:	d100      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003030:	e0ad      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003032:	2011      	movs	r0, #17
 8003034:	183b      	adds	r3, r7, r0
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800303c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	055b      	lsls	r3, r3, #21
 8003042:	4013      	ands	r3, r2
 8003044:	d110      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b44      	ldr	r3, [pc, #272]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800304a:	4b43      	ldr	r3, [pc, #268]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800304c:	2180      	movs	r1, #128	@ 0x80
 800304e:	0549      	lsls	r1, r1, #21
 8003050:	430a      	orrs	r2, r1
 8003052:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003054:	4b40      	ldr	r3, [pc, #256]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003058:	2380      	movs	r3, #128	@ 0x80
 800305a:	055b      	lsls	r3, r3, #21
 800305c:	4013      	ands	r3, r2
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	183b      	adds	r3, r7, r0
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003068:	4b3c      	ldr	r3, [pc, #240]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800306e:	2180      	movs	r1, #128	@ 0x80
 8003070:	0049      	lsls	r1, r1, #1
 8003072:	430a      	orrs	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003076:	f7fd ffa7 	bl	8000fc8 <HAL_GetTick>
 800307a:	0003      	movs	r3, r0
 800307c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800307e:	e00b      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003080:	f7fd ffa2 	bl	8000fc8 <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d904      	bls.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800308e:	2313      	movs	r3, #19
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	2203      	movs	r2, #3
 8003094:	701a      	strb	r2, [r3, #0]
        break;
 8003096:	e005      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003098:	4b30      	ldr	r3, [pc, #192]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2380      	movs	r3, #128	@ 0x80
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	d0ed      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030a4:	2313      	movs	r3, #19
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d15e      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030b2:	23c0      	movs	r3, #192	@ 0xc0
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d019      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d014      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030ca:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ce:	4a24      	ldr	r2, [pc, #144]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030d4:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030da:	2180      	movs	r1, #128	@ 0x80
 80030dc:	0249      	lsls	r1, r1, #9
 80030de:	430a      	orrs	r2, r1
 80030e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030e8:	491e      	ldr	r1, [pc, #120]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80030ea:	400a      	ands	r2, r1
 80030ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2201      	movs	r2, #1
 80030f8:	4013      	ands	r3, r2
 80030fa:	d016      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fd ff64 	bl	8000fc8 <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003104:	e00c      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fd ff5f 	bl	8000fc8 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	4a15      	ldr	r2, [pc, #84]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d904      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003116:	2313      	movs	r3, #19
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2203      	movs	r2, #3
 800311c:	701a      	strb	r2, [r3, #0]
            break;
 800311e:	e004      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003120:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	2202      	movs	r2, #2
 8003126:	4013      	ands	r3, r2
 8003128:	d0ed      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800312a:	2313      	movs	r3, #19
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003134:	4b08      	ldr	r3, [pc, #32]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	4a09      	ldr	r2, [pc, #36]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003142:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003144:	430a      	orrs	r2, r1
 8003146:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003148:	e016      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800314a:	2312      	movs	r3, #18
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	2213      	movs	r2, #19
 8003150:	18ba      	adds	r2, r7, r2
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e00f      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003158:	40021000 	.word	0x40021000
 800315c:	40007000 	.word	0x40007000
 8003160:	fffffcff 	.word	0xfffffcff
 8003164:	fffeffff 	.word	0xfffeffff
 8003168:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	2312      	movs	r3, #18
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2213      	movs	r2, #19
 8003172:	18ba      	adds	r2, r7, r2
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003178:	2311      	movs	r3, #17
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d105      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003182:	4bb6      	ldr	r3, [pc, #728]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003184:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003186:	4bb5      	ldr	r3, [pc, #724]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003188:	49b5      	ldr	r1, [pc, #724]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800318a:	400a      	ands	r2, r1
 800318c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2201      	movs	r2, #1
 8003194:	4013      	ands	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003198:	4bb0      	ldr	r3, [pc, #704]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800319a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319c:	2203      	movs	r2, #3
 800319e:	4393      	bics	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4bad      	ldr	r3, [pc, #692]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a8:	430a      	orrs	r2, r1
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2202      	movs	r2, #2
 80031b2:	4013      	ands	r3, r2
 80031b4:	d009      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b6:	4ba9      	ldr	r3, [pc, #676]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	220c      	movs	r2, #12
 80031bc:	4393      	bics	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	4ba5      	ldr	r3, [pc, #660]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031c6:	430a      	orrs	r2, r1
 80031c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2204      	movs	r2, #4
 80031d0:	4013      	ands	r3, r2
 80031d2:	d009      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031d4:	4ba1      	ldr	r3, [pc, #644]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	2230      	movs	r2, #48	@ 0x30
 80031da:	4393      	bics	r3, r2
 80031dc:	0019      	movs	r1, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	4b9e      	ldr	r3, [pc, #632]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031e4:	430a      	orrs	r2, r1
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2210      	movs	r2, #16
 80031ee:	4013      	ands	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031f2:	4b9a      	ldr	r3, [pc, #616]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	4a9b      	ldr	r2, [pc, #620]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	4b96      	ldr	r3, [pc, #600]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003202:	430a      	orrs	r2, r1
 8003204:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	015b      	lsls	r3, r3, #5
 800320e:	4013      	ands	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003212:	4b92      	ldr	r3, [pc, #584]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	4a94      	ldr	r2, [pc, #592]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003218:	4013      	ands	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	4b8e      	ldr	r3, [pc, #568]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003222:	430a      	orrs	r2, r1
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4013      	ands	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003232:	4b8a      	ldr	r3, [pc, #552]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	4a8d      	ldr	r2, [pc, #564]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003240:	4b86      	ldr	r3, [pc, #536]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003242:	430a      	orrs	r2, r1
 8003244:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4013      	ands	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003252:	4b82      	ldr	r3, [pc, #520]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	4a86      	ldr	r2, [pc, #536]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003258:	4013      	ands	r3, r2
 800325a:	0019      	movs	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003260:	4b7e      	ldr	r3, [pc, #504]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003262:	430a      	orrs	r2, r1
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2220      	movs	r2, #32
 800326c:	4013      	ands	r3, r2
 800326e:	d009      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003270:	4b7a      	ldr	r3, [pc, #488]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	4a7f      	ldr	r2, [pc, #508]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	4b77      	ldr	r3, [pc, #476]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003280:	430a      	orrs	r2, r1
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2240      	movs	r2, #64	@ 0x40
 800328a:	4013      	ands	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800328e:	4b73      	ldr	r3, [pc, #460]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	4a79      	ldr	r2, [pc, #484]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003294:	4013      	ands	r3, r2
 8003296:	0019      	movs	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	4b6f      	ldr	r3, [pc, #444]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800329e:	430a      	orrs	r2, r1
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	@ 0x80
 80032a8:	01db      	lsls	r3, r3, #7
 80032aa:	4013      	ands	r3, r2
 80032ac:	d015      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ae:	4b6b      	ldr	r3, [pc, #428]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	0899      	lsrs	r1, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ba:	4b68      	ldr	r3, [pc, #416]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032c4:	2380      	movs	r3, #128	@ 0x80
 80032c6:	05db      	lsls	r3, r3, #23
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d106      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032cc:	4b63      	ldr	r3, [pc, #396]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b62      	ldr	r3, [pc, #392]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032d2:	2180      	movs	r1, #128	@ 0x80
 80032d4:	0249      	lsls	r1, r1, #9
 80032d6:	430a      	orrs	r2, r1
 80032d8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	031b      	lsls	r3, r3, #12
 80032e2:	4013      	ands	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032e6:	4b5d      	ldr	r3, [pc, #372]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ea:	2240      	movs	r2, #64	@ 0x40
 80032ec:	4393      	bics	r3, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032f4:	4b59      	ldr	r3, [pc, #356]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032f6:	430a      	orrs	r2, r1
 80032f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	2380      	movs	r3, #128	@ 0x80
 8003300:	039b      	lsls	r3, r3, #14
 8003302:	4013      	ands	r3, r2
 8003304:	d016      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003306:	4b55      	ldr	r3, [pc, #340]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330a:	4a5c      	ldr	r2, [pc, #368]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003314:	4b51      	ldr	r3, [pc, #324]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003316:	430a      	orrs	r2, r1
 8003318:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	03db      	lsls	r3, r3, #15
 8003322:	429a      	cmp	r2, r3
 8003324:	d106      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003326:	4b4d      	ldr	r3, [pc, #308]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	4b4c      	ldr	r3, [pc, #304]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800332c:	2180      	movs	r1, #128	@ 0x80
 800332e:	0449      	lsls	r1, r1, #17
 8003330:	430a      	orrs	r2, r1
 8003332:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	03db      	lsls	r3, r3, #15
 800333c:	4013      	ands	r3, r2
 800333e:	d016      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003340:	4b46      	ldr	r3, [pc, #280]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	4a4e      	ldr	r2, [pc, #312]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800334e:	4b43      	ldr	r3, [pc, #268]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003350:	430a      	orrs	r2, r1
 8003352:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	045b      	lsls	r3, r3, #17
 800335c:	429a      	cmp	r2, r3
 800335e:	d106      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003360:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003366:	2180      	movs	r1, #128	@ 0x80
 8003368:	0449      	lsls	r1, r1, #17
 800336a:	430a      	orrs	r2, r1
 800336c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	2380      	movs	r3, #128	@ 0x80
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	4013      	ands	r3, r2
 8003378:	d014      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800337a:	4b38      	ldr	r3, [pc, #224]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800337c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337e:	2203      	movs	r2, #3
 8003380:	4393      	bics	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1a      	ldr	r2, [r3, #32]
 8003388:	4b34      	ldr	r3, [pc, #208]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800338a:	430a      	orrs	r2, r1
 800338c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d106      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003396:	4b31      	ldr	r3, [pc, #196]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	4b30      	ldr	r3, [pc, #192]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800339c:	2180      	movs	r1, #128	@ 0x80
 800339e:	0249      	lsls	r1, r1, #9
 80033a0:	430a      	orrs	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	019b      	lsls	r3, r3, #6
 80033ac:	4013      	ands	r3, r2
 80033ae:	d014      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80033b0:	4b2a      	ldr	r3, [pc, #168]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	220c      	movs	r2, #12
 80033b6:	4393      	bics	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033be:	4b27      	ldr	r3, [pc, #156]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d106      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033cc:	4b23      	ldr	r3, [pc, #140]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4b22      	ldr	r3, [pc, #136]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033d2:	2180      	movs	r1, #128	@ 0x80
 80033d4:	0249      	lsls	r1, r1, #9
 80033d6:	430a      	orrs	r2, r1
 80033d8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	045b      	lsls	r3, r3, #17
 80033e2:	4013      	ands	r3, r2
 80033e4:	d016      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e6:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	4a22      	ldr	r2, [pc, #136]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f4:	4b19      	ldr	r3, [pc, #100]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033fe:	2380      	movs	r3, #128	@ 0x80
 8003400:	019b      	lsls	r3, r3, #6
 8003402:	429a      	cmp	r2, r3
 8003404:	d106      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003406:	4b15      	ldr	r3, [pc, #84]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	4b14      	ldr	r3, [pc, #80]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800340c:	2180      	movs	r1, #128	@ 0x80
 800340e:	0449      	lsls	r1, r1, #17
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	049b      	lsls	r3, r3, #18
 800341c:	4013      	ands	r3, r2
 800341e:	d016      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003420:	4b0e      	ldr	r3, [pc, #56]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	4a10      	ldr	r2, [pc, #64]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800342e:	4b0b      	ldr	r3, [pc, #44]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003430:	430a      	orrs	r2, r1
 8003432:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	429a      	cmp	r2, r3
 800343e:	d106      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003446:	2180      	movs	r1, #128	@ 0x80
 8003448:	0449      	lsls	r1, r1, #17
 800344a:	430a      	orrs	r2, r1
 800344c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800344e:	2312      	movs	r3, #18
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	781b      	ldrb	r3, [r3, #0]
}
 8003454:	0018      	movs	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	b006      	add	sp, #24
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40021000 	.word	0x40021000
 8003460:	efffffff 	.word	0xefffffff
 8003464:	fffff3ff 	.word	0xfffff3ff
 8003468:	fffffcff 	.word	0xfffffcff
 800346c:	fff3ffff 	.word	0xfff3ffff
 8003470:	ffcfffff 	.word	0xffcfffff
 8003474:	ffffcfff 	.word	0xffffcfff
 8003478:	ffff3fff 	.word	0xffff3fff
 800347c:	ffbfffff 	.word	0xffbfffff
 8003480:	feffffff 	.word	0xfeffffff

08003484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e046      	b.n	8003524 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2288      	movs	r2, #136	@ 0x88
 800349a:	589b      	ldr	r3, [r3, r2]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2284      	movs	r2, #132	@ 0x84
 80034a4:	2100      	movs	r1, #0
 80034a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fd fbd0 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2288      	movs	r2, #136	@ 0x88
 80034b4:	2124      	movs	r1, #36	@ 0x24
 80034b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2101      	movs	r1, #1
 80034c4:	438a      	bics	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 ffda 	bl	800448c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 fc80 	bl	8003de0 <UART_SetConfig>
 80034e0:	0003      	movs	r3, r0
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e01c      	b.n	8003524 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	490d      	ldr	r1, [pc, #52]	@ (800352c <HAL_UART_Init+0xa8>)
 80034f6:	400a      	ands	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	212a      	movs	r1, #42	@ 0x2a
 8003506:	438a      	bics	r2, r1
 8003508:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0018      	movs	r0, r3
 800351e:	f001 f869 	bl	80045f4 <UART_CheckIdleState>
 8003522:	0003      	movs	r3, r0
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}
 800352c:	ffffb7ff 	.word	0xffffb7ff

08003530 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	@ 0x30
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	1dbb      	adds	r3, r7, #6
 800353c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2288      	movs	r2, #136	@ 0x88
 8003542:	589b      	ldr	r3, [r3, r2]
 8003544:	2b20      	cmp	r3, #32
 8003546:	d000      	beq.n	800354a <HAL_UART_Transmit_IT+0x1a>
 8003548:	e08d      	b.n	8003666 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_UART_Transmit_IT+0x28>
 8003550:	1dbb      	adds	r3, r7, #6
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e085      	b.n	8003668 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	429a      	cmp	r2, r3
 8003566:	d109      	bne.n	800357c <HAL_UART_Transmit_IT+0x4c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2201      	movs	r2, #1
 8003574:	4013      	ands	r3, r2
 8003576:	d001      	beq.n	800357c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e075      	b.n	8003668 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1dba      	adds	r2, r7, #6
 8003586:	2154      	movs	r1, #84	@ 0x54
 8003588:	8812      	ldrh	r2, [r2, #0]
 800358a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1dba      	adds	r2, r7, #6
 8003590:	2156      	movs	r1, #86	@ 0x56
 8003592:	8812      	ldrh	r2, [r2, #0]
 8003594:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2290      	movs	r2, #144	@ 0x90
 80035a0:	2100      	movs	r1, #0
 80035a2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2288      	movs	r2, #136	@ 0x88
 80035a8:	2121      	movs	r1, #33	@ 0x21
 80035aa:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80035b0:	2380      	movs	r3, #128	@ 0x80
 80035b2:	059b      	lsls	r3, r3, #22
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d12a      	bne.n	800360e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	2380      	movs	r3, #128	@ 0x80
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d107      	bne.n	80035d4 <HAL_UART_Transmit_IT+0xa4>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d103      	bne.n	80035d4 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a28      	ldr	r2, [pc, #160]	@ (8003670 <HAL_UART_Transmit_IT+0x140>)
 80035d0:	679a      	str	r2, [r3, #120]	@ 0x78
 80035d2:	e002      	b.n	80035da <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a27      	ldr	r2, [pc, #156]	@ (8003674 <HAL_UART_Transmit_IT+0x144>)
 80035d8:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035da:	f3ef 8310 	mrs	r3, PRIMASK
 80035de:	61fb      	str	r3, [r7, #28]
  return(result);
 80035e0:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80035e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035e4:	2301      	movs	r3, #1
 80035e6:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f383 8810 	msr	PRIMASK, r3
}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2180      	movs	r1, #128	@ 0x80
 80035fc:	0409      	lsls	r1, r1, #16
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	f383 8810 	msr	PRIMASK, r3
}
 800360c:	e029      	b.n	8003662 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	015b      	lsls	r3, r3, #5
 8003616:	429a      	cmp	r2, r3
 8003618:	d107      	bne.n	800362a <HAL_UART_Transmit_IT+0xfa>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a14      	ldr	r2, [pc, #80]	@ (8003678 <HAL_UART_Transmit_IT+0x148>)
 8003626:	679a      	str	r2, [r3, #120]	@ 0x78
 8003628:	e002      	b.n	8003630 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a13      	ldr	r2, [pc, #76]	@ (800367c <HAL_UART_Transmit_IT+0x14c>)
 800362e:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003630:	f3ef 8310 	mrs	r3, PRIMASK
 8003634:	613b      	str	r3, [r7, #16]
  return(result);
 8003636:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800363a:	2301      	movs	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f383 8810 	msr	PRIMASK, r3
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	430a      	orrs	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003658:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f383 8810 	msr	PRIMASK, r3
}
 8003660:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e000      	b.n	8003668 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b00c      	add	sp, #48	@ 0x30
 800366e:	bd80      	pop	{r7, pc}
 8003670:	08004f45 	.word	0x08004f45
 8003674:	08004e59 	.word	0x08004e59
 8003678:	08004d9b 	.word	0x08004d9b
 800367c:	08004ce7 	.word	0x08004ce7

08003680 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	1dbb      	adds	r3, r7, #6
 800368c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	228c      	movs	r2, #140	@ 0x8c
 8003692:	589b      	ldr	r3, [r3, r2]
 8003694:	2b20      	cmp	r3, #32
 8003696:	d14f      	bne.n	8003738 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_UART_Receive_DMA+0x26>
 800369e:	1dbb      	adds	r3, r7, #6
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e047      	b.n	800373a <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	015b      	lsls	r3, r3, #5
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d109      	bne.n	80036ca <HAL_UART_Receive_DMA+0x4a>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2201      	movs	r2, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	d001      	beq.n	80036ca <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e037      	b.n	800373a <HAL_UART_Receive_DMA+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003744 <HAL_UART_Receive_DMA+0xc4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d025      	beq.n	8003726 <HAL_UART_Receive_DMA+0xa6>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1a      	ldr	r2, [pc, #104]	@ (8003748 <HAL_UART_Receive_DMA+0xc8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d020      	beq.n	8003726 <HAL_UART_Receive_DMA+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	2380      	movs	r3, #128	@ 0x80
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	4013      	ands	r3, r2
 80036f0:	d019      	beq.n	8003726 <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f2:	f3ef 8310 	mrs	r3, PRIMASK
 80036f6:	613b      	str	r3, [r7, #16]
  return(result);
 80036f8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	2301      	movs	r3, #1
 80036fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f383 8810 	msr	PRIMASK, r3
}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2180      	movs	r1, #128	@ 0x80
 8003714:	04c9      	lsls	r1, r1, #19
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f383 8810 	msr	PRIMASK, r3
}
 8003724:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003726:	1dbb      	adds	r3, r7, #6
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	0018      	movs	r0, r3
 8003730:	f001 f87a 	bl	8004828 <UART_Start_Receive_DMA>
 8003734:	0003      	movs	r3, r0
 8003736:	e000      	b.n	800373a <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b008      	add	sp, #32
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	40008000 	.word	0x40008000
 8003748:	40008400 	.word	0x40008400

0800374c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b0aa      	sub	sp, #168	@ 0xa8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	22a4      	movs	r2, #164	@ 0xa4
 800375c:	18b9      	adds	r1, r7, r2
 800375e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	20a0      	movs	r0, #160	@ 0xa0
 8003768:	1839      	adds	r1, r7, r0
 800376a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	249c      	movs	r4, #156	@ 0x9c
 8003774:	1939      	adds	r1, r7, r4
 8003776:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003778:	0011      	movs	r1, r2
 800377a:	18bb      	adds	r3, r7, r2
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4aa2      	ldr	r2, [pc, #648]	@ (8003a08 <HAL_UART_IRQHandler+0x2bc>)
 8003780:	4013      	ands	r3, r2
 8003782:	2298      	movs	r2, #152	@ 0x98
 8003784:	18bd      	adds	r5, r7, r2
 8003786:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003788:	18bb      	adds	r3, r7, r2
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11a      	bne.n	80037c6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003790:	187b      	adds	r3, r7, r1
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2220      	movs	r2, #32
 8003796:	4013      	ands	r3, r2
 8003798:	d015      	beq.n	80037c6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800379a:	183b      	adds	r3, r7, r0
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2220      	movs	r2, #32
 80037a0:	4013      	ands	r3, r2
 80037a2:	d105      	bne.n	80037b0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2380      	movs	r3, #128	@ 0x80
 80037aa:	055b      	lsls	r3, r3, #21
 80037ac:	4013      	ands	r3, r2
 80037ae:	d00a      	beq.n	80037c6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d100      	bne.n	80037ba <HAL_UART_IRQHandler+0x6e>
 80037b8:	e2dc      	b.n	8003d74 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	0010      	movs	r0, r2
 80037c2:	4798      	blx	r3
      }
      return;
 80037c4:	e2d6      	b.n	8003d74 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037c6:	2398      	movs	r3, #152	@ 0x98
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d100      	bne.n	80037d2 <HAL_UART_IRQHandler+0x86>
 80037d0:	e122      	b.n	8003a18 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037d2:	239c      	movs	r3, #156	@ 0x9c
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a8c      	ldr	r2, [pc, #560]	@ (8003a0c <HAL_UART_IRQHandler+0x2c0>)
 80037da:	4013      	ands	r3, r2
 80037dc:	d106      	bne.n	80037ec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037de:	23a0      	movs	r3, #160	@ 0xa0
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a8a      	ldr	r2, [pc, #552]	@ (8003a10 <HAL_UART_IRQHandler+0x2c4>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	d100      	bne.n	80037ec <HAL_UART_IRQHandler+0xa0>
 80037ea:	e115      	b.n	8003a18 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037ec:	23a4      	movs	r3, #164	@ 0xa4
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2201      	movs	r2, #1
 80037f4:	4013      	ands	r3, r2
 80037f6:	d012      	beq.n	800381e <HAL_UART_IRQHandler+0xd2>
 80037f8:	23a0      	movs	r3, #160	@ 0xa0
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	2380      	movs	r3, #128	@ 0x80
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4013      	ands	r3, r2
 8003804:	d00b      	beq.n	800381e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2290      	movs	r2, #144	@ 0x90
 8003812:	589b      	ldr	r3, [r3, r2]
 8003814:	2201      	movs	r2, #1
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2190      	movs	r1, #144	@ 0x90
 800381c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800381e:	23a4      	movs	r3, #164	@ 0xa4
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2202      	movs	r2, #2
 8003826:	4013      	ands	r3, r2
 8003828:	d011      	beq.n	800384e <HAL_UART_IRQHandler+0x102>
 800382a:	239c      	movs	r3, #156	@ 0x9c
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2201      	movs	r2, #1
 8003832:	4013      	ands	r3, r2
 8003834:	d00b      	beq.n	800384e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2202      	movs	r2, #2
 800383c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2290      	movs	r2, #144	@ 0x90
 8003842:	589b      	ldr	r3, [r3, r2]
 8003844:	2204      	movs	r2, #4
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2190      	movs	r1, #144	@ 0x90
 800384c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800384e:	23a4      	movs	r3, #164	@ 0xa4
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2204      	movs	r2, #4
 8003856:	4013      	ands	r3, r2
 8003858:	d011      	beq.n	800387e <HAL_UART_IRQHandler+0x132>
 800385a:	239c      	movs	r3, #156	@ 0x9c
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2201      	movs	r2, #1
 8003862:	4013      	ands	r3, r2
 8003864:	d00b      	beq.n	800387e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2204      	movs	r2, #4
 800386c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2290      	movs	r2, #144	@ 0x90
 8003872:	589b      	ldr	r3, [r3, r2]
 8003874:	2202      	movs	r2, #2
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2190      	movs	r1, #144	@ 0x90
 800387c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800387e:	23a4      	movs	r3, #164	@ 0xa4
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2208      	movs	r2, #8
 8003886:	4013      	ands	r3, r2
 8003888:	d017      	beq.n	80038ba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800388a:	23a0      	movs	r3, #160	@ 0xa0
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2220      	movs	r2, #32
 8003892:	4013      	ands	r3, r2
 8003894:	d105      	bne.n	80038a2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003896:	239c      	movs	r3, #156	@ 0x9c
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5b      	ldr	r2, [pc, #364]	@ (8003a0c <HAL_UART_IRQHandler+0x2c0>)
 800389e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038a0:	d00b      	beq.n	80038ba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2208      	movs	r2, #8
 80038a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2290      	movs	r2, #144	@ 0x90
 80038ae:	589b      	ldr	r3, [r3, r2]
 80038b0:	2208      	movs	r2, #8
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2190      	movs	r1, #144	@ 0x90
 80038b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038ba:	23a4      	movs	r3, #164	@ 0xa4
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	4013      	ands	r3, r2
 80038c6:	d013      	beq.n	80038f0 <HAL_UART_IRQHandler+0x1a4>
 80038c8:	23a0      	movs	r3, #160	@ 0xa0
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	2380      	movs	r3, #128	@ 0x80
 80038d0:	04db      	lsls	r3, r3, #19
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00c      	beq.n	80038f0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2280      	movs	r2, #128	@ 0x80
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2290      	movs	r2, #144	@ 0x90
 80038e4:	589b      	ldr	r3, [r3, r2]
 80038e6:	2220      	movs	r2, #32
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2190      	movs	r1, #144	@ 0x90
 80038ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2290      	movs	r2, #144	@ 0x90
 80038f4:	589b      	ldr	r3, [r3, r2]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d100      	bne.n	80038fc <HAL_UART_IRQHandler+0x1b0>
 80038fa:	e23d      	b.n	8003d78 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038fc:	23a4      	movs	r3, #164	@ 0xa4
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2220      	movs	r2, #32
 8003904:	4013      	ands	r3, r2
 8003906:	d015      	beq.n	8003934 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003908:	23a0      	movs	r3, #160	@ 0xa0
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2220      	movs	r2, #32
 8003910:	4013      	ands	r3, r2
 8003912:	d106      	bne.n	8003922 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003914:	239c      	movs	r3, #156	@ 0x9c
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	2380      	movs	r3, #128	@ 0x80
 800391c:	055b      	lsls	r3, r3, #21
 800391e:	4013      	ands	r3, r2
 8003920:	d008      	beq.n	8003934 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	0010      	movs	r0, r2
 8003932:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2290      	movs	r2, #144	@ 0x90
 8003938:	589b      	ldr	r3, [r3, r2]
 800393a:	2194      	movs	r1, #148	@ 0x94
 800393c:	187a      	adds	r2, r7, r1
 800393e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2240      	movs	r2, #64	@ 0x40
 8003948:	4013      	ands	r3, r2
 800394a:	2b40      	cmp	r3, #64	@ 0x40
 800394c:	d004      	beq.n	8003958 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800394e:	187b      	adds	r3, r7, r1
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2228      	movs	r2, #40	@ 0x28
 8003954:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003956:	d04c      	beq.n	80039f2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	0018      	movs	r0, r3
 800395c:	f001 f84a 	bl	80049f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2240      	movs	r2, #64	@ 0x40
 8003968:	4013      	ands	r3, r2
 800396a:	2b40      	cmp	r3, #64	@ 0x40
 800396c:	d13c      	bne.n	80039e8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396e:	f3ef 8310 	mrs	r3, PRIMASK
 8003972:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003976:	2090      	movs	r0, #144	@ 0x90
 8003978:	183a      	adds	r2, r7, r0
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	2301      	movs	r3, #1
 800397e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003982:	f383 8810 	msr	PRIMASK, r3
}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2140      	movs	r1, #64	@ 0x40
 8003994:	438a      	bics	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	183b      	adds	r3, r7, r0
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039a0:	f383 8810 	msr	PRIMASK, r3
}
 80039a4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2280      	movs	r2, #128	@ 0x80
 80039aa:	589b      	ldr	r3, [r3, r2]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d016      	beq.n	80039de <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2280      	movs	r2, #128	@ 0x80
 80039b4:	589b      	ldr	r3, [r3, r2]
 80039b6:	4a17      	ldr	r2, [pc, #92]	@ (8003a14 <HAL_UART_IRQHandler+0x2c8>)
 80039b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2280      	movs	r2, #128	@ 0x80
 80039be:	589b      	ldr	r3, [r3, r2]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7fd fdb5 	bl	8001530 <HAL_DMA_Abort_IT>
 80039c6:	1e03      	subs	r3, r0, #0
 80039c8:	d01c      	beq.n	8003a04 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2280      	movs	r2, #128	@ 0x80
 80039ce:	589b      	ldr	r3, [r3, r2]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	2180      	movs	r1, #128	@ 0x80
 80039d6:	5852      	ldr	r2, [r2, r1]
 80039d8:	0010      	movs	r0, r2
 80039da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	e012      	b.n	8003a04 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 f9e9 	bl	8003db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e6:	e00d      	b.n	8003a04 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 f9e4 	bl	8003db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	e008      	b.n	8003a04 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f000 f9df 	bl	8003db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2290      	movs	r2, #144	@ 0x90
 80039fe:	2100      	movs	r1, #0
 8003a00:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a02:	e1b9      	b.n	8003d78 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	46c0      	nop			@ (mov r8, r8)
    return;
 8003a06:	e1b7      	b.n	8003d78 <HAL_UART_IRQHandler+0x62c>
 8003a08:	0000080f 	.word	0x0000080f
 8003a0c:	10000001 	.word	0x10000001
 8003a10:	04000120 	.word	0x04000120
 8003a14:	08004cb9 	.word	0x08004cb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d000      	beq.n	8003a22 <HAL_UART_IRQHandler+0x2d6>
 8003a20:	e13e      	b.n	8003ca0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a22:	23a4      	movs	r3, #164	@ 0xa4
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d100      	bne.n	8003a30 <HAL_UART_IRQHandler+0x2e4>
 8003a2e:	e137      	b.n	8003ca0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a30:	23a0      	movs	r3, #160	@ 0xa0
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2210      	movs	r2, #16
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <HAL_UART_IRQHandler+0x2f2>
 8003a3c:	e130      	b.n	8003ca0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2210      	movs	r2, #16
 8003a44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2240      	movs	r2, #64	@ 0x40
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d000      	beq.n	8003a56 <HAL_UART_IRQHandler+0x30a>
 8003a54:	e0a4      	b.n	8003ba0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2280      	movs	r2, #128	@ 0x80
 8003a5a:	589b      	ldr	r3, [r3, r2]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	217e      	movs	r1, #126	@ 0x7e
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003a66:	187b      	adds	r3, r7, r1
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d100      	bne.n	8003a70 <HAL_UART_IRQHandler+0x324>
 8003a6e:	e185      	b.n	8003d7c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	225c      	movs	r2, #92	@ 0x5c
 8003a74:	5a9b      	ldrh	r3, [r3, r2]
 8003a76:	187a      	adds	r2, r7, r1
 8003a78:	8812      	ldrh	r2, [r2, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d300      	bcc.n	8003a80 <HAL_UART_IRQHandler+0x334>
 8003a7e:	e17d      	b.n	8003d7c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	187a      	adds	r2, r7, r1
 8003a84:	215e      	movs	r1, #94	@ 0x5e
 8003a86:	8812      	ldrh	r2, [r2, #0]
 8003a88:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2280      	movs	r2, #128	@ 0x80
 8003a8e:	589b      	ldr	r3, [r3, r2]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2220      	movs	r2, #32
 8003a96:	4013      	ands	r3, r2
 8003a98:	d170      	bne.n	8003b7c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	49b4      	ldr	r1, [pc, #720]	@ (8003d8c <HAL_UART_IRQHandler+0x640>)
 8003abc:	400a      	ands	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003acc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2101      	movs	r1, #1
 8003aee:	438a      	bics	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]
 8003af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003af4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003af8:	f383 8810 	msr	PRIMASK, r3
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afe:	f3ef 8310 	mrs	r3, PRIMASK
 8003b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b06:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b08:	2301      	movs	r3, #1
 8003b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b0e:	f383 8810 	msr	PRIMASK, r3
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2140      	movs	r1, #64	@ 0x40
 8003b20:	438a      	bics	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b26:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b2a:	f383 8810 	msr	PRIMASK, r3
}
 8003b2e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	228c      	movs	r2, #140	@ 0x8c
 8003b34:	2120      	movs	r1, #32
 8003b36:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b42:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b48:	2301      	movs	r3, #1
 8003b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b4e:	f383 8810 	msr	PRIMASK, r3
}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2110      	movs	r1, #16
 8003b60:	438a      	bics	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b6a:	f383 8810 	msr	PRIMASK, r3
}
 8003b6e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2280      	movs	r2, #128	@ 0x80
 8003b74:	589b      	ldr	r3, [r3, r2]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fd fc7a 	bl	8001470 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	225c      	movs	r2, #92	@ 0x5c
 8003b86:	5a9a      	ldrh	r2, [r3, r2]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	215e      	movs	r1, #94	@ 0x5e
 8003b8c:	5a5b      	ldrh	r3, [r3, r1]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0011      	movs	r1, r2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 f915 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b9e:	e0ed      	b.n	8003d7c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	225c      	movs	r2, #92	@ 0x5c
 8003ba4:	5a99      	ldrh	r1, [r3, r2]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	225e      	movs	r2, #94	@ 0x5e
 8003baa:	5a9b      	ldrh	r3, [r3, r2]
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	208e      	movs	r0, #142	@ 0x8e
 8003bb0:	183b      	adds	r3, r7, r0
 8003bb2:	1a8a      	subs	r2, r1, r2
 8003bb4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	225e      	movs	r2, #94	@ 0x5e
 8003bba:	5a9b      	ldrh	r3, [r3, r2]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d100      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x478>
 8003bc2:	e0dd      	b.n	8003d80 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003bc4:	183b      	adds	r3, r7, r0
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d100      	bne.n	8003bce <HAL_UART_IRQHandler+0x482>
 8003bcc:	e0d8      	b.n	8003d80 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bce:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bd6:	2488      	movs	r4, #136	@ 0x88
 8003bd8:	193a      	adds	r2, r7, r4
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	2301      	movs	r3, #1
 8003bde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4967      	ldr	r1, [pc, #412]	@ (8003d90 <HAL_UART_IRQHandler+0x644>)
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	193b      	adds	r3, r7, r4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f383 8810 	msr	PRIMASK, r3
}
 8003c04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c06:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c0c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c0e:	2484      	movs	r4, #132	@ 0x84
 8003c10:	193a      	adds	r2, r7, r4
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	2301      	movs	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f383 8810 	msr	PRIMASK, r3
}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	495a      	ldr	r1, [pc, #360]	@ (8003d94 <HAL_UART_IRQHandler+0x648>)
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	193b      	adds	r3, r7, r4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	228c      	movs	r2, #140	@ 0x8c
 8003c42:	2120      	movs	r1, #32
 8003c44:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c52:	f3ef 8310 	mrs	r3, PRIMASK
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5a:	2480      	movs	r4, #128	@ 0x80
 8003c5c:	193a      	adds	r2, r7, r4
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	2301      	movs	r3, #1
 8003c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2110      	movs	r1, #16
 8003c78:	438a      	bics	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	193b      	adds	r3, r7, r4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c90:	183b      	adds	r3, r7, r0
 8003c92:	881a      	ldrh	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0011      	movs	r1, r2
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 f895 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c9e:	e06f      	b.n	8003d80 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ca0:	23a4      	movs	r3, #164	@ 0xa4
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	2380      	movs	r3, #128	@ 0x80
 8003ca8:	035b      	lsls	r3, r3, #13
 8003caa:	4013      	ands	r3, r2
 8003cac:	d010      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x584>
 8003cae:	239c      	movs	r3, #156	@ 0x9c
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	@ 0x80
 8003cb6:	03db      	lsls	r3, r3, #15
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2280      	movs	r2, #128	@ 0x80
 8003cc2:	0352      	lsls	r2, r2, #13
 8003cc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f001 f9e1 	bl	8005090 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cce:	e05a      	b.n	8003d86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003cd0:	23a4      	movs	r3, #164	@ 0xa4
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2280      	movs	r2, #128	@ 0x80
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d016      	beq.n	8003d0a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003cdc:	23a0      	movs	r3, #160	@ 0xa0
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2280      	movs	r2, #128	@ 0x80
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d106      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003ce8:	239c      	movs	r3, #156	@ 0x9c
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	2380      	movs	r3, #128	@ 0x80
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d042      	beq.n	8003d84 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	0010      	movs	r0, r2
 8003d06:	4798      	blx	r3
    }
    return;
 8003d08:	e03c      	b.n	8003d84 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d0a:	23a4      	movs	r3, #164	@ 0xa4
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2240      	movs	r2, #64	@ 0x40
 8003d12:	4013      	ands	r3, r2
 8003d14:	d00a      	beq.n	8003d2c <HAL_UART_IRQHandler+0x5e0>
 8003d16:	23a0      	movs	r3, #160	@ 0xa0
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2240      	movs	r2, #64	@ 0x40
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d004      	beq.n	8003d2c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f001 f987 	bl	8005038 <UART_EndTransmit_IT>
    return;
 8003d2a:	e02c      	b.n	8003d86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d2c:	23a4      	movs	r3, #164	@ 0xa4
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	2380      	movs	r3, #128	@ 0x80
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	4013      	ands	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <HAL_UART_IRQHandler+0x606>
 8003d3a:	23a0      	movs	r3, #160	@ 0xa0
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2380      	movs	r3, #128	@ 0x80
 8003d42:	05db      	lsls	r3, r3, #23
 8003d44:	4013      	ands	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f001 f9b0 	bl	80050b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d50:	e019      	b.n	8003d86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d52:	23a4      	movs	r3, #164	@ 0xa4
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	045b      	lsls	r3, r3, #17
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d012      	beq.n	8003d86 <HAL_UART_IRQHandler+0x63a>
 8003d60:	23a0      	movs	r3, #160	@ 0xa0
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da0d      	bge.n	8003d86 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f001 f997 	bl	80050a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d72:	e008      	b.n	8003d86 <HAL_UART_IRQHandler+0x63a>
      return;
 8003d74:	46c0      	nop			@ (mov r8, r8)
 8003d76:	e006      	b.n	8003d86 <HAL_UART_IRQHandler+0x63a>
    return;
 8003d78:	46c0      	nop			@ (mov r8, r8)
 8003d7a:	e004      	b.n	8003d86 <HAL_UART_IRQHandler+0x63a>
      return;
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	e002      	b.n	8003d86 <HAL_UART_IRQHandler+0x63a>
      return;
 8003d80:	46c0      	nop			@ (mov r8, r8)
 8003d82:	e000      	b.n	8003d86 <HAL_UART_IRQHandler+0x63a>
    return;
 8003d84:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b02a      	add	sp, #168	@ 0xa8
 8003d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8c:	fffffeff 	.word	0xfffffeff
 8003d90:	fffffedf 	.word	0xfffffedf
 8003d94:	effffffe 	.word	0xeffffffe

08003d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003da0:	46c0      	nop			@ (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	000a      	movs	r2, r1
 8003dd2:	1cbb      	adds	r3, r7, #2
 8003dd4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de0:	b5b0      	push	{r4, r5, r7, lr}
 8003de2:	b090      	sub	sp, #64	@ 0x40
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de8:	231a      	movs	r3, #26
 8003dea:	2220      	movs	r2, #32
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	19db      	adds	r3, r3, r7
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4ac1      	ldr	r2, [pc, #772]	@ (8004118 <UART_SetConfig+0x338>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4abc      	ldr	r2, [pc, #752]	@ (800411c <UART_SetConfig+0x33c>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	68d9      	ldr	r1, [r3, #12]
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	0003      	movs	r3, r0
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4ab6      	ldr	r2, [pc, #728]	@ (8004120 <UART_SetConfig+0x340>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <UART_SetConfig+0x80>
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4ab4      	ldr	r2, [pc, #720]	@ (8004124 <UART_SetConfig+0x344>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	4ab0      	ldr	r2, [pc, #704]	@ (8004128 <UART_SetConfig+0x348>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e72:	430b      	orrs	r3, r1
 8003e74:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	220f      	movs	r2, #15
 8003e7e:	4393      	bics	r3, r2
 8003e80:	0018      	movs	r0, r3
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4aa5      	ldr	r2, [pc, #660]	@ (800412c <UART_SetConfig+0x34c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d131      	bne.n	8003efe <UART_SetConfig+0x11e>
 8003e9a:	4ba5      	ldr	r3, [pc, #660]	@ (8004130 <UART_SetConfig+0x350>)
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d01d      	beq.n	8003ee2 <UART_SetConfig+0x102>
 8003ea6:	d823      	bhi.n	8003ef0 <UART_SetConfig+0x110>
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d00c      	beq.n	8003ec6 <UART_SetConfig+0xe6>
 8003eac:	d820      	bhi.n	8003ef0 <UART_SetConfig+0x110>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <UART_SetConfig+0xd8>
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d00e      	beq.n	8003ed4 <UART_SetConfig+0xf4>
 8003eb6:	e01b      	b.n	8003ef0 <UART_SetConfig+0x110>
 8003eb8:	231b      	movs	r3, #27
 8003eba:	2220      	movs	r2, #32
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	19db      	adds	r3, r3, r7
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e154      	b.n	8004170 <UART_SetConfig+0x390>
 8003ec6:	231b      	movs	r3, #27
 8003ec8:	2220      	movs	r2, #32
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	19db      	adds	r3, r3, r7
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	e14d      	b.n	8004170 <UART_SetConfig+0x390>
 8003ed4:	231b      	movs	r3, #27
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	189b      	adds	r3, r3, r2
 8003eda:	19db      	adds	r3, r3, r7
 8003edc:	2204      	movs	r2, #4
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	e146      	b.n	8004170 <UART_SetConfig+0x390>
 8003ee2:	231b      	movs	r3, #27
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	189b      	adds	r3, r3, r2
 8003ee8:	19db      	adds	r3, r3, r7
 8003eea:	2208      	movs	r2, #8
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e13f      	b.n	8004170 <UART_SetConfig+0x390>
 8003ef0:	231b      	movs	r3, #27
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	189b      	adds	r3, r3, r2
 8003ef6:	19db      	adds	r3, r3, r7
 8003ef8:	2210      	movs	r2, #16
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e138      	b.n	8004170 <UART_SetConfig+0x390>
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a8c      	ldr	r2, [pc, #560]	@ (8004134 <UART_SetConfig+0x354>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d131      	bne.n	8003f6c <UART_SetConfig+0x18c>
 8003f08:	4b89      	ldr	r3, [pc, #548]	@ (8004130 <UART_SetConfig+0x350>)
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	220c      	movs	r2, #12
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b0c      	cmp	r3, #12
 8003f12:	d01d      	beq.n	8003f50 <UART_SetConfig+0x170>
 8003f14:	d823      	bhi.n	8003f5e <UART_SetConfig+0x17e>
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d00c      	beq.n	8003f34 <UART_SetConfig+0x154>
 8003f1a:	d820      	bhi.n	8003f5e <UART_SetConfig+0x17e>
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <UART_SetConfig+0x146>
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d00e      	beq.n	8003f42 <UART_SetConfig+0x162>
 8003f24:	e01b      	b.n	8003f5e <UART_SetConfig+0x17e>
 8003f26:	231b      	movs	r3, #27
 8003f28:	2220      	movs	r2, #32
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	19db      	adds	r3, r3, r7
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	e11d      	b.n	8004170 <UART_SetConfig+0x390>
 8003f34:	231b      	movs	r3, #27
 8003f36:	2220      	movs	r2, #32
 8003f38:	189b      	adds	r3, r3, r2
 8003f3a:	19db      	adds	r3, r3, r7
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e116      	b.n	8004170 <UART_SetConfig+0x390>
 8003f42:	231b      	movs	r3, #27
 8003f44:	2220      	movs	r2, #32
 8003f46:	189b      	adds	r3, r3, r2
 8003f48:	19db      	adds	r3, r3, r7
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e10f      	b.n	8004170 <UART_SetConfig+0x390>
 8003f50:	231b      	movs	r3, #27
 8003f52:	2220      	movs	r2, #32
 8003f54:	189b      	adds	r3, r3, r2
 8003f56:	19db      	adds	r3, r3, r7
 8003f58:	2208      	movs	r2, #8
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e108      	b.n	8004170 <UART_SetConfig+0x390>
 8003f5e:	231b      	movs	r3, #27
 8003f60:	2220      	movs	r2, #32
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	19db      	adds	r3, r3, r7
 8003f66:	2210      	movs	r2, #16
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e101      	b.n	8004170 <UART_SetConfig+0x390>
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a71      	ldr	r2, [pc, #452]	@ (8004138 <UART_SetConfig+0x358>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d131      	bne.n	8003fda <UART_SetConfig+0x1fa>
 8003f76:	4b6e      	ldr	r3, [pc, #440]	@ (8004130 <UART_SetConfig+0x350>)
 8003f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7a:	2230      	movs	r2, #48	@ 0x30
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b30      	cmp	r3, #48	@ 0x30
 8003f80:	d01d      	beq.n	8003fbe <UART_SetConfig+0x1de>
 8003f82:	d823      	bhi.n	8003fcc <UART_SetConfig+0x1ec>
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d00c      	beq.n	8003fa2 <UART_SetConfig+0x1c2>
 8003f88:	d820      	bhi.n	8003fcc <UART_SetConfig+0x1ec>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <UART_SetConfig+0x1b4>
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d00e      	beq.n	8003fb0 <UART_SetConfig+0x1d0>
 8003f92:	e01b      	b.n	8003fcc <UART_SetConfig+0x1ec>
 8003f94:	231b      	movs	r3, #27
 8003f96:	2220      	movs	r2, #32
 8003f98:	189b      	adds	r3, r3, r2
 8003f9a:	19db      	adds	r3, r3, r7
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e0e6      	b.n	8004170 <UART_SetConfig+0x390>
 8003fa2:	231b      	movs	r3, #27
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	19db      	adds	r3, r3, r7
 8003faa:	2202      	movs	r2, #2
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e0df      	b.n	8004170 <UART_SetConfig+0x390>
 8003fb0:	231b      	movs	r3, #27
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	189b      	adds	r3, r3, r2
 8003fb6:	19db      	adds	r3, r3, r7
 8003fb8:	2204      	movs	r2, #4
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e0d8      	b.n	8004170 <UART_SetConfig+0x390>
 8003fbe:	231b      	movs	r3, #27
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	19db      	adds	r3, r3, r7
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e0d1      	b.n	8004170 <UART_SetConfig+0x390>
 8003fcc:	231b      	movs	r3, #27
 8003fce:	2220      	movs	r2, #32
 8003fd0:	189b      	adds	r3, r3, r2
 8003fd2:	19db      	adds	r3, r3, r7
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e0ca      	b.n	8004170 <UART_SetConfig+0x390>
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a57      	ldr	r2, [pc, #348]	@ (800413c <UART_SetConfig+0x35c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d106      	bne.n	8003ff2 <UART_SetConfig+0x212>
 8003fe4:	231b      	movs	r3, #27
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	189b      	adds	r3, r3, r2
 8003fea:	19db      	adds	r3, r3, r7
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e0be      	b.n	8004170 <UART_SetConfig+0x390>
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a52      	ldr	r2, [pc, #328]	@ (8004140 <UART_SetConfig+0x360>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d106      	bne.n	800400a <UART_SetConfig+0x22a>
 8003ffc:	231b      	movs	r3, #27
 8003ffe:	2220      	movs	r2, #32
 8004000:	189b      	adds	r3, r3, r2
 8004002:	19db      	adds	r3, r3, r7
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	e0b2      	b.n	8004170 <UART_SetConfig+0x390>
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a4d      	ldr	r2, [pc, #308]	@ (8004144 <UART_SetConfig+0x364>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d106      	bne.n	8004022 <UART_SetConfig+0x242>
 8004014:	231b      	movs	r3, #27
 8004016:	2220      	movs	r2, #32
 8004018:	189b      	adds	r3, r3, r2
 800401a:	19db      	adds	r3, r3, r7
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	e0a6      	b.n	8004170 <UART_SetConfig+0x390>
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a3e      	ldr	r2, [pc, #248]	@ (8004120 <UART_SetConfig+0x340>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d13e      	bne.n	80040aa <UART_SetConfig+0x2ca>
 800402c:	4b40      	ldr	r3, [pc, #256]	@ (8004130 <UART_SetConfig+0x350>)
 800402e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004030:	23c0      	movs	r3, #192	@ 0xc0
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	4013      	ands	r3, r2
 8004036:	22c0      	movs	r2, #192	@ 0xc0
 8004038:	0112      	lsls	r2, r2, #4
 800403a:	4293      	cmp	r3, r2
 800403c:	d027      	beq.n	800408e <UART_SetConfig+0x2ae>
 800403e:	22c0      	movs	r2, #192	@ 0xc0
 8004040:	0112      	lsls	r2, r2, #4
 8004042:	4293      	cmp	r3, r2
 8004044:	d82a      	bhi.n	800409c <UART_SetConfig+0x2bc>
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	0112      	lsls	r2, r2, #4
 800404a:	4293      	cmp	r3, r2
 800404c:	d011      	beq.n	8004072 <UART_SetConfig+0x292>
 800404e:	2280      	movs	r2, #128	@ 0x80
 8004050:	0112      	lsls	r2, r2, #4
 8004052:	4293      	cmp	r3, r2
 8004054:	d822      	bhi.n	800409c <UART_SetConfig+0x2bc>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <UART_SetConfig+0x284>
 800405a:	2280      	movs	r2, #128	@ 0x80
 800405c:	00d2      	lsls	r2, r2, #3
 800405e:	4293      	cmp	r3, r2
 8004060:	d00e      	beq.n	8004080 <UART_SetConfig+0x2a0>
 8004062:	e01b      	b.n	800409c <UART_SetConfig+0x2bc>
 8004064:	231b      	movs	r3, #27
 8004066:	2220      	movs	r2, #32
 8004068:	189b      	adds	r3, r3, r2
 800406a:	19db      	adds	r3, r3, r7
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	e07e      	b.n	8004170 <UART_SetConfig+0x390>
 8004072:	231b      	movs	r3, #27
 8004074:	2220      	movs	r2, #32
 8004076:	189b      	adds	r3, r3, r2
 8004078:	19db      	adds	r3, r3, r7
 800407a:	2202      	movs	r2, #2
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	e077      	b.n	8004170 <UART_SetConfig+0x390>
 8004080:	231b      	movs	r3, #27
 8004082:	2220      	movs	r2, #32
 8004084:	189b      	adds	r3, r3, r2
 8004086:	19db      	adds	r3, r3, r7
 8004088:	2204      	movs	r2, #4
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e070      	b.n	8004170 <UART_SetConfig+0x390>
 800408e:	231b      	movs	r3, #27
 8004090:	2220      	movs	r2, #32
 8004092:	189b      	adds	r3, r3, r2
 8004094:	19db      	adds	r3, r3, r7
 8004096:	2208      	movs	r2, #8
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	e069      	b.n	8004170 <UART_SetConfig+0x390>
 800409c:	231b      	movs	r3, #27
 800409e:	2220      	movs	r2, #32
 80040a0:	189b      	adds	r3, r3, r2
 80040a2:	19db      	adds	r3, r3, r7
 80040a4:	2210      	movs	r2, #16
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e062      	b.n	8004170 <UART_SetConfig+0x390>
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <UART_SetConfig+0x344>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d157      	bne.n	8004164 <UART_SetConfig+0x384>
 80040b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004130 <UART_SetConfig+0x350>)
 80040b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040b8:	23c0      	movs	r3, #192	@ 0xc0
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4013      	ands	r3, r2
 80040be:	22c0      	movs	r2, #192	@ 0xc0
 80040c0:	0092      	lsls	r2, r2, #2
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d040      	beq.n	8004148 <UART_SetConfig+0x368>
 80040c6:	22c0      	movs	r2, #192	@ 0xc0
 80040c8:	0092      	lsls	r2, r2, #2
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d843      	bhi.n	8004156 <UART_SetConfig+0x376>
 80040ce:	2280      	movs	r2, #128	@ 0x80
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d011      	beq.n	80040fa <UART_SetConfig+0x31a>
 80040d6:	2280      	movs	r2, #128	@ 0x80
 80040d8:	0092      	lsls	r2, r2, #2
 80040da:	4293      	cmp	r3, r2
 80040dc:	d83b      	bhi.n	8004156 <UART_SetConfig+0x376>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <UART_SetConfig+0x30c>
 80040e2:	2280      	movs	r2, #128	@ 0x80
 80040e4:	0052      	lsls	r2, r2, #1
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00e      	beq.n	8004108 <UART_SetConfig+0x328>
 80040ea:	e034      	b.n	8004156 <UART_SetConfig+0x376>
 80040ec:	231b      	movs	r3, #27
 80040ee:	2220      	movs	r2, #32
 80040f0:	189b      	adds	r3, r3, r2
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e03a      	b.n	8004170 <UART_SetConfig+0x390>
 80040fa:	231b      	movs	r3, #27
 80040fc:	2220      	movs	r2, #32
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	19db      	adds	r3, r3, r7
 8004102:	2202      	movs	r2, #2
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e033      	b.n	8004170 <UART_SetConfig+0x390>
 8004108:	231b      	movs	r3, #27
 800410a:	2220      	movs	r2, #32
 800410c:	189b      	adds	r3, r3, r2
 800410e:	19db      	adds	r3, r3, r7
 8004110:	2204      	movs	r2, #4
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e02c      	b.n	8004170 <UART_SetConfig+0x390>
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	cfff69f3 	.word	0xcfff69f3
 800411c:	ffffcfff 	.word	0xffffcfff
 8004120:	40008000 	.word	0x40008000
 8004124:	40008400 	.word	0x40008400
 8004128:	11fff4ff 	.word	0x11fff4ff
 800412c:	40013800 	.word	0x40013800
 8004130:	40021000 	.word	0x40021000
 8004134:	40004400 	.word	0x40004400
 8004138:	40004800 	.word	0x40004800
 800413c:	40004c00 	.word	0x40004c00
 8004140:	40005000 	.word	0x40005000
 8004144:	40013c00 	.word	0x40013c00
 8004148:	231b      	movs	r3, #27
 800414a:	2220      	movs	r2, #32
 800414c:	189b      	adds	r3, r3, r2
 800414e:	19db      	adds	r3, r3, r7
 8004150:	2208      	movs	r2, #8
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e00c      	b.n	8004170 <UART_SetConfig+0x390>
 8004156:	231b      	movs	r3, #27
 8004158:	2220      	movs	r2, #32
 800415a:	189b      	adds	r3, r3, r2
 800415c:	19db      	adds	r3, r3, r7
 800415e:	2210      	movs	r2, #16
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e005      	b.n	8004170 <UART_SetConfig+0x390>
 8004164:	231b      	movs	r3, #27
 8004166:	2220      	movs	r2, #32
 8004168:	189b      	adds	r3, r3, r2
 800416a:	19db      	adds	r3, r3, r7
 800416c:	2210      	movs	r2, #16
 800416e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4ac1      	ldr	r2, [pc, #772]	@ (800447c <UART_SetConfig+0x69c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d005      	beq.n	8004186 <UART_SetConfig+0x3a6>
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4ac0      	ldr	r2, [pc, #768]	@ (8004480 <UART_SetConfig+0x6a0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d000      	beq.n	8004186 <UART_SetConfig+0x3a6>
 8004184:	e093      	b.n	80042ae <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004186:	231b      	movs	r3, #27
 8004188:	2220      	movs	r2, #32
 800418a:	189b      	adds	r3, r3, r2
 800418c:	19db      	adds	r3, r3, r7
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d015      	beq.n	80041c0 <UART_SetConfig+0x3e0>
 8004194:	dc18      	bgt.n	80041c8 <UART_SetConfig+0x3e8>
 8004196:	2b04      	cmp	r3, #4
 8004198:	d00d      	beq.n	80041b6 <UART_SetConfig+0x3d6>
 800419a:	dc15      	bgt.n	80041c8 <UART_SetConfig+0x3e8>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <UART_SetConfig+0x3c6>
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d005      	beq.n	80041b0 <UART_SetConfig+0x3d0>
 80041a4:	e010      	b.n	80041c8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a6:	f7fe ff1b 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80041aa:	0003      	movs	r3, r0
 80041ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041ae:	e014      	b.n	80041da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b0:	4bb4      	ldr	r3, [pc, #720]	@ (8004484 <UART_SetConfig+0x6a4>)
 80041b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041b4:	e011      	b.n	80041da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b6:	f7fe fe87 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 80041ba:	0003      	movs	r3, r0
 80041bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041be:	e00c      	b.n	80041da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c0:	2380      	movs	r3, #128	@ 0x80
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041c6:	e008      	b.n	80041da <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80041cc:	231a      	movs	r3, #26
 80041ce:	2220      	movs	r2, #32
 80041d0:	189b      	adds	r3, r3, r2
 80041d2:	19db      	adds	r3, r3, r7
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
        break;
 80041d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d100      	bne.n	80041e2 <UART_SetConfig+0x402>
 80041e0:	e135      	b.n	800444e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041e6:	4ba8      	ldr	r3, [pc, #672]	@ (8004488 <UART_SetConfig+0x6a8>)
 80041e8:	0052      	lsls	r2, r2, #1
 80041ea:	5ad3      	ldrh	r3, [r2, r3]
 80041ec:	0019      	movs	r1, r3
 80041ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041f0:	f7fb ff88 	bl	8000104 <__udivsi3>
 80041f4:	0003      	movs	r3, r0
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	0013      	movs	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	189b      	adds	r3, r3, r2
 8004202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004204:	429a      	cmp	r2, r3
 8004206:	d305      	bcc.n	8004214 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800420e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004210:	429a      	cmp	r2, r3
 8004212:	d906      	bls.n	8004222 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004214:	231a      	movs	r3, #26
 8004216:	2220      	movs	r2, #32
 8004218:	189b      	adds	r3, r3, r2
 800421a:	19db      	adds	r3, r3, r7
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	e044      	b.n	80042ac <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800422e:	4b96      	ldr	r3, [pc, #600]	@ (8004488 <UART_SetConfig+0x6a8>)
 8004230:	0052      	lsls	r2, r2, #1
 8004232:	5ad3      	ldrh	r3, [r2, r3]
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	69b8      	ldr	r0, [r7, #24]
 8004240:	69f9      	ldr	r1, [r7, #28]
 8004242:	f7fc f8d5 	bl	80003f0 <__aeabi_uldivmod>
 8004246:	0002      	movs	r2, r0
 8004248:	000b      	movs	r3, r1
 800424a:	0e11      	lsrs	r1, r2, #24
 800424c:	021d      	lsls	r5, r3, #8
 800424e:	430d      	orrs	r5, r1
 8004250:	0214      	lsls	r4, r2, #8
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68b8      	ldr	r0, [r7, #8]
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	1900      	adds	r0, r0, r4
 8004264:	4169      	adcs	r1, r5
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	2300      	movs	r3, #0
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f7fc f8bc 	bl	80003f0 <__aeabi_uldivmod>
 8004278:	0002      	movs	r2, r0
 800427a:	000b      	movs	r3, r1
 800427c:	0013      	movs	r3, r2
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004282:	23c0      	movs	r3, #192	@ 0xc0
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	429a      	cmp	r2, r3
 8004288:	d309      	bcc.n	800429e <UART_SetConfig+0x4be>
 800428a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800428c:	2380      	movs	r3, #128	@ 0x80
 800428e:	035b      	lsls	r3, r3, #13
 8004290:	429a      	cmp	r2, r3
 8004292:	d204      	bcs.n	800429e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	e006      	b.n	80042ac <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800429e:	231a      	movs	r3, #26
 80042a0:	2220      	movs	r2, #32
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	19db      	adds	r3, r3, r7
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80042aa:	e0d0      	b.n	800444e <UART_SetConfig+0x66e>
 80042ac:	e0cf      	b.n	800444e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	2380      	movs	r3, #128	@ 0x80
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d000      	beq.n	80042bc <UART_SetConfig+0x4dc>
 80042ba:	e070      	b.n	800439e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80042bc:	231b      	movs	r3, #27
 80042be:	2220      	movs	r2, #32
 80042c0:	189b      	adds	r3, r3, r2
 80042c2:	19db      	adds	r3, r3, r7
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d015      	beq.n	80042f6 <UART_SetConfig+0x516>
 80042ca:	dc18      	bgt.n	80042fe <UART_SetConfig+0x51e>
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d00d      	beq.n	80042ec <UART_SetConfig+0x50c>
 80042d0:	dc15      	bgt.n	80042fe <UART_SetConfig+0x51e>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <UART_SetConfig+0x4fc>
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d005      	beq.n	80042e6 <UART_SetConfig+0x506>
 80042da:	e010      	b.n	80042fe <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042dc:	f7fe fe80 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80042e0:	0003      	movs	r3, r0
 80042e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042e4:	e014      	b.n	8004310 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e6:	4b67      	ldr	r3, [pc, #412]	@ (8004484 <UART_SetConfig+0x6a4>)
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042ea:	e011      	b.n	8004310 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ec:	f7fe fdec 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 80042f0:	0003      	movs	r3, r0
 80042f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042f4:	e00c      	b.n	8004310 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	2380      	movs	r3, #128	@ 0x80
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042fc:	e008      	b.n	8004310 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004302:	231a      	movs	r3, #26
 8004304:	2220      	movs	r2, #32
 8004306:	189b      	adds	r3, r3, r2
 8004308:	19db      	adds	r3, r3, r7
 800430a:	2201      	movs	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
        break;
 800430e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d100      	bne.n	8004318 <UART_SetConfig+0x538>
 8004316:	e09a      	b.n	800444e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800431c:	4b5a      	ldr	r3, [pc, #360]	@ (8004488 <UART_SetConfig+0x6a8>)
 800431e:	0052      	lsls	r2, r2, #1
 8004320:	5ad3      	ldrh	r3, [r2, r3]
 8004322:	0019      	movs	r1, r3
 8004324:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004326:	f7fb feed 	bl	8000104 <__udivsi3>
 800432a:	0003      	movs	r3, r0
 800432c:	005a      	lsls	r2, r3, #1
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	18d2      	adds	r2, r2, r3
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	0019      	movs	r1, r3
 800433c:	0010      	movs	r0, r2
 800433e:	f7fb fee1 	bl	8000104 <__udivsi3>
 8004342:	0003      	movs	r3, r0
 8004344:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d921      	bls.n	8004390 <UART_SetConfig+0x5b0>
 800434c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800434e:	2380      	movs	r3, #128	@ 0x80
 8004350:	025b      	lsls	r3, r3, #9
 8004352:	429a      	cmp	r2, r3
 8004354:	d21c      	bcs.n	8004390 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	b29a      	uxth	r2, r3
 800435a:	200e      	movs	r0, #14
 800435c:	2420      	movs	r4, #32
 800435e:	1903      	adds	r3, r0, r4
 8004360:	19db      	adds	r3, r3, r7
 8004362:	210f      	movs	r1, #15
 8004364:	438a      	bics	r2, r1
 8004366:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	085b      	lsrs	r3, r3, #1
 800436c:	b29b      	uxth	r3, r3
 800436e:	2207      	movs	r2, #7
 8004370:	4013      	ands	r3, r2
 8004372:	b299      	uxth	r1, r3
 8004374:	1903      	adds	r3, r0, r4
 8004376:	19db      	adds	r3, r3, r7
 8004378:	1902      	adds	r2, r0, r4
 800437a:	19d2      	adds	r2, r2, r7
 800437c:	8812      	ldrh	r2, [r2, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1902      	adds	r2, r0, r4
 8004388:	19d2      	adds	r2, r2, r7
 800438a:	8812      	ldrh	r2, [r2, #0]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	e05e      	b.n	800444e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004390:	231a      	movs	r3, #26
 8004392:	2220      	movs	r2, #32
 8004394:	189b      	adds	r3, r3, r2
 8004396:	19db      	adds	r3, r3, r7
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e057      	b.n	800444e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800439e:	231b      	movs	r3, #27
 80043a0:	2220      	movs	r2, #32
 80043a2:	189b      	adds	r3, r3, r2
 80043a4:	19db      	adds	r3, r3, r7
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d015      	beq.n	80043d8 <UART_SetConfig+0x5f8>
 80043ac:	dc18      	bgt.n	80043e0 <UART_SetConfig+0x600>
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d00d      	beq.n	80043ce <UART_SetConfig+0x5ee>
 80043b2:	dc15      	bgt.n	80043e0 <UART_SetConfig+0x600>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <UART_SetConfig+0x5de>
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d005      	beq.n	80043c8 <UART_SetConfig+0x5e8>
 80043bc:	e010      	b.n	80043e0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043be:	f7fe fe0f 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80043c2:	0003      	movs	r3, r0
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043c6:	e014      	b.n	80043f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004484 <UART_SetConfig+0x6a4>)
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043cc:	e011      	b.n	80043f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ce:	f7fe fd7b 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 80043d2:	0003      	movs	r3, r0
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043d6:	e00c      	b.n	80043f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d8:	2380      	movs	r3, #128	@ 0x80
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043de:	e008      	b.n	80043f2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80043e4:	231a      	movs	r3, #26
 80043e6:	2220      	movs	r2, #32
 80043e8:	189b      	adds	r3, r3, r2
 80043ea:	19db      	adds	r3, r3, r7
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
        break;
 80043f0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80043f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d02a      	beq.n	800444e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043fc:	4b22      	ldr	r3, [pc, #136]	@ (8004488 <UART_SetConfig+0x6a8>)
 80043fe:	0052      	lsls	r2, r2, #1
 8004400:	5ad3      	ldrh	r3, [r2, r3]
 8004402:	0019      	movs	r1, r3
 8004404:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004406:	f7fb fe7d 	bl	8000104 <__udivsi3>
 800440a:	0003      	movs	r3, r0
 800440c:	001a      	movs	r2, r3
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	18d2      	adds	r2, r2, r3
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	0019      	movs	r1, r3
 800441c:	0010      	movs	r0, r2
 800441e:	f7fb fe71 	bl	8000104 <__udivsi3>
 8004422:	0003      	movs	r3, r0
 8004424:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	2b0f      	cmp	r3, #15
 800442a:	d90a      	bls.n	8004442 <UART_SetConfig+0x662>
 800442c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	025b      	lsls	r3, r3, #9
 8004432:	429a      	cmp	r2, r3
 8004434:	d205      	bcs.n	8004442 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	b29a      	uxth	r2, r3
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60da      	str	r2, [r3, #12]
 8004440:	e005      	b.n	800444e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004442:	231a      	movs	r3, #26
 8004444:	2220      	movs	r2, #32
 8004446:	189b      	adds	r3, r3, r2
 8004448:	19db      	adds	r3, r3, r7
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	226a      	movs	r2, #106	@ 0x6a
 8004452:	2101      	movs	r1, #1
 8004454:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	2268      	movs	r2, #104	@ 0x68
 800445a:	2101      	movs	r1, #1
 800445c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	2200      	movs	r2, #0
 8004462:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004466:	2200      	movs	r2, #0
 8004468:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800446a:	231a      	movs	r3, #26
 800446c:	2220      	movs	r2, #32
 800446e:	189b      	adds	r3, r3, r2
 8004470:	19db      	adds	r3, r3, r7
 8004472:	781b      	ldrb	r3, [r3, #0]
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	b010      	add	sp, #64	@ 0x40
 800447a:	bdb0      	pop	{r4, r5, r7, pc}
 800447c:	40008000 	.word	0x40008000
 8004480:	40008400 	.word	0x40008400
 8004484:	00f42400 	.word	0x00f42400
 8004488:	080053c4 	.word	0x080053c4

0800448c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	2208      	movs	r2, #8
 800449a:	4013      	ands	r3, r2
 800449c:	d00b      	beq.n	80044b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4a4a      	ldr	r2, [pc, #296]	@ (80045d0 <UART_AdvFeatureConfig+0x144>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	0019      	movs	r1, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	2201      	movs	r2, #1
 80044bc:	4013      	ands	r3, r2
 80044be:	d00b      	beq.n	80044d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4a43      	ldr	r2, [pc, #268]	@ (80045d4 <UART_AdvFeatureConfig+0x148>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	0019      	movs	r1, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	2202      	movs	r2, #2
 80044de:	4013      	ands	r3, r2
 80044e0:	d00b      	beq.n	80044fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4a3b      	ldr	r2, [pc, #236]	@ (80045d8 <UART_AdvFeatureConfig+0x14c>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	2204      	movs	r2, #4
 8004500:	4013      	ands	r3, r2
 8004502:	d00b      	beq.n	800451c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4a34      	ldr	r2, [pc, #208]	@ (80045dc <UART_AdvFeatureConfig+0x150>)
 800450c:	4013      	ands	r3, r2
 800450e:	0019      	movs	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	2210      	movs	r2, #16
 8004522:	4013      	ands	r3, r2
 8004524:	d00b      	beq.n	800453e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a2c      	ldr	r2, [pc, #176]	@ (80045e0 <UART_AdvFeatureConfig+0x154>)
 800452e:	4013      	ands	r3, r2
 8004530:	0019      	movs	r1, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	2220      	movs	r2, #32
 8004544:	4013      	ands	r3, r2
 8004546:	d00b      	beq.n	8004560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	4a25      	ldr	r2, [pc, #148]	@ (80045e4 <UART_AdvFeatureConfig+0x158>)
 8004550:	4013      	ands	r3, r2
 8004552:	0019      	movs	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	2240      	movs	r2, #64	@ 0x40
 8004566:	4013      	ands	r3, r2
 8004568:	d01d      	beq.n	80045a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a1d      	ldr	r2, [pc, #116]	@ (80045e8 <UART_AdvFeatureConfig+0x15c>)
 8004572:	4013      	ands	r3, r2
 8004574:	0019      	movs	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	035b      	lsls	r3, r3, #13
 800458a:	429a      	cmp	r2, r3
 800458c:	d10b      	bne.n	80045a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4a15      	ldr	r2, [pc, #84]	@ (80045ec <UART_AdvFeatureConfig+0x160>)
 8004596:	4013      	ands	r3, r2
 8004598:	0019      	movs	r1, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	2280      	movs	r2, #128	@ 0x80
 80045ac:	4013      	ands	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4a0e      	ldr	r2, [pc, #56]	@ (80045f0 <UART_AdvFeatureConfig+0x164>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	0019      	movs	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }
}
 80045c8:	46c0      	nop			@ (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	ffff7fff 	.word	0xffff7fff
 80045d4:	fffdffff 	.word	0xfffdffff
 80045d8:	fffeffff 	.word	0xfffeffff
 80045dc:	fffbffff 	.word	0xfffbffff
 80045e0:	ffffefff 	.word	0xffffefff
 80045e4:	ffffdfff 	.word	0xffffdfff
 80045e8:	ffefffff 	.word	0xffefffff
 80045ec:	ff9fffff 	.word	0xff9fffff
 80045f0:	fff7ffff 	.word	0xfff7ffff

080045f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b092      	sub	sp, #72	@ 0x48
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2290      	movs	r2, #144	@ 0x90
 8004600:	2100      	movs	r1, #0
 8004602:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004604:	f7fc fce0 	bl	8000fc8 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2208      	movs	r2, #8
 8004614:	4013      	ands	r3, r2
 8004616:	2b08      	cmp	r3, #8
 8004618:	d12d      	bne.n	8004676 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800461a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461c:	2280      	movs	r2, #128	@ 0x80
 800461e:	0391      	lsls	r1, r2, #14
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4a47      	ldr	r2, [pc, #284]	@ (8004740 <UART_CheckIdleState+0x14c>)
 8004624:	9200      	str	r2, [sp, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	f000 f88e 	bl	8004748 <UART_WaitOnFlagUntilTimeout>
 800462c:	1e03      	subs	r3, r0, #0
 800462e:	d022      	beq.n	8004676 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004630:	f3ef 8310 	mrs	r3, PRIMASK
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004638:	63bb      	str	r3, [r7, #56]	@ 0x38
 800463a:	2301      	movs	r3, #1
 800463c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			@ (mov r8, r8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2180      	movs	r1, #128	@ 0x80
 8004652:	438a      	bics	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465c:	f383 8810 	msr	PRIMASK, r3
}
 8004660:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2288      	movs	r2, #136	@ 0x88
 8004666:	2120      	movs	r1, #32
 8004668:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2284      	movs	r2, #132	@ 0x84
 800466e:	2100      	movs	r1, #0
 8004670:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e060      	b.n	8004738 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2204      	movs	r2, #4
 800467e:	4013      	ands	r3, r2
 8004680:	2b04      	cmp	r3, #4
 8004682:	d146      	bne.n	8004712 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004686:	2280      	movs	r2, #128	@ 0x80
 8004688:	03d1      	lsls	r1, r2, #15
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4a2c      	ldr	r2, [pc, #176]	@ (8004740 <UART_CheckIdleState+0x14c>)
 800468e:	9200      	str	r2, [sp, #0]
 8004690:	2200      	movs	r2, #0
 8004692:	f000 f859 	bl	8004748 <UART_WaitOnFlagUntilTimeout>
 8004696:	1e03      	subs	r3, r0, #0
 8004698:	d03b      	beq.n	8004712 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469a:	f3ef 8310 	mrs	r3, PRIMASK
 800469e:	60fb      	str	r3, [r7, #12]
  return(result);
 80046a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a4:	2301      	movs	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4922      	ldr	r1, [pc, #136]	@ (8004744 <UART_CheckIdleState+0x150>)
 80046bc:	400a      	ands	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f383 8810 	msr	PRIMASK, r3
}
 80046ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046cc:	f3ef 8310 	mrs	r3, PRIMASK
 80046d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80046d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d6:	2301      	movs	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f383 8810 	msr	PRIMASK, r3
}
 80046e0:	46c0      	nop			@ (mov r8, r8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2101      	movs	r1, #1
 80046ee:	438a      	bics	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f383 8810 	msr	PRIMASK, r3
}
 80046fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	228c      	movs	r2, #140	@ 0x8c
 8004702:	2120      	movs	r1, #32
 8004704:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2284      	movs	r2, #132	@ 0x84
 800470a:	2100      	movs	r1, #0
 800470c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e012      	b.n	8004738 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2288      	movs	r2, #136	@ 0x88
 8004716:	2120      	movs	r1, #32
 8004718:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	228c      	movs	r2, #140	@ 0x8c
 800471e:	2120      	movs	r1, #32
 8004720:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2284      	movs	r2, #132	@ 0x84
 8004732:	2100      	movs	r1, #0
 8004734:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	0018      	movs	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	b010      	add	sp, #64	@ 0x40
 800473e:	bd80      	pop	{r7, pc}
 8004740:	01ffffff 	.word	0x01ffffff
 8004744:	fffffedf 	.word	0xfffffedf

08004748 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	1dfb      	adds	r3, r7, #7
 8004756:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004758:	e051      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	3301      	adds	r3, #1
 800475e:	d04e      	beq.n	80047fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004760:	f7fc fc32 	bl	8000fc8 <HAL_GetTick>
 8004764:	0002      	movs	r2, r0
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	429a      	cmp	r2, r3
 800476e:	d302      	bcc.n	8004776 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e051      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2204      	movs	r2, #4
 8004782:	4013      	ands	r3, r2
 8004784:	d03b      	beq.n	80047fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b80      	cmp	r3, #128	@ 0x80
 800478a:	d038      	beq.n	80047fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b40      	cmp	r3, #64	@ 0x40
 8004790:	d035      	beq.n	80047fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	2208      	movs	r2, #8
 800479a:	4013      	ands	r3, r2
 800479c:	2b08      	cmp	r3, #8
 800479e:	d111      	bne.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2208      	movs	r2, #8
 80047a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 f922 	bl	80049f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2290      	movs	r2, #144	@ 0x90
 80047b4:	2108      	movs	r1, #8
 80047b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2284      	movs	r2, #132	@ 0x84
 80047bc:	2100      	movs	r1, #0
 80047be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e02c      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	2380      	movs	r3, #128	@ 0x80
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	401a      	ands	r2, r3
 80047d0:	2380      	movs	r3, #128	@ 0x80
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d112      	bne.n	80047fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2280      	movs	r2, #128	@ 0x80
 80047de:	0112      	lsls	r2, r2, #4
 80047e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 f905 	bl	80049f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2290      	movs	r2, #144	@ 0x90
 80047ee:	2120      	movs	r1, #32
 80047f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2284      	movs	r2, #132	@ 0x84
 80047f6:	2100      	movs	r1, #0
 80047f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e00f      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	425a      	negs	r2, r3
 800480e:	4153      	adcs	r3, r2
 8004810:	b2db      	uxtb	r3, r3
 8004812:	001a      	movs	r2, r3
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d09e      	beq.n	800475a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b004      	add	sp, #16
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b090      	sub	sp, #64	@ 0x40
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	1dbb      	adds	r3, r7, #6
 8004834:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1dba      	adds	r2, r7, #6
 8004840:	215c      	movs	r1, #92	@ 0x5c
 8004842:	8812      	ldrh	r2, [r2, #0]
 8004844:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2290      	movs	r2, #144	@ 0x90
 800484a:	2100      	movs	r1, #0
 800484c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	228c      	movs	r2, #140	@ 0x8c
 8004852:	2122      	movs	r1, #34	@ 0x22
 8004854:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2280      	movs	r2, #128	@ 0x80
 800485a:	589b      	ldr	r3, [r3, r2]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d02d      	beq.n	80048bc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2280      	movs	r2, #128	@ 0x80
 8004864:	589b      	ldr	r3, [r3, r2]
 8004866:	4a40      	ldr	r2, [pc, #256]	@ (8004968 <UART_Start_Receive_DMA+0x140>)
 8004868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2280      	movs	r2, #128	@ 0x80
 800486e:	589b      	ldr	r3, [r3, r2]
 8004870:	4a3e      	ldr	r2, [pc, #248]	@ (800496c <UART_Start_Receive_DMA+0x144>)
 8004872:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2280      	movs	r2, #128	@ 0x80
 8004878:	589b      	ldr	r3, [r3, r2]
 800487a:	4a3d      	ldr	r2, [pc, #244]	@ (8004970 <UART_Start_Receive_DMA+0x148>)
 800487c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2280      	movs	r2, #128	@ 0x80
 8004882:	589b      	ldr	r3, [r3, r2]
 8004884:	2200      	movs	r2, #0
 8004886:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2280      	movs	r2, #128	@ 0x80
 800488c:	5898      	ldr	r0, [r3, r2]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3324      	adds	r3, #36	@ 0x24
 8004894:	0019      	movs	r1, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489a:	001a      	movs	r2, r3
 800489c:	1dbb      	adds	r3, r7, #6
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	f7fc fd60 	bl	8001364 <HAL_DMA_Start_IT>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d009      	beq.n	80048bc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2290      	movs	r2, #144	@ 0x90
 80048ac:	2110      	movs	r1, #16
 80048ae:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	228c      	movs	r2, #140	@ 0x8c
 80048b4:	2120      	movs	r1, #32
 80048b6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e050      	b.n	800495e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d019      	beq.n	80048f8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c4:	f3ef 8310 	mrs	r3, PRIMASK
 80048c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048ce:	2301      	movs	r3, #1
 80048d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			@ (mov r8, r8)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2180      	movs	r1, #128	@ 0x80
 80048e6:	0049      	lsls	r1, r1, #1
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	f383 8810 	msr	PRIMASK, r3
}
 80048f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f8:	f3ef 8310 	mrs	r3, PRIMASK
 80048fc:	613b      	str	r3, [r7, #16]
  return(result);
 80048fe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004902:	2301      	movs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f383 8810 	msr	PRIMASK, r3
}
 800490c:	46c0      	nop			@ (mov r8, r8)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	430a      	orrs	r2, r1
 800491c:	609a      	str	r2, [r3, #8]
 800491e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004920:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f383 8810 	msr	PRIMASK, r3
}
 8004928:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492a:	f3ef 8310 	mrs	r3, PRIMASK
 800492e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004930:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004932:	637b      	str	r3, [r7, #52]	@ 0x34
 8004934:	2301      	movs	r3, #1
 8004936:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	f383 8810 	msr	PRIMASK, r3
}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2140      	movs	r1, #64	@ 0x40
 800494c:	430a      	orrs	r2, r1
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	f383 8810 	msr	PRIMASK, r3
}
 800495a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b010      	add	sp, #64	@ 0x40
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	08004ac1 	.word	0x08004ac1
 800496c:	08004bf1 	.word	0x08004bf1
 8004970:	08004c33 	.word	0x08004c33

08004974 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	@ 0x28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497c:	f3ef 8310 	mrs	r3, PRIMASK
 8004980:	60bb      	str	r3, [r7, #8]
  return(result);
 8004982:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
 8004986:	2301      	movs	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			@ (mov r8, r8)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	21c0      	movs	r1, #192	@ 0xc0
 800499e:	438a      	bics	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ae:	f3ef 8310 	mrs	r3, PRIMASK
 80049b2:	617b      	str	r3, [r7, #20]
  return(result);
 80049b4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	2301      	movs	r3, #1
 80049ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4908      	ldr	r1, [pc, #32]	@ (80049f0 <UART_EndTxTransfer+0x7c>)
 80049d0:	400a      	ands	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2288      	movs	r2, #136	@ 0x88
 80049e4:	2120      	movs	r1, #32
 80049e6:	5099      	str	r1, [r3, r2]
}
 80049e8:	46c0      	nop			@ (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b00a      	add	sp, #40	@ 0x28
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	ff7fffff 	.word	0xff7fffff

080049f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08e      	sub	sp, #56	@ 0x38
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004a00:	617b      	str	r3, [r7, #20]
  return(result);
 8004a02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a06:	2301      	movs	r3, #1
 8004a08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	f383 8810 	msr	PRIMASK, r3
}
 8004a10:	46c0      	nop			@ (mov r8, r8)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4926      	ldr	r1, [pc, #152]	@ (8004ab8 <UART_EndRxTransfer+0xc4>)
 8004a1e:	400a      	ands	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f383 8810 	msr	PRIMASK, r3
}
 8004a2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a32:	623b      	str	r3, [r7, #32]
  return(result);
 8004a34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a36:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a38:	2301      	movs	r3, #1
 8004a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	f383 8810 	msr	PRIMASK, r3
}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	491b      	ldr	r1, [pc, #108]	@ (8004abc <UART_EndRxTransfer+0xc8>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	f383 8810 	msr	PRIMASK, r3
}
 8004a5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d118      	bne.n	8004a9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a68:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a72:	2301      	movs	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f383 8810 	msr	PRIMASK, r3
}
 8004a7c:	46c0      	nop			@ (mov r8, r8)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2110      	movs	r1, #16
 8004a8a:	438a      	bics	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f383 8810 	msr	PRIMASK, r3
}
 8004a98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	228c      	movs	r2, #140	@ 0x8c
 8004a9e:	2120      	movs	r1, #32
 8004aa0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b00e      	add	sp, #56	@ 0x38
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	fffffedf 	.word	0xfffffedf
 8004abc:	effffffe 	.word	0xeffffffe

08004ac0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b094      	sub	sp, #80	@ 0x50
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d16f      	bne.n	8004bba <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004adc:	225e      	movs	r2, #94	@ 0x5e
 8004ade:	2100      	movs	r1, #0
 8004ae0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ae8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aec:	2301      	movs	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	493a      	ldr	r1, [pc, #232]	@ (8004bec <UART_DMAReceiveCplt+0x12c>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	f383 8810 	msr	PRIMASK, r3
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b14:	f3ef 8310 	mrs	r3, PRIMASK
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b1e:	2301      	movs	r3, #1
 8004b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b24:	f383 8810 	msr	PRIMASK, r3
}
 8004b28:	46c0      	nop			@ (mov r8, r8)
 8004b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2101      	movs	r1, #1
 8004b36:	438a      	bics	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
 8004b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b46:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b50:	2301      	movs	r3, #1
 8004b52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b56:	f383 8810 	msr	PRIMASK, r3
}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2140      	movs	r1, #64	@ 0x40
 8004b68:	438a      	bics	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b7a:	228c      	movs	r2, #140	@ 0x8c
 8004b7c:	2120      	movs	r1, #32
 8004b7e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d118      	bne.n	8004bba <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b88:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b92:	2301      	movs	r3, #1
 8004b94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f383 8810 	msr	PRIMASK, r3
}
 8004b9c:	46c0      	nop			@ (mov r8, r8)
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2110      	movs	r1, #16
 8004baa:	438a      	bics	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f383 8810 	msr	PRIMASK, r3
}
 8004bb8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d108      	bne.n	8004bda <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bca:	225c      	movs	r2, #92	@ 0x5c
 8004bcc:	5a9a      	ldrh	r2, [r3, r2]
 8004bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd0:	0011      	movs	r1, r2
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7ff f8f8 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bd8:	e003      	b.n	8004be2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fb fe55 	bl	800088c <HAL_UART_RxCpltCallback>
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b014      	add	sp, #80	@ 0x50
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	fffffeff 	.word	0xfffffeff

08004bf0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10a      	bne.n	8004c22 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	225c      	movs	r2, #92	@ 0x5c
 8004c10:	5a9b      	ldrh	r3, [r3, r2]
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	0011      	movs	r1, r2
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f7ff f8d4 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c20:	e003      	b.n	8004c2a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7ff f8bf 	bl	8003da8 <HAL_UART_RxHalfCpltCallback>
}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b004      	add	sp, #16
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2288      	movs	r2, #136	@ 0x88
 8004c44:	589b      	ldr	r3, [r3, r2]
 8004c46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	228c      	movs	r2, #140	@ 0x8c
 8004c4c:	589b      	ldr	r3, [r3, r2]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2280      	movs	r2, #128	@ 0x80
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b80      	cmp	r3, #128	@ 0x80
 8004c5c:	d10a      	bne.n	8004c74 <UART_DMAError+0x42>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b21      	cmp	r3, #33	@ 0x21
 8004c62:	d107      	bne.n	8004c74 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2256      	movs	r2, #86	@ 0x56
 8004c68:	2100      	movs	r1, #0
 8004c6a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f7ff fe80 	bl	8004974 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2240      	movs	r2, #64	@ 0x40
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b40      	cmp	r3, #64	@ 0x40
 8004c80:	d10a      	bne.n	8004c98 <UART_DMAError+0x66>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b22      	cmp	r3, #34	@ 0x22
 8004c86:	d107      	bne.n	8004c98 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	225e      	movs	r2, #94	@ 0x5e
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7ff feae 	bl	80049f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2290      	movs	r2, #144	@ 0x90
 8004c9c:	589b      	ldr	r3, [r3, r2]
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2190      	movs	r1, #144	@ 0x90
 8004ca6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f7ff f884 	bl	8003db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cb0:	46c0      	nop			@ (mov r8, r8)
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b006      	add	sp, #24
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	225e      	movs	r2, #94	@ 0x5e
 8004cca:	2100      	movs	r1, #0
 8004ccc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2256      	movs	r2, #86	@ 0x56
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7ff f86d 	bl	8003db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b004      	add	sp, #16
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b08a      	sub	sp, #40	@ 0x28
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2288      	movs	r2, #136	@ 0x88
 8004cf2:	589b      	ldr	r3, [r3, r2]
 8004cf4:	2b21      	cmp	r3, #33	@ 0x21
 8004cf6:	d14c      	bne.n	8004d92 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2256      	movs	r2, #86	@ 0x56
 8004cfc:	5a9b      	ldrh	r3, [r3, r2]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d132      	bne.n	8004d6a <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d04:	f3ef 8310 	mrs	r3, PRIMASK
 8004d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0e:	2301      	movs	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f383 8810 	msr	PRIMASK, r3
}
 8004d18:	46c0      	nop			@ (mov r8, r8)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2180      	movs	r1, #128	@ 0x80
 8004d26:	438a      	bics	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f383 8810 	msr	PRIMASK, r3
}
 8004d34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d36:	f3ef 8310 	mrs	r3, PRIMASK
 8004d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8004d3c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d3e:	623b      	str	r3, [r7, #32]
 8004d40:	2301      	movs	r3, #1
 8004d42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	f383 8810 	msr	PRIMASK, r3
}
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2140      	movs	r1, #64	@ 0x40
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f383 8810 	msr	PRIMASK, r3
}
 8004d66:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004d68:	e013      	b.n	8004d92 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6e:	781a      	ldrb	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2256      	movs	r2, #86	@ 0x56
 8004d84:	5a9b      	ldrh	r3, [r3, r2]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b299      	uxth	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2256      	movs	r2, #86	@ 0x56
 8004d90:	5299      	strh	r1, [r3, r2]
}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b00a      	add	sp, #40	@ 0x28
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b08c      	sub	sp, #48	@ 0x30
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2288      	movs	r2, #136	@ 0x88
 8004da6:	589b      	ldr	r3, [r3, r2]
 8004da8:	2b21      	cmp	r3, #33	@ 0x21
 8004daa:	d151      	bne.n	8004e50 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2256      	movs	r2, #86	@ 0x56
 8004db0:	5a9b      	ldrh	r3, [r3, r2]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d132      	bne.n	8004e1e <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f383 8810 	msr	PRIMASK, r3
}
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2180      	movs	r1, #128	@ 0x80
 8004dda:	438a      	bics	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f383 8810 	msr	PRIMASK, r3
}
 8004de8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dea:	f3ef 8310 	mrs	r3, PRIMASK
 8004dee:	61bb      	str	r3, [r7, #24]
  return(result);
 8004df0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df4:	2301      	movs	r3, #1
 8004df6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f383 8810 	msr	PRIMASK, r3
}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2140      	movs	r1, #64	@ 0x40
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f383 8810 	msr	PRIMASK, r3
}
 8004e1a:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004e1c:	e018      	b.n	8004e50 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	001a      	movs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	05d2      	lsls	r2, r2, #23
 8004e30:	0dd2      	lsrs	r2, r2, #23
 8004e32:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e38:	1c9a      	adds	r2, r3, #2
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2256      	movs	r2, #86	@ 0x56
 8004e42:	5a9b      	ldrh	r3, [r3, r2]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b299      	uxth	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2256      	movs	r2, #86	@ 0x56
 8004e4e:	5299      	strh	r1, [r3, r2]
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b00c      	add	sp, #48	@ 0x30
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	@ 0x30
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2288      	movs	r2, #136	@ 0x88
 8004e64:	589b      	ldr	r3, [r3, r2]
 8004e66:	2b21      	cmp	r3, #33	@ 0x21
 8004e68:	d165      	bne.n	8004f36 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e6a:	232e      	movs	r3, #46	@ 0x2e
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	216a      	movs	r1, #106	@ 0x6a
 8004e72:	5a52      	ldrh	r2, [r2, r1]
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	e059      	b.n	8004f2c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2256      	movs	r2, #86	@ 0x56
 8004e7c:	5a9b      	ldrh	r3, [r3, r2]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d133      	bne.n	8004eec <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e84:	f3ef 8310 	mrs	r3, PRIMASK
 8004e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e8e:	2301      	movs	r3, #1
 8004e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			@ (mov r8, r8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4926      	ldr	r1, [pc, #152]	@ (8004f40 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8004ea6:	400a      	ands	r2, r1
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f383 8810 	msr	PRIMASK, r3
}
 8004eb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eba:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ebc:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f383 8810 	msr	PRIMASK, r3
}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2140      	movs	r1, #64	@ 0x40
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ede:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	f383 8810 	msr	PRIMASK, r3
}
 8004ee6:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004ee8:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004eea:	e024      	b.n	8004f36 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	2280      	movs	r2, #128	@ 0x80
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2256      	movs	r2, #86	@ 0x56
 8004f12:	5a9b      	ldrh	r3, [r3, r2]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b299      	uxth	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2256      	movs	r2, #86	@ 0x56
 8004f1e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f20:	212e      	movs	r1, #46	@ 0x2e
 8004f22:	187b      	adds	r3, r7, r1
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	187b      	adds	r3, r7, r1
 8004f28:	3a01      	subs	r2, #1
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	232e      	movs	r3, #46	@ 0x2e
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1a0      	bne.n	8004e78 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b00c      	add	sp, #48	@ 0x30
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	ff7fffff 	.word	0xff7fffff

08004f44 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08c      	sub	sp, #48	@ 0x30
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2288      	movs	r2, #136	@ 0x88
 8004f50:	589b      	ldr	r3, [r3, r2]
 8004f52:	2b21      	cmp	r3, #33	@ 0x21
 8004f54:	d16a      	bne.n	800502c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f56:	232e      	movs	r3, #46	@ 0x2e
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	216a      	movs	r1, #106	@ 0x6a
 8004f5e:	5a52      	ldrh	r2, [r2, r1]
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e05e      	b.n	8005022 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2256      	movs	r2, #86	@ 0x56
 8004f68:	5a9b      	ldrh	r3, [r3, r2]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d133      	bne.n	8004fd8 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f70:	f3ef 8310 	mrs	r3, PRIMASK
 8004f74:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f76:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f383 8810 	msr	PRIMASK, r3
}
 8004f84:	46c0      	nop			@ (mov r8, r8)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4928      	ldr	r1, [pc, #160]	@ (8005034 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8004f92:	400a      	ands	r2, r1
 8004f94:	609a      	str	r2, [r3, #8]
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f383 8810 	msr	PRIMASK, r3
}
 8004fa0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa6:	617b      	str	r3, [r7, #20]
  return(result);
 8004fa8:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	2301      	movs	r3, #1
 8004fae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f383 8810 	msr	PRIMASK, r3
}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2140      	movs	r1, #64	@ 0x40
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f383 8810 	msr	PRIMASK, r3
}
 8004fd2:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004fd4:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004fd6:	e029      	b.n	800502c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	2280      	movs	r2, #128	@ 0x80
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d018      	beq.n	8005016 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	001a      	movs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	05d2      	lsls	r2, r2, #23
 8004ff6:	0dd2      	lsrs	r2, r2, #23
 8004ff8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffe:	1c9a      	adds	r2, r3, #2
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2256      	movs	r2, #86	@ 0x56
 8005008:	5a9b      	ldrh	r3, [r3, r2]
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b299      	uxth	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2256      	movs	r2, #86	@ 0x56
 8005014:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005016:	212e      	movs	r1, #46	@ 0x2e
 8005018:	187b      	adds	r3, r7, r1
 800501a:	881a      	ldrh	r2, [r3, #0]
 800501c:	187b      	adds	r3, r7, r1
 800501e:	3a01      	subs	r2, #1
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	232e      	movs	r3, #46	@ 0x2e
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d19b      	bne.n	8004f64 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800502c:	46c0      	nop			@ (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b00c      	add	sp, #48	@ 0x30
 8005032:	bd80      	pop	{r7, pc}
 8005034:	ff7fffff 	.word	0xff7fffff

08005038 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005040:	f3ef 8310 	mrs	r3, PRIMASK
 8005044:	60bb      	str	r3, [r7, #8]
  return(result);
 8005046:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	2301      	movs	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f383 8810 	msr	PRIMASK, r3
}
 8005054:	46c0      	nop			@ (mov r8, r8)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2140      	movs	r1, #64	@ 0x40
 8005062:	438a      	bics	r2, r1
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f383 8810 	msr	PRIMASK, r3
}
 8005070:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2288      	movs	r2, #136	@ 0x88
 8005076:	2120      	movs	r1, #32
 8005078:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	0018      	movs	r0, r3
 8005084:	f7fe fe88 	bl	8003d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005088:	46c0      	nop			@ (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	b006      	add	sp, #24
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005098:	46c0      	nop			@ (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	b002      	add	sp, #8
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80050a8:	46c0      	nop			@ (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80050b8:	46c0      	nop			@ (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b002      	add	sp, #8
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2284      	movs	r2, #132	@ 0x84
 80050cc:	5c9b      	ldrb	r3, [r3, r2]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e027      	b.n	8005126 <HAL_UARTEx_DisableFifoMode+0x66>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2284      	movs	r2, #132	@ 0x84
 80050da:	2101      	movs	r1, #1
 80050dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2288      	movs	r2, #136	@ 0x88
 80050e2:	2124      	movs	r1, #36	@ 0x24
 80050e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2101      	movs	r1, #1
 80050fa:	438a      	bics	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a0b      	ldr	r2, [pc, #44]	@ (8005130 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005102:	4013      	ands	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2288      	movs	r2, #136	@ 0x88
 8005118:	2120      	movs	r1, #32
 800511a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2284      	movs	r2, #132	@ 0x84
 8005120:	2100      	movs	r1, #0
 8005122:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b004      	add	sp, #16
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	dfffffff 	.word	0xdfffffff

08005134 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2284      	movs	r2, #132	@ 0x84
 8005142:	5c9b      	ldrb	r3, [r3, r2]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005148:	2302      	movs	r3, #2
 800514a:	e02e      	b.n	80051aa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2284      	movs	r2, #132	@ 0x84
 8005150:	2101      	movs	r1, #1
 8005152:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2288      	movs	r2, #136	@ 0x88
 8005158:	2124      	movs	r1, #36	@ 0x24
 800515a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2101      	movs	r1, #1
 8005170:	438a      	bics	r2, r1
 8005172:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	08d9      	lsrs	r1, r3, #3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	0018      	movs	r0, r3
 800518c:	f000 f854 	bl	8005238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2288      	movs	r2, #136	@ 0x88
 800519c:	2120      	movs	r1, #32
 800519e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2284      	movs	r2, #132	@ 0x84
 80051a4:	2100      	movs	r1, #0
 80051a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b004      	add	sp, #16
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2284      	movs	r2, #132	@ 0x84
 80051c2:	5c9b      	ldrb	r3, [r3, r2]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e02f      	b.n	800522c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2284      	movs	r2, #132	@ 0x84
 80051d0:	2101      	movs	r1, #1
 80051d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2288      	movs	r2, #136	@ 0x88
 80051d8:	2124      	movs	r1, #36	@ 0x24
 80051da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2101      	movs	r1, #1
 80051f0:	438a      	bics	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005234 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	0019      	movs	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0018      	movs	r0, r3
 800520e:	f000 f813 	bl	8005238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2288      	movs	r2, #136	@ 0x88
 800521e:	2120      	movs	r1, #32
 8005220:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2284      	movs	r2, #132	@ 0x84
 8005226:	2100      	movs	r1, #0
 8005228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	0018      	movs	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	b004      	add	sp, #16
 8005232:	bd80      	pop	{r7, pc}
 8005234:	f1ffffff 	.word	0xf1ffffff

08005238 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005244:	2b00      	cmp	r3, #0
 8005246:	d108      	bne.n	800525a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	226a      	movs	r2, #106	@ 0x6a
 800524c:	2101      	movs	r1, #1
 800524e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2268      	movs	r2, #104	@ 0x68
 8005254:	2101      	movs	r1, #1
 8005256:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005258:	e043      	b.n	80052e2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800525a:	260f      	movs	r6, #15
 800525c:	19bb      	adds	r3, r7, r6
 800525e:	2208      	movs	r2, #8
 8005260:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005262:	200e      	movs	r0, #14
 8005264:	183b      	adds	r3, r7, r0
 8005266:	2208      	movs	r2, #8
 8005268:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	0e5b      	lsrs	r3, r3, #25
 8005272:	b2da      	uxtb	r2, r3
 8005274:	240d      	movs	r4, #13
 8005276:	193b      	adds	r3, r7, r4
 8005278:	2107      	movs	r1, #7
 800527a:	400a      	ands	r2, r1
 800527c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	0f5b      	lsrs	r3, r3, #29
 8005286:	b2da      	uxtb	r2, r3
 8005288:	250c      	movs	r5, #12
 800528a:	197b      	adds	r3, r7, r5
 800528c:	2107      	movs	r1, #7
 800528e:	400a      	ands	r2, r1
 8005290:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005292:	183b      	adds	r3, r7, r0
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	197a      	adds	r2, r7, r5
 8005298:	7812      	ldrb	r2, [r2, #0]
 800529a:	4914      	ldr	r1, [pc, #80]	@ (80052ec <UARTEx_SetNbDataToProcess+0xb4>)
 800529c:	5c8a      	ldrb	r2, [r1, r2]
 800529e:	435a      	muls	r2, r3
 80052a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80052a2:	197b      	adds	r3, r7, r5
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	4a12      	ldr	r2, [pc, #72]	@ (80052f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80052a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052aa:	0019      	movs	r1, r3
 80052ac:	f7fa ffb4 	bl	8000218 <__divsi3>
 80052b0:	0003      	movs	r3, r0
 80052b2:	b299      	uxth	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	226a      	movs	r2, #106	@ 0x6a
 80052b8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ba:	19bb      	adds	r3, r7, r6
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	193a      	adds	r2, r7, r4
 80052c0:	7812      	ldrb	r2, [r2, #0]
 80052c2:	490a      	ldr	r1, [pc, #40]	@ (80052ec <UARTEx_SetNbDataToProcess+0xb4>)
 80052c4:	5c8a      	ldrb	r2, [r1, r2]
 80052c6:	435a      	muls	r2, r3
 80052c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	4a08      	ldr	r2, [pc, #32]	@ (80052f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80052d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052d2:	0019      	movs	r1, r3
 80052d4:	f7fa ffa0 	bl	8000218 <__divsi3>
 80052d8:	0003      	movs	r3, r0
 80052da:	b299      	uxth	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2268      	movs	r2, #104	@ 0x68
 80052e0:	5299      	strh	r1, [r3, r2]
}
 80052e2:	46c0      	nop			@ (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b005      	add	sp, #20
 80052e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	080053dc 	.word	0x080053dc
 80052f0:	080053e4 	.word	0x080053e4

080052f4 <memset>:
 80052f4:	0003      	movs	r3, r0
 80052f6:	1882      	adds	r2, r0, r2
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d100      	bne.n	80052fe <memset+0xa>
 80052fc:	4770      	bx	lr
 80052fe:	7019      	strb	r1, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	e7f9      	b.n	80052f8 <memset+0x4>

08005304 <__libc_init_array>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	2600      	movs	r6, #0
 8005308:	4c0c      	ldr	r4, [pc, #48]	@ (800533c <__libc_init_array+0x38>)
 800530a:	4d0d      	ldr	r5, [pc, #52]	@ (8005340 <__libc_init_array+0x3c>)
 800530c:	1b64      	subs	r4, r4, r5
 800530e:	10a4      	asrs	r4, r4, #2
 8005310:	42a6      	cmp	r6, r4
 8005312:	d109      	bne.n	8005328 <__libc_init_array+0x24>
 8005314:	2600      	movs	r6, #0
 8005316:	f000 f819 	bl	800534c <_init>
 800531a:	4c0a      	ldr	r4, [pc, #40]	@ (8005344 <__libc_init_array+0x40>)
 800531c:	4d0a      	ldr	r5, [pc, #40]	@ (8005348 <__libc_init_array+0x44>)
 800531e:	1b64      	subs	r4, r4, r5
 8005320:	10a4      	asrs	r4, r4, #2
 8005322:	42a6      	cmp	r6, r4
 8005324:	d105      	bne.n	8005332 <__libc_init_array+0x2e>
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	00b3      	lsls	r3, r6, #2
 800532a:	58eb      	ldr	r3, [r5, r3]
 800532c:	4798      	blx	r3
 800532e:	3601      	adds	r6, #1
 8005330:	e7ee      	b.n	8005310 <__libc_init_array+0xc>
 8005332:	00b3      	lsls	r3, r6, #2
 8005334:	58eb      	ldr	r3, [r5, r3]
 8005336:	4798      	blx	r3
 8005338:	3601      	adds	r6, #1
 800533a:	e7f2      	b.n	8005322 <__libc_init_array+0x1e>
 800533c:	080053f4 	.word	0x080053f4
 8005340:	080053f4 	.word	0x080053f4
 8005344:	080053f8 	.word	0x080053f8
 8005348:	080053f4 	.word	0x080053f4

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
