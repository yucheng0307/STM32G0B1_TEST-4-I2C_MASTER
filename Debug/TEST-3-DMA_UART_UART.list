
TEST-3-DMA_UART_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000480c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004950  08004950  0000602c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004950  08004950  00005950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004958  08004958  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004958  08004958  00005958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800495c  0800495c  0000595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08004960  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000002c  0800498c  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  0800498c  0000623c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9ac  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b9  00000000  00000000  00012a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00014ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000785  00000000  00000000  00015490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af5a  00000000  00000000  00015c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8e2  00000000  00000000  00030b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad54c  00000000  00000000  0003e451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb99d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000214c  00000000  00000000  000eb9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000edb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000002c 	.word	0x2000002c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080048b0 	.word	0x080048b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000030 	.word	0x20000030
 8000100:	080048b0 	.word	0x080048b0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_DMA_Init+0x58>)
 8000624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000626:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <MX_DMA_Init+0x58>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	639a      	str	r2, [r3, #56]	@ 0x38
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_DMA_Init+0x58>)
 8000630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2009      	movs	r0, #9
 8000640:	f000 fd02 	bl	8001048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000644:	2009      	movs	r0, #9
 8000646:	f000 fd14 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	200a      	movs	r0, #10
 8000650:	f000 fcfa 	bl	8001048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fd0c 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	200b      	movs	r0, #11
 8000660:	f000 fcf2 	bl	8001048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8000664:	200b      	movs	r0, #11
 8000666:	f000 fd04 	bl	8001072 <HAL_NVIC_EnableIRQ>

}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	40021000 	.word	0x40021000

08000678 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b089      	sub	sp, #36	@ 0x24
 800067c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	240c      	movs	r4, #12
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2314      	movs	r3, #20
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f004 f8e5 	bl	8004858 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <MX_GPIO_Init+0xc0>)
 8000690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <MX_GPIO_Init+0xc0>)
 8000694:	2104      	movs	r1, #4
 8000696:	430a      	orrs	r2, r1
 8000698:	635a      	str	r2, [r3, #52]	@ 0x34
 800069a:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <MX_GPIO_Init+0xc0>)
 800069c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800069e:	2204      	movs	r2, #4
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a6:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <MX_GPIO_Init+0xc0>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <MX_GPIO_Init+0xc0>)
 80006ac:	2120      	movs	r1, #32
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b2:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <MX_GPIO_Init+0xc0>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b6:	2220      	movs	r2, #32
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <MX_GPIO_Init+0xc0>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <MX_GPIO_Init+0xc0>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_GPIO_Init+0xc0>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006d6:	23a0      	movs	r3, #160	@ 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	2200      	movs	r2, #0
 80006dc:	2120      	movs	r1, #32
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f9b8 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2280      	movs	r2, #128	@ 0x80
 80006e8:	0192      	lsls	r2, r2, #6
 80006ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2288      	movs	r2, #136	@ 0x88
 80006f0:	0352      	lsls	r2, r2, #13
 80006f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	4a0f      	ldr	r2, [pc, #60]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006fe:	0019      	movs	r1, r3
 8000700:	0010      	movs	r0, r2
 8000702:	f001 f83b 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000706:	0021      	movs	r1, r4
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2220      	movs	r2, #32
 800070c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000720:	187a      	adds	r2, r7, r1
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f001 f827 	bl	800177c <HAL_GPIO_Init>

}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b009      	add	sp, #36	@ 0x24
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	40021000 	.word	0x40021000
 800073c:	50000800 	.word	0x50000800

08000740 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0b      	ldr	r2, [pc, #44]	@ (800077c <HAL_UART_RxCpltCallback+0x3c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d105      	bne.n	800075e <HAL_UART_RxCpltCallback+0x1e>
	{
		//answer to host
		HAL_UART_Transmit_IT(&huart1,tx1_buff,sizeof(tx1_buff));
 8000752:	490b      	ldr	r1, [pc, #44]	@ (8000780 <HAL_UART_RxCpltCallback+0x40>)
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <HAL_UART_RxCpltCallback+0x44>)
 8000756:	220d      	movs	r2, #13
 8000758:	0018      	movs	r0, r3
 800075a:	f002 f99b 	bl	8002a94 <HAL_UART_Transmit_IT>
	}

	if(huart->Instance==USART2)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <HAL_UART_RxCpltCallback+0x48>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d105      	bne.n	8000774 <HAL_UART_RxCpltCallback+0x34>
	{
		//answer to host
		HAL_UART_Transmit_IT(&huart2,tx2_buff,sizeof(tx2_buff));
 8000768:	4908      	ldr	r1, [pc, #32]	@ (800078c <HAL_UART_RxCpltCallback+0x4c>)
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_UART_RxCpltCallback+0x50>)
 800076c:	220d      	movs	r2, #13
 800076e:	0018      	movs	r0, r3
 8000770:	f002 f990 	bl	8002a94 <HAL_UART_Transmit_IT>
	}
}
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40013800 	.word	0x40013800
 8000780:	20000000 	.word	0x20000000
 8000784:	20000050 	.word	0x20000050
 8000788:	40004400 	.word	0x40004400
 800078c:	20000010 	.word	0x20000010
 8000790:	200000e4 	.word	0x200000e4

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 faea 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f82a 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff ff6a 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a4:	f7ff ff3a 	bl	800061c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007a8:	f000 f954 	bl	8000a54 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80007ac:	f000 f904 	bl	80009b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,rx1_buff,sizeof(rx1_buff));//receive int enable
 80007b0:	490c      	ldr	r1, [pc, #48]	@ (80007e4 <main+0x50>)
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <main+0x54>)
 80007b4:	2204      	movs	r2, #4
 80007b6:	0018      	movs	r0, r3
 80007b8:	f002 fa14 	bl	8002be4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,rx2_buff,sizeof(rx2_buff));//receive int enable
 80007bc:	490b      	ldr	r1, [pc, #44]	@ (80007ec <main+0x58>)
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <main+0x5c>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fa0e 	bl	8002be4 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);//LED-Green flash
 80007c8:	23a0      	movs	r3, #160	@ 0xa0
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	2120      	movs	r1, #32
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 f95d 	bl	8001a8e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);//delay 1000 ms
 80007d4:	23fa      	movs	r3, #250	@ 0xfa
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fb4f 	bl	8000e7c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);//LED-Green flash
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	e7f2      	b.n	80007c8 <main+0x34>
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	20000048 	.word	0x20000048
 80007e8:	20000050 	.word	0x20000050
 80007ec:	2000004c 	.word	0x2000004c
 80007f0:	200000e4 	.word	0x200000e4

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b095      	sub	sp, #84	@ 0x54
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	2414      	movs	r4, #20
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	0018      	movs	r0, r3
 8000800:	233c      	movs	r3, #60	@ 0x3c
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f004 f827 	bl	8004858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	0018      	movs	r0, r3
 800080e:	2310      	movs	r3, #16
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f004 f820 	bl	8004858 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	0018      	movs	r0, r3
 800081e:	f001 f951 	bl	8001ac4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2202      	movs	r2, #2
 8000826:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2280      	movs	r2, #128	@ 0x80
 800082c:	0052      	lsls	r2, r2, #1
 800082e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000830:	0021      	movs	r1, r4
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2240      	movs	r2, #64	@ 0x40
 800083c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2202      	movs	r2, #2
 8000842:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2202      	movs	r2, #2
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2208      	movs	r2, #8
 8000854:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2280      	movs	r2, #128	@ 0x80
 800085a:	0292      	lsls	r2, r2, #10
 800085c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	0492      	lsls	r2, r2, #18
 8000864:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2280      	movs	r2, #128	@ 0x80
 800086a:	0592      	lsls	r2, r2, #22
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	187b      	adds	r3, r7, r1
 8000870:	0018      	movs	r0, r3
 8000872:	f001 f973 	bl	8001b5c <HAL_RCC_OscConfig>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800087a:	f000 f819 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2202      	movs	r2, #2
 8000888:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2102      	movs	r1, #2
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fcbe 	bl	800221c <HAL_RCC_ClockConfig>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008a4:	f000 f804 	bl	80008b0 <Error_Handler>
  }
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b015      	add	sp, #84	@ 0x54
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_MspInit+0x4c>)
 80008c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <HAL_MspInit+0x4c>)
 80008c8:	2101      	movs	r1, #1
 80008ca:	430a      	orrs	r2, r1
 80008cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	2201      	movs	r2, #1
 80008d4:	4013      	ands	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <HAL_MspInit+0x4c>)
 80008dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <HAL_MspInit+0x4c>)
 80008e0:	2180      	movs	r1, #128	@ 0x80
 80008e2:	0549      	lsls	r1, r1, #21
 80008e4:	430a      	orrs	r2, r1
 80008e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <HAL_MspInit+0x4c>)
 80008ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	055b      	lsls	r3, r3, #21
 80008f0:	4013      	ands	r3, r2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008f6:	23c0      	movs	r3, #192	@ 0xc0
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fae2 	bl	8000ec4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	e7fd      	b.n	8000910 <NMI_Handler+0x4>

08000914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	e7fd      	b.n	8000918 <HardFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 fa86 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <DMA1_Channel1_IRQHandler+0x14>)
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fdaa 	bl	80014a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	20000178 	.word	0x20000178

08000958 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <DMA1_Channel2_3_IRQHandler+0x14>)
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fd9e 	bl	80014a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	200001d8 	.word	0x200001d8

08000970 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <USART1_IRQHandler+0x14>)
 8000982:	0018      	movs	r0, r3
 8000984:	f002 f994 	bl	8002cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	20000050 	.word	0x20000050

08000994 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <USART2_LPUART2_IRQHandler+0x14>)
 800099a:	0018      	movs	r0, r3
 800099c:	f002 f988 	bl	8002cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	200000e4 	.word	0x200000e4

080009ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009bc:	4b23      	ldr	r3, [pc, #140]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009be:	4a24      	ldr	r2, [pc, #144]	@ (8000a50 <MX_USART1_UART_Init+0x98>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c2:	4b22      	ldr	r3, [pc, #136]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009c4:	22e1      	movs	r2, #225	@ 0xe1
 80009c6:	0252      	lsls	r2, r2, #9
 80009c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fff0 	bl	80029e8 <HAL_UART_Init>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f7ff ff50 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	0018      	movs	r0, r3
 8000a16:	f003 fe3f 	bl	8004698 <HAL_UARTEx_SetTxFifoThreshold>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f7ff ff47 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f003 fe76 	bl	8004718 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f7ff ff3e 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <MX_USART1_UART_Init+0x94>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f003 fdf4 	bl	8004624 <HAL_UARTEx_DisableFifoMode>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f7ff ff36 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	20000050 	.word	0x20000050
 8000a50:	40013800 	.word	0x40013800

08000a54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a58:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a5a:	4a24      	ldr	r2, [pc, #144]	@ (8000aec <MX_USART2_UART_Init+0x98>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a60:	22e1      	movs	r2, #225	@ 0xe1
 8000a62:	0252      	lsls	r2, r2, #9
 8000a64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 ffa2 	bl	80029e8 <HAL_UART_Init>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f7ff ff02 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f003 fdf1 	bl	8004698 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f7ff fef9 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f003 fe28 	bl	8004718 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f7ff fef0 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <MX_USART2_UART_Init+0x94>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f003 fda6 	bl	8004624 <HAL_UARTEx_DisableFifoMode>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f7ff fee8 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	200000e4 	.word	0x200000e4
 8000aec:	40004400 	.word	0x40004400

08000af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b09f      	sub	sp, #124	@ 0x7c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	2364      	movs	r3, #100	@ 0x64
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	0018      	movs	r0, r3
 8000afe:	2314      	movs	r3, #20
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f003 fea8 	bl	8004858 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	2418      	movs	r4, #24
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	234c      	movs	r3, #76	@ 0x4c
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f003 fea0 	bl	8004858 <memset>
  if(uartHandle->Instance==USART1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a77      	ldr	r2, [pc, #476]	@ (8000cfc <HAL_UART_MspInit+0x20c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d170      	bne.n	8000c04 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2201      	movs	r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 fd1d 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b3a:	f7ff feb9 	bl	80008b0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b3e:	4b70      	ldr	r3, [pc, #448]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000b40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b42:	4b6f      	ldr	r3, [pc, #444]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000b44:	2180      	movs	r1, #128	@ 0x80
 8000b46:	01c9      	lsls	r1, r1, #7
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b50:	2380      	movs	r3, #128	@ 0x80
 8000b52:	01db      	lsls	r3, r3, #7
 8000b54:	4013      	ands	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4b69      	ldr	r3, [pc, #420]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b5e:	4b68      	ldr	r3, [pc, #416]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000b60:	2104      	movs	r1, #4
 8000b62:	430a      	orrs	r2, r1
 8000b64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b66:	4b66      	ldr	r3, [pc, #408]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b72:	2164      	movs	r1, #100	@ 0x64
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2230      	movs	r2, #48	@ 0x30
 8000b78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2201      	movs	r2, #1
 8000b90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	4a5b      	ldr	r2, [pc, #364]	@ (8000d04 <HAL_UART_MspInit+0x214>)
 8000b96:	0019      	movs	r1, r3
 8000b98:	0010      	movs	r0, r2
 8000b9a:	f000 fdef 	bl	800177c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000ba0:	4a5a      	ldr	r2, [pc, #360]	@ (8000d0c <HAL_UART_MspInit+0x21c>)
 8000ba2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ba4:	4b58      	ldr	r3, [pc, #352]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000ba6:	2232      	movs	r2, #50	@ 0x32
 8000ba8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000baa:	4b57      	ldr	r3, [pc, #348]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb0:	4b55      	ldr	r3, [pc, #340]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb6:	4b54      	ldr	r3, [pc, #336]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bbc:	4b52      	ldr	r3, [pc, #328]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc2:	4b51      	ldr	r3, [pc, #324]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bca:	2220      	movs	r2, #32
 8000bcc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bce:	4b4e      	ldr	r3, [pc, #312]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fa68 	bl	80010ac <HAL_DMA_Init>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000be0:	f7ff fe66 	bl	80008b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2180      	movs	r1, #128	@ 0x80
 8000be8:	4a47      	ldr	r2, [pc, #284]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bea:	505a      	str	r2, [r3, r1]
 8000bec:	4b46      	ldr	r3, [pc, #280]	@ (8000d08 <HAL_UART_MspInit+0x218>)
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	201b      	movs	r0, #27
 8000bf8:	f000 fa26 	bl	8001048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bfc:	201b      	movs	r0, #27
 8000bfe:	f000 fa38 	bl	8001072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c02:	e076      	b.n	8000cf2 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a41      	ldr	r2, [pc, #260]	@ (8000d10 <HAL_UART_MspInit+0x220>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d171      	bne.n	8000cf2 <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c0e:	2118      	movs	r1, #24
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2202      	movs	r2, #2
 8000c14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f001 fca6 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8000c28:	f7ff fe42 	bl	80008b0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2c:	4b34      	ldr	r3, [pc, #208]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c30:	4b33      	ldr	r3, [pc, #204]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000c32:	2180      	movs	r1, #128	@ 0x80
 8000c34:	0289      	lsls	r1, r1, #10
 8000c36:	430a      	orrs	r2, r1
 8000c38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c3a:	4b31      	ldr	r3, [pc, #196]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000c3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	029b      	lsls	r3, r3, #10
 8000c42:	4013      	ands	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b2d      	ldr	r3, [pc, #180]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000c4e:	2101      	movs	r1, #1
 8000c50:	430a      	orrs	r2, r1
 8000c52:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c54:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <HAL_UART_MspInit+0x210>)
 8000c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c60:	2164      	movs	r1, #100	@ 0x64
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	220c      	movs	r2, #12
 8000c66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	187a      	adds	r2, r7, r1
 8000c82:	23a0      	movs	r3, #160	@ 0xa0
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fd77 	bl	800177c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000c90:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <HAL_UART_MspInit+0x228>)
 8000c92:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000c96:	2234      	movs	r2, #52	@ 0x34
 8000c98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000ca8:	2280      	movs	r2, #128	@ 0x80
 8000caa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000cba:	2220      	movs	r2, #32
 8000cbc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 f9f0 	bl	80010ac <HAL_DMA_Init>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8000cd0:	f7ff fdee 	bl	80008b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2180      	movs	r1, #128	@ 0x80
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000cda:	505a      	str	r2, [r3, r1]
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <HAL_UART_MspInit+0x224>)
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	201c      	movs	r0, #28
 8000ce8:	f000 f9ae 	bl	8001048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000cec:	201c      	movs	r0, #28
 8000cee:	f000 f9c0 	bl	8001072 <HAL_NVIC_EnableIRQ>
}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b01f      	add	sp, #124	@ 0x7c
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	40013800 	.word	0x40013800
 8000d00:	40021000 	.word	0x40021000
 8000d04:	50000800 	.word	0x50000800
 8000d08:	20000178 	.word	0x20000178
 8000d0c:	40020008 	.word	0x40020008
 8000d10:	40004400 	.word	0x40004400
 8000d14:	200001d8 	.word	0x200001d8
 8000d18:	4002001c 	.word	0x4002001c

08000d1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d20:	f7ff fe44 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	@ (8000d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <LoopForever+0xe>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d68 <LoopForever+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d4a:	f003 fd8d 	bl	8004868 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d4e:	f7ff fd21 	bl	8000794 <main>

08000d52 <LoopForever>:

LoopForever:
  b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   r0, =_estack
 8000d54:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000d60:	08004960 	.word	0x08004960
  ldr r2, =_sbss
 8000d64:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000d68:	2000023c 	.word	0x2000023c

08000d6c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_COMP_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <HAL_Init+0x3c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_Init+0x3c>)
 8000d82:	2180      	movs	r1, #128	@ 0x80
 8000d84:	0049      	lsls	r1, r1, #1
 8000d86:	430a      	orrs	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f810 	bl	8000db0 <HAL_InitTick>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e001      	b.n	8000da0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fd8e 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	781b      	ldrb	r3, [r3, #0]
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <HAL_InitTick+0x88>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d02b      	beq.n	8000e20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <HAL_InitTick+0x8c>)
 8000dca:	681c      	ldr	r4, [r3, #0]
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <HAL_InitTick+0x88>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	23fa      	movs	r3, #250	@ 0xfa
 8000dd4:	0098      	lsls	r0, r3, #2
 8000dd6:	f7ff f995 	bl	8000104 <__udivsi3>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	0019      	movs	r1, r3
 8000dde:	0020      	movs	r0, r4
 8000de0:	f7ff f990 	bl	8000104 <__udivsi3>
 8000de4:	0003      	movs	r3, r0
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 f953 	bl	8001092 <HAL_SYSTICK_Config>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d112      	bne.n	8000e16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d80a      	bhi.n	8000e0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	425b      	negs	r3, r3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 f922 	bl	8001048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_InitTick+0x90>)
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e00d      	b.n	8000e28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e16:	230f      	movs	r3, #15
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e20:	230f      	movs	r3, #15
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e28:	230f      	movs	r3, #15
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	781b      	ldrb	r3, [r3, #0]
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b005      	add	sp, #20
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	20000028 	.word	0x20000028
 8000e3c:	20000020 	.word	0x20000020
 8000e40:	20000024 	.word	0x20000024

08000e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_IncTick+0x1c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_IncTick+0x20>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	18d2      	adds	r2, r2, r3
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <HAL_IncTick+0x20>)
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	20000028 	.word	0x20000028
 8000e64:	20000238 	.word	0x20000238

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b02      	ldr	r3, [pc, #8]	@ (8000e78 <HAL_GetTick+0x10>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	20000238 	.word	0x20000238

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff fff0 	bl	8000e68 <HAL_GetTick>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3301      	adds	r3, #1
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	189b      	adds	r3, r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	f7ff ffe0 	bl	8000e68 <HAL_GetTick>
 8000ea8:	0002      	movs	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b004      	add	sp, #16
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	20000028 	.word	0x20000028

08000ec4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	@ (8000eec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	fffff9ff 	.word	0xfffff9ff

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f02:	d809      	bhi.n	8000f18 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	001a      	movs	r2, r3
 8000f0a:	231f      	movs	r3, #31
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <__NVIC_EnableIRQ+0x30>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	4091      	lsls	r1, r2
 8000f14:	000a      	movs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f38:	d828      	bhi.n	8000f8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	33c0      	adds	r3, #192	@ 0xc0
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	589b      	ldr	r3, [r3, r2]
 8000f4a:	1dfa      	adds	r2, r7, #7
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	0011      	movs	r1, r2
 8000f50:	2203      	movs	r2, #3
 8000f52:	400a      	ands	r2, r1
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	21ff      	movs	r1, #255	@ 0xff
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	401a      	ands	r2, r3
 8000f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	22ff      	movs	r2, #255	@ 0xff
 8000f68:	401a      	ands	r2, r3
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0018      	movs	r0, r3
 8000f70:	2303      	movs	r3, #3
 8000f72:	4003      	ands	r3, r0
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f78:	481f      	ldr	r0, [pc, #124]	@ (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	33c0      	adds	r3, #192	@ 0xc0
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f8a:	e031      	b.n	8000ff0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0019      	movs	r1, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	400b      	ands	r3, r1
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	18d3      	adds	r3, r2, r3
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1dfa      	adds	r2, r7, #7
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	0011      	movs	r1, r2
 8000fac:	2203      	movs	r2, #3
 8000fae:	400a      	ands	r2, r1
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	21ff      	movs	r1, #255	@ 0xff
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	22ff      	movs	r2, #255	@ 0xff
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4003      	ands	r3, r0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <__NVIC_SetPriority+0xd8>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	001c      	movs	r4, r3
 8000fdc:	230f      	movs	r3, #15
 8000fde:	4023      	ands	r3, r4
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	3306      	adds	r3, #6
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	18c3      	adds	r3, r0, r3
 8000fec:	3304      	adds	r3, #4
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b003      	add	sp, #12
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	045b      	lsls	r3, r3, #17
 8001010:	429a      	cmp	r2, r3
 8001012:	d301      	bcc.n	8001018 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001014:	2301      	movs	r3, #1
 8001016:	e010      	b.n	800103a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <SysTick_Config+0x44>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	3a01      	subs	r2, #1
 800101e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001020:	2301      	movs	r3, #1
 8001022:	425b      	negs	r3, r3
 8001024:	2103      	movs	r1, #3
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ff7c 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <SysTick_Config+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <SysTick_Config+0x44>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	210f      	movs	r1, #15
 8001054:	187b      	adds	r3, r7, r1
 8001056:	1c02      	adds	r2, r0, #0
 8001058:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	0002      	movs	r2, r0
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff33 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ffaf 	bl	8001000 <SysTick_Config>
 80010a2:	0003      	movs	r3, r0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e091      	b.n	80011e2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	001a      	movs	r2, r3
 80010c4:	4b49      	ldr	r3, [pc, #292]	@ (80011ec <HAL_DMA_Init+0x140>)
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d810      	bhi.n	80010ec <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a48      	ldr	r2, [pc, #288]	@ (80011f0 <HAL_DMA_Init+0x144>)
 80010d0:	4694      	mov	ip, r2
 80010d2:	4463      	add	r3, ip
 80010d4:	2114      	movs	r1, #20
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff f814 	bl	8000104 <__udivsi3>
 80010dc:	0003      	movs	r3, r0
 80010de:	009a      	lsls	r2, r3, #2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a43      	ldr	r2, [pc, #268]	@ (80011f4 <HAL_DMA_Init+0x148>)
 80010e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ea:	e00f      	b.n	800110c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a41      	ldr	r2, [pc, #260]	@ (80011f8 <HAL_DMA_Init+0x14c>)
 80010f2:	4694      	mov	ip, r2
 80010f4:	4463      	add	r3, ip
 80010f6:	2114      	movs	r1, #20
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff f803 	bl	8000104 <__udivsi3>
 80010fe:	0003      	movs	r3, r0
 8001100:	009a      	lsls	r2, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a3c      	ldr	r2, [pc, #240]	@ (80011fc <HAL_DMA_Init+0x150>)
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2225      	movs	r2, #37	@ 0x25
 8001110:	2102      	movs	r1, #2
 8001112:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4938      	ldr	r1, [pc, #224]	@ (8001200 <HAL_DMA_Init+0x154>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fa9f 	bl	80016a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	01db      	lsls	r3, r3, #7
 800116a:	429a      	cmp	r2, r3
 800116c:	d102      	bne.n	8001174 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117c:	217f      	movs	r1, #127	@ 0x7f
 800117e:	400a      	ands	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800118a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d011      	beq.n	80011b8 <HAL_DMA_Init+0x10c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d80d      	bhi.n	80011b8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 fac8 	bl	8001734 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	e008      	b.n	80011ca <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2225      	movs	r2, #37	@ 0x25
 80011d4:	2101      	movs	r1, #1
 80011d6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2224      	movs	r2, #36	@ 0x24
 80011dc:	2100      	movs	r1, #0
 80011de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	0018      	movs	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	40020407 	.word	0x40020407
 80011f0:	bffdfff8 	.word	0xbffdfff8
 80011f4:	40020000 	.word	0x40020000
 80011f8:	bffdfbf8 	.word	0xbffdfbf8
 80011fc:	40020400 	.word	0x40020400
 8001200:	ffff800f 	.word	0xffff800f

08001204 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001212:	2317      	movs	r3, #23
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2224      	movs	r2, #36	@ 0x24
 800121e:	5c9b      	ldrb	r3, [r3, r2]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_DMA_Start_IT+0x24>
 8001224:	2302      	movs	r3, #2
 8001226:	e06f      	b.n	8001308 <HAL_DMA_Start_IT+0x104>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2224      	movs	r2, #36	@ 0x24
 800122c:	2101      	movs	r1, #1
 800122e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2225      	movs	r2, #37	@ 0x25
 8001234:	5c9b      	ldrb	r3, [r3, r2]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d157      	bne.n	80012ec <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2225      	movs	r2, #37	@ 0x25
 8001240:	2102      	movs	r1, #2
 8001242:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	438a      	bics	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f9e1 	bl	8001628 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	2b00      	cmp	r3, #0
 800126c:	d008      	beq.n	8001280 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	210e      	movs	r1, #14
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	e00f      	b.n	80012a0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2104      	movs	r1, #4
 800128c:	438a      	bics	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	210a      	movs	r1, #10
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	2380      	movs	r3, #128	@ 0x80
 80012a8:	025b      	lsls	r3, r3, #9
 80012aa:	4013      	ands	r3, r2
 80012ac:	d008      	beq.n	80012c0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b8:	2180      	movs	r1, #128	@ 0x80
 80012ba:	0049      	lsls	r1, r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d2:	2180      	movs	r1, #128	@ 0x80
 80012d4:	0049      	lsls	r1, r1, #1
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e00a      	b.n	8001302 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2224      	movs	r2, #36	@ 0x24
 80012f6:	2100      	movs	r1, #0
 80012f8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80012fa:	2317      	movs	r3, #23
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001302:	2317      	movs	r3, #23
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	781b      	ldrb	r3, [r3, #0]
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b006      	add	sp, #24
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e04f      	b.n	80013c2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2225      	movs	r2, #37	@ 0x25
 8001326:	5c9b      	ldrb	r3, [r3, r2]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d008      	beq.n	8001340 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2204      	movs	r2, #4
 8001332:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2224      	movs	r2, #36	@ 0x24
 8001338:	2100      	movs	r1, #0
 800133a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e040      	b.n	80013c2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	210e      	movs	r1, #14
 800134c:	438a      	bics	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135a:	491c      	ldr	r1, [pc, #112]	@ (80013cc <HAL_DMA_Abort+0xbc>)
 800135c:	400a      	ands	r2, r1
 800135e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2101      	movs	r1, #1
 800136c:	438a      	bics	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001374:	221c      	movs	r2, #28
 8001376:	401a      	ands	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	2101      	movs	r1, #1
 800137e:	4091      	lsls	r1, r2
 8001380:	000a      	movs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800138c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a0:	490a      	ldr	r1, [pc, #40]	@ (80013cc <HAL_DMA_Abort+0xbc>)
 80013a2:	400a      	ands	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2225      	movs	r2, #37	@ 0x25
 80013b4:	2101      	movs	r1, #1
 80013b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2224      	movs	r2, #36	@ 0x24
 80013bc:	2100      	movs	r1, #0
 80013be:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	fffffeff 	.word	0xfffffeff

080013d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d8:	210f      	movs	r1, #15
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2225      	movs	r2, #37	@ 0x25
 80013e4:	5c9b      	ldrb	r3, [r3, r2]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d006      	beq.n	80013fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2204      	movs	r2, #4
 80013f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	e048      	b.n	800148c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	210e      	movs	r1, #14
 8001406:	438a      	bics	r2, r1
 8001408:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2101      	movs	r1, #1
 8001416:	438a      	bics	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001424:	491d      	ldr	r1, [pc, #116]	@ (800149c <HAL_DMA_Abort_IT+0xcc>)
 8001426:	400a      	ands	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	221c      	movs	r2, #28
 8001430:	401a      	ands	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	2101      	movs	r1, #1
 8001438:	4091      	lsls	r1, r2
 800143a:	000a      	movs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001446:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00c      	beq.n	800146a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145a:	4910      	ldr	r1, [pc, #64]	@ (800149c <HAL_DMA_Abort_IT+0xcc>)
 800145c:	400a      	ands	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001468:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2225      	movs	r2, #37	@ 0x25
 800146e:	2101      	movs	r1, #1
 8001470:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2224      	movs	r2, #36	@ 0x24
 8001476:	2100      	movs	r1, #0
 8001478:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147e:	2b00      	cmp	r3, #0
 8001480:	d004      	beq.n	800148c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	0010      	movs	r0, r2
 800148a:	4798      	blx	r3
    }
  }
  return status;
 800148c:	230f      	movs	r3, #15
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	781b      	ldrb	r3, [r3, #0]
}
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	b004      	add	sp, #16
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	fffffeff 	.word	0xfffffeff

080014a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014bc:	221c      	movs	r2, #28
 80014be:	4013      	ands	r3, r2
 80014c0:	2204      	movs	r2, #4
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4013      	ands	r3, r2
 80014ca:	d026      	beq.n	800151a <HAL_DMA_IRQHandler+0x7a>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2204      	movs	r2, #4
 80014d0:	4013      	ands	r3, r2
 80014d2:	d022      	beq.n	800151a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2220      	movs	r2, #32
 80014dc:	4013      	ands	r3, r2
 80014de:	d107      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2104      	movs	r1, #4
 80014ec:	438a      	bics	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f4:	221c      	movs	r2, #28
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	2104      	movs	r1, #4
 80014fe:	4091      	lsls	r1, r2
 8001500:	000a      	movs	r2, r1
 8001502:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	2b00      	cmp	r3, #0
 800150a:	d100      	bne.n	800150e <HAL_DMA_IRQHandler+0x6e>
 800150c:	e080      	b.n	8001610 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	0010      	movs	r0, r2
 8001516:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001518:	e07a      	b.n	8001610 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	221c      	movs	r2, #28
 8001520:	4013      	ands	r3, r2
 8001522:	2202      	movs	r2, #2
 8001524:	409a      	lsls	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	d03c      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x108>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d038      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2220      	movs	r2, #32
 800153e:	4013      	ands	r3, r2
 8001540:	d10b      	bne.n	800155a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	210a      	movs	r1, #10
 800154e:	438a      	bics	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2225      	movs	r2, #37	@ 0x25
 8001556:	2101      	movs	r1, #1
 8001558:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	001a      	movs	r2, r3
 8001560:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <HAL_DMA_IRQHandler+0x17c>)
 8001562:	429a      	cmp	r2, r3
 8001564:	d909      	bls.n	800157a <HAL_DMA_IRQHandler+0xda>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	221c      	movs	r2, #28
 800156c:	401a      	ands	r2, r3
 800156e:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <HAL_DMA_IRQHandler+0x180>)
 8001570:	2102      	movs	r1, #2
 8001572:	4091      	lsls	r1, r2
 8001574:	000a      	movs	r2, r1
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	e008      	b.n	800158c <HAL_DMA_IRQHandler+0xec>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	221c      	movs	r2, #28
 8001580:	401a      	ands	r2, r3
 8001582:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <HAL_DMA_IRQHandler+0x184>)
 8001584:	2102      	movs	r1, #2
 8001586:	4091      	lsls	r1, r2
 8001588:	000a      	movs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2224      	movs	r2, #36	@ 0x24
 8001590:	2100      	movs	r1, #0
 8001592:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001598:	2b00      	cmp	r3, #0
 800159a:	d039      	beq.n	8001610 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	0010      	movs	r0, r2
 80015a4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80015a6:	e033      	b.n	8001610 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ac:	221c      	movs	r2, #28
 80015ae:	4013      	ands	r3, r2
 80015b0:	2208      	movs	r2, #8
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	d02a      	beq.n	8001612 <HAL_DMA_IRQHandler+0x172>
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2208      	movs	r2, #8
 80015c0:	4013      	ands	r3, r2
 80015c2:	d026      	beq.n	8001612 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	210e      	movs	r1, #14
 80015d0:	438a      	bics	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	221c      	movs	r2, #28
 80015da:	401a      	ands	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	2101      	movs	r1, #1
 80015e2:	4091      	lsls	r1, r2
 80015e4:	000a      	movs	r2, r1
 80015e6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2225      	movs	r2, #37	@ 0x25
 80015f2:	2101      	movs	r1, #1
 80015f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2224      	movs	r2, #36	@ 0x24
 80015fa:	2100      	movs	r1, #0
 80015fc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	0010      	movs	r0, r2
 800160e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001610:	46c0      	nop			@ (mov r8, r8)
 8001612:	46c0      	nop			@ (mov r8, r8)
}
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	40020080 	.word	0x40020080
 8001620:	40020400 	.word	0x40020400
 8001624:	40020000 	.word	0x40020000

08001628 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800163e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001650:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	221c      	movs	r2, #28
 8001658:	401a      	ands	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	2101      	movs	r1, #1
 8001660:	4091      	lsls	r1, r2
 8001662:	000a      	movs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b10      	cmp	r3, #16
 8001674:	d108      	bne.n	8001688 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001686:	e007      	b.n	8001698 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
}
 8001698:	46c0      	nop			@ (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}

080016a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	001a      	movs	r2, r3
 80016ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d814      	bhi.n	80016de <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001728 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80016be:	189a      	adds	r2, r3, r2
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	001a      	movs	r2, r3
 80016ca:	23ff      	movs	r3, #255	@ 0xff
 80016cc:	4013      	ands	r3, r2
 80016ce:	3b08      	subs	r3, #8
 80016d0:	2114      	movs	r1, #20
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7fe fd16 	bl	8000104 <__udivsi3>
 80016d8:	0003      	movs	r3, r0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e014      	b.n	8001708 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4a11      	ldr	r2, [pc, #68]	@ (800172c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80016e8:	189a      	adds	r2, r3, r2
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	001a      	movs	r2, r3
 80016f4:	23ff      	movs	r3, #255	@ 0xff
 80016f6:	4013      	ands	r3, r2
 80016f8:	3b08      	subs	r3, #8
 80016fa:	2114      	movs	r1, #20
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7fe fd01 	bl	8000104 <__udivsi3>
 8001702:	0003      	movs	r3, r0
 8001704:	3307      	adds	r3, #7
 8001706:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800170c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	221f      	movs	r2, #31
 8001712:	4013      	ands	r3, r2
 8001714:	2201      	movs	r2, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b004      	add	sp, #16
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40020407 	.word	0x40020407
 8001728:	40020800 	.word	0x40020800
 800172c:	4002081c 	.word	0x4002081c
 8001730:	40020880 	.word	0x40020880

08001734 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	227f      	movs	r2, #127	@ 0x7f
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800174a:	4694      	mov	ip, r2
 800174c:	4463      	add	r3, ip
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	001a      	movs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800175a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3b01      	subs	r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	4013      	ands	r3, r2
 8001764:	2201      	movs	r2, #1
 8001766:	409a      	lsls	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800176c:	46c0      	nop			@ (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}
 8001774:	1000823f 	.word	0x1000823f
 8001778:	40020940 	.word	0x40020940

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	e14d      	b.n	8001a28 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4091      	lsls	r1, r2
 8001796:	000a      	movs	r2, r1
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d100      	bne.n	80017a4 <HAL_GPIO_Init+0x28>
 80017a2:	e13e      	b.n	8001a22 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2203      	movs	r2, #3
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d005      	beq.n	80017bc <HAL_GPIO_Init+0x40>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2203      	movs	r2, #3
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d130      	bne.n	800181e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	409a      	lsls	r2, r3
 80017ca:	0013      	movs	r3, r2
 80017cc:	43da      	mvns	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	409a      	lsls	r2, r3
 80017de:	0013      	movs	r3, r2
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f2:	2201      	movs	r2, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	2201      	movs	r2, #1
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2203      	movs	r2, #3
 8001824:	4013      	ands	r3, r2
 8001826:	2b03      	cmp	r3, #3
 8001828:	d017      	beq.n	800185a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	409a      	lsls	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	43da      	mvns	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2203      	movs	r2, #3
 8001860:	4013      	ands	r3, r2
 8001862:	2b02      	cmp	r3, #2
 8001864:	d123      	bne.n	80018ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	58d3      	ldr	r3, [r2, r3]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2207      	movs	r2, #7
 8001878:	4013      	ands	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	409a      	lsls	r2, r3
 8001880:	0013      	movs	r3, r2
 8001882:	43da      	mvns	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2107      	movs	r1, #7
 8001892:	400b      	ands	r3, r1
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	6939      	ldr	r1, [r7, #16]
 80018ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2203      	movs	r2, #3
 80018cc:	401a      	ands	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	23c0      	movs	r3, #192	@ 0xc0
 80018e8:	029b      	lsls	r3, r3, #10
 80018ea:	4013      	ands	r3, r2
 80018ec:	d100      	bne.n	80018f0 <HAL_GPIO_Init+0x174>
 80018ee:	e098      	b.n	8001a22 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80018f0:	4a53      	ldr	r2, [pc, #332]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3318      	adds	r3, #24
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	589b      	ldr	r3, [r3, r2]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2203      	movs	r2, #3
 8001902:	4013      	ands	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	220f      	movs	r2, #15
 8001908:	409a      	lsls	r2, r3
 800190a:	0013      	movs	r3, r2
 800190c:	43da      	mvns	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	23a0      	movs	r3, #160	@ 0xa0
 8001918:	05db      	lsls	r3, r3, #23
 800191a:	429a      	cmp	r2, r3
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x1d6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a48      	ldr	r2, [pc, #288]	@ (8001a44 <HAL_GPIO_Init+0x2c8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x1d2>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a47      	ldr	r2, [pc, #284]	@ (8001a48 <HAL_GPIO_Init+0x2cc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x1ce>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a46      	ldr	r2, [pc, #280]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x1ca>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a45      	ldr	r2, [pc, #276]	@ (8001a50 <HAL_GPIO_Init+0x2d4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x1c6>
 800193e:	2304      	movs	r3, #4
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x1d8>
 8001942:	2305      	movs	r3, #5
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x1d8>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x1d8>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x1d8>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x1d8>
 8001952:	2300      	movs	r3, #0
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	2103      	movs	r1, #3
 8001958:	400a      	ands	r2, r1
 800195a:	00d2      	lsls	r2, r2, #3
 800195c:	4093      	lsls	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001964:	4936      	ldr	r1, [pc, #216]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3318      	adds	r3, #24
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001972:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	2380      	movs	r3, #128	@ 0x80
 8001988:	035b      	lsls	r3, r3, #13
 800198a:	4013      	ands	r3, r2
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001996:	4b2a      	ldr	r3, [pc, #168]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800199c:	4b28      	ldr	r3, [pc, #160]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43da      	mvns	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	2380      	movs	r3, #128	@ 0x80
 80019b2:	039b      	lsls	r3, r3, #14
 80019b4:	4013      	ands	r3, r2
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80019c8:	2384      	movs	r3, #132	@ 0x84
 80019ca:	58d3      	ldr	r3, [r2, r3]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43da      	mvns	r2, r3
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	4013      	ands	r3, r2
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ec:	4914      	ldr	r1, [pc, #80]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80019ee:	2284      	movs	r2, #132	@ 0x84
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80019f4:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	58d3      	ldr	r3, [r2, r3]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43da      	mvns	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	2380      	movs	r3, #128	@ 0x80
 8001a0c:	025b      	lsls	r3, r3, #9
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a1a:	4909      	ldr	r1, [pc, #36]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001a1c:	2280      	movs	r2, #128	@ 0x80
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	40da      	lsrs	r2, r3
 8001a30:	1e13      	subs	r3, r2, #0
 8001a32:	d000      	beq.n	8001a36 <HAL_GPIO_Init+0x2ba>
 8001a34:	e6aa      	b.n	800178c <HAL_GPIO_Init+0x10>
  }
}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b006      	add	sp, #24
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021800 	.word	0x40021800
 8001a44:	50000400 	.word	0x50000400
 8001a48:	50000800 	.word	0x50000800
 8001a4c:	50000c00 	.word	0x50000c00
 8001a50:	50001000 	.word	0x50001000

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	0008      	movs	r0, r1
 8001a5e:	0011      	movs	r1, r2
 8001a60:	1cbb      	adds	r3, r7, #2
 8001a62:	1c02      	adds	r2, r0, #0
 8001a64:	801a      	strh	r2, [r3, #0]
 8001a66:	1c7b      	adds	r3, r7, #1
 8001a68:	1c0a      	adds	r2, r1, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a6c:	1c7b      	adds	r3, r7, #1
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a74:	1cbb      	adds	r3, r7, #2
 8001a76:	881a      	ldrh	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a7c:	e003      	b.n	8001a86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a7e:	1cbb      	adds	r3, r7, #2
 8001a80:	881a      	ldrh	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	000a      	movs	r2, r1
 8001a98:	1cbb      	adds	r3, r7, #2
 8001a9a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa2:	1cbb      	adds	r3, r7, #2
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	041a      	lsls	r2, r3, #16
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	1cb9      	adds	r1, r7, #2
 8001ab2:	8809      	ldrh	r1, [r1, #0]
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
}
 8001abc:	46c0      	nop			@ (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001acc:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d11f      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	0013      	movs	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	189b      	adds	r3, r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4912      	ldr	r1, [pc, #72]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001af6:	0018      	movs	r0, r3
 8001af8:	f7fe fb04 	bl	8000104 <__udivsi3>
 8001afc:	0003      	movs	r3, r0
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b02:	e008      	b.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e001      	b.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e009      	b.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d0ed      	beq.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	40007000 	.word	0x40007000
 8001b38:	fffff9ff 	.word	0xfffff9ff
 8001b3c:	20000020 	.word	0x20000020
 8001b40:	000f4240 	.word	0x000f4240

08001b44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	23e0      	movs	r3, #224	@ 0xe0
 8001b4e:	01db      	lsls	r3, r3, #7
 8001b50:	4013      	ands	r3, r2
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f000 fb50 	bl	8002210 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	d100      	bne.n	8001b7c <HAL_RCC_OscConfig+0x20>
 8001b7a:	e07c      	b.n	8001c76 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7c:	4bc3      	ldr	r3, [pc, #780]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2238      	movs	r2, #56	@ 0x38
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b86:	4bc1      	ldr	r3, [pc, #772]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0x40>
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d002      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d10b      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba2:	4bba      	ldr	r3, [pc, #744]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	4013      	ands	r3, r2
 8001bac:	d062      	beq.n	8001c74 <HAL_RCC_OscConfig+0x118>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d15e      	bne.n	8001c74 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e32a      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	025b      	lsls	r3, r3, #9
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x7a>
 8001bc6:	4bb1      	ldr	r3, [pc, #708]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4bb0      	ldr	r3, [pc, #704]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001bcc:	2180      	movs	r1, #128	@ 0x80
 8001bce:	0249      	lsls	r1, r1, #9
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e020      	b.n	8001c18 <HAL_RCC_OscConfig+0xbc>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	23a0      	movs	r3, #160	@ 0xa0
 8001bdc:	02db      	lsls	r3, r3, #11
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d10e      	bne.n	8001c00 <HAL_RCC_OscConfig+0xa4>
 8001be2:	4baa      	ldr	r3, [pc, #680]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4ba9      	ldr	r3, [pc, #676]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	02c9      	lsls	r1, r1, #11
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	4ba6      	ldr	r3, [pc, #664]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4ba5      	ldr	r3, [pc, #660]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001bf6:	2180      	movs	r1, #128	@ 0x80
 8001bf8:	0249      	lsls	r1, r1, #9
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xbc>
 8001c00:	4ba2      	ldr	r3, [pc, #648]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4ba1      	ldr	r3, [pc, #644]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001c06:	49a2      	ldr	r1, [pc, #648]	@ (8001e90 <HAL_RCC_OscConfig+0x334>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	4b9f      	ldr	r3, [pc, #636]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b9e      	ldr	r3, [pc, #632]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001c12:	49a0      	ldr	r1, [pc, #640]	@ (8001e94 <HAL_RCC_OscConfig+0x338>)
 8001c14:	400a      	ands	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d014      	beq.n	8001c4a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f922 	bl	8000e68 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f91d 	bl	8000e68 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b64      	cmp	r3, #100	@ 0x64
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e2e9      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3c:	4b93      	ldr	r3, [pc, #588]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	4013      	ands	r3, r2
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0xce>
 8001c48:	e015      	b.n	8001c76 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f90d 	bl	8000e68 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff f908 	bl	8000e68 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	@ 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e2d4      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c66:	4b89      	ldr	r3, [pc, #548]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0xf8>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d100      	bne.n	8001c82 <HAL_RCC_OscConfig+0x126>
 8001c80:	e099      	b.n	8001db6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4b82      	ldr	r3, [pc, #520]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	@ 0x38
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2203      	movs	r2, #3
 8001c92:	4013      	ands	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d102      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x146>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d135      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca8:	4b78      	ldr	r3, [pc, #480]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x164>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e2a7      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b72      	ldr	r3, [pc, #456]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a74      	ldr	r2, [pc, #464]	@ (8001e98 <HAL_RCC_OscConfig+0x33c>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	0019      	movs	r1, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	021a      	lsls	r2, r3, #8
 8001cd0:	4b6e      	ldr	r3, [pc, #440]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d112      	bne.n	8001d02 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8001e9c <HAL_RCC_OscConfig+0x340>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	4b68      	ldr	r3, [pc, #416]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001cf0:	4b66      	ldr	r3, [pc, #408]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0adb      	lsrs	r3, r3, #11
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	4a69      	ldr	r2, [pc, #420]	@ (8001ea0 <HAL_RCC_OscConfig+0x344>)
 8001cfc:	40da      	lsrs	r2, r3
 8001cfe:	4b69      	ldr	r3, [pc, #420]	@ (8001ea4 <HAL_RCC_OscConfig+0x348>)
 8001d00:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d02:	4b69      	ldr	r3, [pc, #420]	@ (8001ea8 <HAL_RCC_OscConfig+0x34c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff f852 	bl	8000db0 <HAL_InitTick>
 8001d0c:	1e03      	subs	r3, r0, #0
 8001d0e:	d051      	beq.n	8001db4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e27d      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d030      	beq.n	8001d7e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a5e      	ldr	r2, [pc, #376]	@ (8001e9c <HAL_RCC_OscConfig+0x340>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	4b58      	ldr	r3, [pc, #352]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b56      	ldr	r3, [pc, #344]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b55      	ldr	r3, [pc, #340]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001d36:	2180      	movs	r1, #128	@ 0x80
 8001d38:	0049      	lsls	r1, r1, #1
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff f893 	bl	8000e68 <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff f88e 	bl	8000e68 <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e25a      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4013      	ands	r3, r2
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d66:	4b49      	ldr	r3, [pc, #292]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001e98 <HAL_RCC_OscConfig+0x33c>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	021a      	lsls	r2, r3, #8
 8001d76:	4b45      	ldr	r3, [pc, #276]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	e01b      	b.n	8001db6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001d7e:	4b43      	ldr	r3, [pc, #268]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001d84:	4949      	ldr	r1, [pc, #292]	@ (8001eac <HAL_RCC_OscConfig+0x350>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7ff f86d 	bl	8000e68 <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff f868 	bl	8000e68 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e234      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da6:	4b39      	ldr	r3, [pc, #228]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	@ 0x80
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x238>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2208      	movs	r2, #8
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d047      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dc0:	4b32      	ldr	r3, [pc, #200]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2238      	movs	r2, #56	@ 0x38
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b18      	cmp	r3, #24
 8001dca:	d10a      	bne.n	8001de2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d03c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2f4>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d138      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e216      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d019      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001dea:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001dec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dee:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7ff f837 	bl	8000e68 <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff f832 	bl	8000e68 <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1fe      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	2202      	movs	r2, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d0f1      	beq.n	8001e00 <HAL_RCC_OscConfig+0x2a4>
 8001e1c:	e018      	b.n	8001e50 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001e20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e22:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001e24:	2101      	movs	r1, #1
 8001e26:	438a      	bics	r2, r1
 8001e28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff f81d 	bl	8000e68 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e34:	f7ff f818 	bl	8000e68 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1e4      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d1f1      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2204      	movs	r2, #4
 8001e56:	4013      	ands	r3, r2
 8001e58:	d100      	bne.n	8001e5c <HAL_RCC_OscConfig+0x300>
 8001e5a:	e0c7      	b.n	8001fec <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5c:	231f      	movs	r3, #31
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2238      	movs	r2, #56	@ 0x38
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d11f      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_RCC_OscConfig+0x330>)
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	2202      	movs	r2, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	d100      	bne.n	8001e7c <HAL_RCC_OscConfig+0x320>
 8001e7a:	e0b7      	b.n	8001fec <HAL_RCC_OscConfig+0x490>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d000      	beq.n	8001e86 <HAL_RCC_OscConfig+0x32a>
 8001e84:	e0b2      	b.n	8001fec <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1c2      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	fffeffff 	.word	0xfffeffff
 8001e94:	fffbffff 	.word	0xfffbffff
 8001e98:	ffff80ff 	.word	0xffff80ff
 8001e9c:	ffffc7ff 	.word	0xffffc7ff
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	20000020 	.word	0x20000020
 8001ea8:	20000024 	.word	0x20000024
 8001eac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eb0:	4bb5      	ldr	r3, [pc, #724]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	055b      	lsls	r3, r3, #21
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x364>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x366>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d011      	beq.n	8001eea <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4bb0      	ldr	r3, [pc, #704]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eca:	4baf      	ldr	r3, [pc, #700]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	0549      	lsls	r1, r1, #21
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ed4:	4bac      	ldr	r3, [pc, #688]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	055b      	lsls	r3, r3, #21
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ee2:	231f      	movs	r3, #31
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eea:	4ba8      	ldr	r3, [pc, #672]	@ (800218c <HAL_RCC_OscConfig+0x630>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d11a      	bne.n	8001f2c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef6:	4ba5      	ldr	r3, [pc, #660]	@ (800218c <HAL_RCC_OscConfig+0x630>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4ba4      	ldr	r3, [pc, #656]	@ (800218c <HAL_RCC_OscConfig+0x630>)
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	0049      	lsls	r1, r1, #1
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f04:	f7fe ffb0 	bl	8000e68 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7fe ffab 	bl	8000e68 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e177      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f20:	4b9a      	ldr	r3, [pc, #616]	@ (800218c <HAL_RCC_OscConfig+0x630>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3e6>
 8001f34:	4b94      	ldr	r3, [pc, #592]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f38:	4b93      	ldr	r3, [pc, #588]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f40:	e01c      	b.n	8001f7c <HAL_RCC_OscConfig+0x420>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x408>
 8001f4a:	4b8f      	ldr	r3, [pc, #572]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f4e:	4b8e      	ldr	r3, [pc, #568]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f50:	2104      	movs	r1, #4
 8001f52:	430a      	orrs	r2, r1
 8001f54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f56:	4b8c      	ldr	r3, [pc, #560]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0x420>
 8001f64:	4b88      	ldr	r3, [pc, #544]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f68:	4b87      	ldr	r3, [pc, #540]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f70:	4b85      	ldr	r3, [pc, #532]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f74:	4b84      	ldr	r3, [pc, #528]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001f76:	2104      	movs	r1, #4
 8001f78:	438a      	bics	r2, r1
 8001f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d014      	beq.n	8001fae <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe ff70 	bl	8000e68 <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8c:	e009      	b.n	8001fa2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe ff6b 	bl	8000e68 <HAL_GetTick>
 8001f92:	0002      	movs	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	4a7d      	ldr	r2, [pc, #500]	@ (8002190 <HAL_RCC_OscConfig+0x634>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e136      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	4b79      	ldr	r3, [pc, #484]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x432>
 8001fac:	e013      	b.n	8001fd6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7fe ff5b 	bl	8000e68 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb6:	e009      	b.n	8001fcc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7fe ff56 	bl	8000e68 <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	4a73      	ldr	r2, [pc, #460]	@ (8002190 <HAL_RCC_OscConfig+0x634>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e121      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fcc:	4b6e      	ldr	r3, [pc, #440]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001fd6:	231f      	movs	r3, #31
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	4b69      	ldr	r3, [pc, #420]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001fe2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fe4:	4b68      	ldr	r3, [pc, #416]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8001fe6:	496b      	ldr	r1, [pc, #428]	@ (8002194 <HAL_RCC_OscConfig+0x638>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d039      	beq.n	800206a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01b      	beq.n	8002036 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ffe:	4b62      	ldr	r3, [pc, #392]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b61      	ldr	r3, [pc, #388]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002004:	2180      	movs	r1, #128	@ 0x80
 8002006:	03c9      	lsls	r1, r1, #15
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7fe ff2c 	bl	8000e68 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002016:	f7fe ff27 	bl	8000e68 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0f3      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002028:	4b57      	ldr	r3, [pc, #348]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	@ 0x80
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	4013      	ands	r3, r2
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x4ba>
 8002034:	e019      	b.n	800206a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002036:	4b54      	ldr	r3, [pc, #336]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b53      	ldr	r3, [pc, #332]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 800203c:	4956      	ldr	r1, [pc, #344]	@ (8002198 <HAL_RCC_OscConfig+0x63c>)
 800203e:	400a      	ands	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7fe ff11 	bl	8000e68 <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800204c:	f7fe ff0c 	bl	8000e68 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0d8      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800205e:	4b4a      	ldr	r3, [pc, #296]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	4013      	ands	r3, r2
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d100      	bne.n	8002074 <HAL_RCC_OscConfig+0x518>
 8002072:	e0cc      	b.n	800220e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002074:	4b44      	ldr	r3, [pc, #272]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2238      	movs	r2, #56	@ 0x38
 800207a:	4013      	ands	r3, r2
 800207c:	2b10      	cmp	r3, #16
 800207e:	d100      	bne.n	8002082 <HAL_RCC_OscConfig+0x526>
 8002080:	e07b      	b.n	800217a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d156      	bne.n	8002138 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b3f      	ldr	r3, [pc, #252]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b3e      	ldr	r3, [pc, #248]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002090:	4942      	ldr	r1, [pc, #264]	@ (800219c <HAL_RCC_OscConfig+0x640>)
 8002092:	400a      	ands	r2, r1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002096:	f7fe fee7 	bl	8000e68 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe fee2 	bl	8000e68 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0ae      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b2:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	@ 0x80
 80020b8:	049b      	lsls	r3, r3, #18
 80020ba:	4013      	ands	r3, r2
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020be:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4a37      	ldr	r2, [pc, #220]	@ (80021a0 <HAL_RCC_OscConfig+0x644>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4b26      	ldr	r3, [pc, #152]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f2:	4b25      	ldr	r3, [pc, #148]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b24      	ldr	r3, [pc, #144]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 80020f8:	2180      	movs	r1, #128	@ 0x80
 80020fa:	0449      	lsls	r1, r1, #17
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002100:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	4b20      	ldr	r3, [pc, #128]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002106:	2180      	movs	r1, #128	@ 0x80
 8002108:	0549      	lsls	r1, r1, #21
 800210a:	430a      	orrs	r2, r1
 800210c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7fe feab 	bl	8000e68 <HAL_GetTick>
 8002112:	0003      	movs	r3, r0
 8002114:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fea6 	bl	8000e68 <HAL_GetTick>
 800211c:	0002      	movs	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e072      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	049b      	lsls	r3, r3, #18
 8002132:	4013      	ands	r3, r2
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x5bc>
 8002136:	e06a      	b.n	800220e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 800213e:	4917      	ldr	r1, [pc, #92]	@ (800219c <HAL_RCC_OscConfig+0x640>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fe90 	bl	8000e68 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7fe fe8b 	bl	8000e68 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e057      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	049b      	lsls	r3, r3, #18
 8002168:	4013      	ands	r3, r2
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_RCC_OscConfig+0x62c>)
 8002172:	490c      	ldr	r1, [pc, #48]	@ (80021a4 <HAL_RCC_OscConfig+0x648>)
 8002174:	400a      	ands	r2, r1
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	e049      	b.n	800220e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d112      	bne.n	80021a8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e044      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	00001388 	.word	0x00001388
 8002194:	efffffff 	.word	0xefffffff
 8002198:	ffbfffff 	.word	0xffbfffff
 800219c:	feffffff 	.word	0xfeffffff
 80021a0:	11c1808c 	.word	0x11c1808c
 80021a4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <HAL_RCC_OscConfig+0x6bc>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2203      	movs	r2, #3
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d126      	bne.n	800220a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2270      	movs	r2, #112	@ 0x70
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d11f      	bne.n	800220a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	23fe      	movs	r3, #254	@ 0xfe
 80021ce:	01db      	lsls	r3, r3, #7
 80021d0:	401a      	ands	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d116      	bne.n	800220a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	23f8      	movs	r3, #248	@ 0xf8
 80021e0:	039b      	lsls	r3, r3, #14
 80021e2:	401a      	ands	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d10e      	bne.n	800220a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	23e0      	movs	r3, #224	@ 0xe0
 80021f0:	051b      	lsls	r3, r3, #20
 80021f2:	401a      	ands	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	0f5b      	lsrs	r3, r3, #29
 8002200:	075a      	lsls	r2, r3, #29
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b008      	add	sp, #32
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0e9      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b76      	ldr	r3, [pc, #472]	@ (800240c <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2207      	movs	r2, #7
 8002236:	4013      	ands	r3, r2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d91e      	bls.n	800227c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b73      	ldr	r3, [pc, #460]	@ (800240c <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2207      	movs	r2, #7
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	4b70      	ldr	r3, [pc, #448]	@ (800240c <HAL_RCC_ClockConfig+0x1f0>)
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002250:	f7fe fe0a 	bl	8000e68 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002258:	e009      	b.n	800226e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225a:	f7fe fe05 	bl	8000e68 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	4a6a      	ldr	r2, [pc, #424]	@ (8002410 <HAL_RCC_ClockConfig+0x1f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0ca      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800226e:	4b67      	ldr	r3, [pc, #412]	@ (800240c <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2207      	movs	r2, #7
 8002274:	4013      	ands	r3, r2
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d1ee      	bne.n	800225a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d015      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2204      	movs	r2, #4
 800228c:	4013      	ands	r3, r2
 800228e:	d006      	beq.n	800229e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002290:	4b60      	ldr	r3, [pc, #384]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b5f      	ldr	r3, [pc, #380]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 8002296:	21e0      	movs	r1, #224	@ 0xe0
 8002298:	01c9      	lsls	r1, r1, #7
 800229a:	430a      	orrs	r2, r1
 800229c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229e:	4b5d      	ldr	r3, [pc, #372]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002418 <HAL_RCC_ClockConfig+0x1fc>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	0019      	movs	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	4b59      	ldr	r3, [pc, #356]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	d057      	beq.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c4:	4b53      	ldr	r3, [pc, #332]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	@ 0x80
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	4013      	ands	r3, r2
 80022ce:	d12b      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e097      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	049b      	lsls	r3, r3, #18
 80022e4:	4013      	ands	r3, r2
 80022e6:	d11f      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e08b      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f4:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4013      	ands	r3, r2
 80022fe:	d113      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e07f      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d106      	bne.n	800231a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800230c:	4b41      	ldr	r3, [pc, #260]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 800230e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002310:	2202      	movs	r2, #2
 8002312:	4013      	ands	r3, r2
 8002314:	d108      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e074      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231a:	4b3e      	ldr	r3, [pc, #248]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e06d      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002328:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2207      	movs	r2, #7
 800232e:	4393      	bics	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233c:	f7fe fd94 	bl	8000e68 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002344:	e009      	b.n	800235a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7fe fd8f 	bl	8000e68 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a2f      	ldr	r2, [pc, #188]	@ (8002410 <HAL_RCC_ClockConfig+0x1f4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e054      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2238      	movs	r2, #56	@ 0x38
 8002360:	401a      	ands	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	429a      	cmp	r2, r3
 800236a:	d1ec      	bne.n	8002346 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b27      	ldr	r3, [pc, #156]	@ (800240c <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2207      	movs	r2, #7
 8002372:	4013      	ands	r3, r2
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d21e      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2207      	movs	r2, #7
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	4b21      	ldr	r3, [pc, #132]	@ (800240c <HAL_RCC_ClockConfig+0x1f0>)
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800238c:	f7fe fd6c 	bl	8000e68 <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002394:	e009      	b.n	80023aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002396:	f7fe fd67 	bl	8000e68 <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002410 <HAL_RCC_ClockConfig+0x1f4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e02c      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023aa:	4b18      	ldr	r3, [pc, #96]	@ (800240c <HAL_RCC_ClockConfig+0x1f0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2207      	movs	r2, #7
 80023b0:	4013      	ands	r3, r2
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1ee      	bne.n	8002396 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2204      	movs	r2, #4
 80023be:	4013      	ands	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a15      	ldr	r2, [pc, #84]	@ (800241c <HAL_RCC_ClockConfig+0x200>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023d6:	f000 f829 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023da:	0001      	movs	r1, r0
 80023dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	220f      	movs	r2, #15
 80023e4:	401a      	ands	r2, r3
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_RCC_ClockConfig+0x204>)
 80023e8:	0092      	lsls	r2, r2, #2
 80023ea:	58d3      	ldr	r3, [r2, r3]
 80023ec:	221f      	movs	r2, #31
 80023ee:	4013      	ands	r3, r2
 80023f0:	000a      	movs	r2, r1
 80023f2:	40da      	lsrs	r2, r3
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_ClockConfig+0x208>)
 80023f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_ClockConfig+0x20c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7fe fcd7 	bl	8000db0 <HAL_InitTick>
 8002402:	0003      	movs	r3, r0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40022000 	.word	0x40022000
 8002410:	00001388 	.word	0x00001388
 8002414:	40021000 	.word	0x40021000
 8002418:	fffff0ff 	.word	0xfffff0ff
 800241c:	ffff8fff 	.word	0xffff8fff
 8002420:	080048c8 	.word	0x080048c8
 8002424:	20000020 	.word	0x20000020
 8002428:	20000024 	.word	0x20000024

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002432:	4b3c      	ldr	r3, [pc, #240]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2238      	movs	r2, #56	@ 0x38
 8002438:	4013      	ands	r3, r2
 800243a:	d10f      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800243c:	4b39      	ldr	r3, [pc, #228]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0adb      	lsrs	r3, r3, #11
 8002442:	2207      	movs	r2, #7
 8002444:	4013      	ands	r3, r2
 8002446:	2201      	movs	r2, #1
 8002448:	409a      	lsls	r2, r3
 800244a:	0013      	movs	r3, r2
 800244c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	4835      	ldr	r0, [pc, #212]	@ (8002528 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002452:	f7fd fe57 	bl	8000104 <__udivsi3>
 8002456:	0003      	movs	r3, r0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	e05d      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800245c:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2238      	movs	r2, #56	@ 0x38
 8002462:	4013      	ands	r3, r2
 8002464:	2b08      	cmp	r3, #8
 8002466:	d102      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002468:	4b30      	ldr	r3, [pc, #192]	@ (800252c <HAL_RCC_GetSysClockFreq+0x100>)
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e054      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246e:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2238      	movs	r2, #56	@ 0x38
 8002474:	4013      	ands	r3, r2
 8002476:	2b10      	cmp	r3, #16
 8002478:	d138      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800247a:	4b2a      	ldr	r3, [pc, #168]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2203      	movs	r2, #3
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002484:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	2207      	movs	r2, #7
 800248c:	4013      	ands	r3, r2
 800248e:	3301      	adds	r3, #1
 8002490:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	4824      	ldr	r0, [pc, #144]	@ (800252c <HAL_RCC_GetSysClockFreq+0x100>)
 800249c:	f7fd fe32 	bl	8000104 <__udivsi3>
 80024a0:	0003      	movs	r3, r0
 80024a2:	0019      	movs	r1, r3
 80024a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	227f      	movs	r2, #127	@ 0x7f
 80024ac:	4013      	ands	r3, r2
 80024ae:	434b      	muls	r3, r1
 80024b0:	617b      	str	r3, [r7, #20]
        break;
 80024b2:	e00d      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	481c      	ldr	r0, [pc, #112]	@ (8002528 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024b8:	f7fd fe24 	bl	8000104 <__udivsi3>
 80024bc:	0003      	movs	r3, r0
 80024be:	0019      	movs	r1, r3
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	227f      	movs	r2, #127	@ 0x7f
 80024c8:	4013      	ands	r3, r2
 80024ca:	434b      	muls	r3, r1
 80024cc:	617b      	str	r3, [r7, #20]
        break;
 80024ce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0f5b      	lsrs	r3, r3, #29
 80024d6:	2207      	movs	r2, #7
 80024d8:	4013      	ands	r3, r2
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	6978      	ldr	r0, [r7, #20]
 80024e2:	f7fd fe0f 	bl	8000104 <__udivsi3>
 80024e6:	0003      	movs	r3, r0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	e015      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2238      	movs	r2, #56	@ 0x38
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d103      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2238      	movs	r2, #56	@ 0x38
 8002506:	4013      	ands	r3, r2
 8002508:	2b18      	cmp	r3, #24
 800250a:	d103      	bne.n	8002514 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800250c:	23fa      	movs	r3, #250	@ 0xfa
 800250e:	01db      	lsls	r3, r3, #7
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	e001      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002518:	693b      	ldr	r3, [r7, #16]
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b006      	add	sp, #24
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	40021000 	.word	0x40021000
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200

08002530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b02      	ldr	r3, [pc, #8]	@ (8002540 <HAL_RCC_GetHCLKFreq+0x10>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	20000020 	.word	0x20000020

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002548:	f7ff fff2 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800254c:	0004      	movs	r4, r0
 800254e:	f7ff faf9 	bl	8001b44 <LL_RCC_GetAPB1Prescaler>
 8002552:	0003      	movs	r3, r0
 8002554:	0b1a      	lsrs	r2, r3, #12
 8002556:	4b05      	ldr	r3, [pc, #20]	@ (800256c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	58d3      	ldr	r3, [r2, r3]
 800255c:	221f      	movs	r2, #31
 800255e:	4013      	ands	r3, r2
 8002560:	40dc      	lsrs	r4, r3
 8002562:	0023      	movs	r3, r4
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	08004908 	.word	0x08004908

08002570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002578:	2313      	movs	r3, #19
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002580:	2312      	movs	r3, #18
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	4013      	ands	r3, r2
 8002592:	d100      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002594:	e0ad      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2011      	movs	r0, #17
 8002598:	183b      	adds	r3, r7, r0
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b47      	ldr	r3, [pc, #284]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	055b      	lsls	r3, r3, #21
 80025a6:	4013      	ands	r3, r2
 80025a8:	d110      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b44      	ldr	r3, [pc, #272]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025ae:	4b43      	ldr	r3, [pc, #268]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025b0:	2180      	movs	r1, #128	@ 0x80
 80025b2:	0549      	lsls	r1, r1, #21
 80025b4:	430a      	orrs	r2, r1
 80025b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025b8:	4b40      	ldr	r3, [pc, #256]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025cc:	4b3c      	ldr	r3, [pc, #240]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	0049      	lsls	r1, r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025da:	f7fe fc45 	bl	8000e68 <HAL_GetTick>
 80025de:	0003      	movs	r3, r0
 80025e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e2:	e00b      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e4:	f7fe fc40 	bl	8000e68 <HAL_GetTick>
 80025e8:	0002      	movs	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d904      	bls.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80025f2:	2313      	movs	r3, #19
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	2203      	movs	r2, #3
 80025f8:	701a      	strb	r2, [r3, #0]
        break;
 80025fa:	e005      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025fc:	4b30      	ldr	r3, [pc, #192]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d0ed      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002608:	2313      	movs	r3, #19
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d15e      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002612:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002614:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002616:	23c0      	movs	r3, #192	@ 0xc0
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4013      	ands	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d019      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	429a      	cmp	r2, r3
 800262c:	d014      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800262e:	4b23      	ldr	r3, [pc, #140]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	4a24      	ldr	r2, [pc, #144]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002638:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800263a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800263c:	4b1f      	ldr	r3, [pc, #124]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	0249      	lsls	r1, r1, #9
 8002642:	430a      	orrs	r2, r1
 8002644:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002646:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002648:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800264a:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800264c:	491e      	ldr	r1, [pc, #120]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800264e:	400a      	ands	r2, r1
 8002650:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
 800265e:	d016      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fc02 	bl	8000e68 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002668:	e00c      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fbfd 	bl	8000e68 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	4a15      	ldr	r2, [pc, #84]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d904      	bls.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800267a:	2313      	movs	r3, #19
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	2203      	movs	r2, #3
 8002680:	701a      	strb	r2, [r3, #0]
            break;
 8002682:	e004      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002684:	4b0d      	ldr	r3, [pc, #52]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	2202      	movs	r2, #2
 800268a:	4013      	ands	r3, r2
 800268c:	d0ed      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800268e:	2313      	movs	r3, #19
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	4a09      	ldr	r2, [pc, #36]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800269e:	4013      	ands	r3, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a6:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026a8:	430a      	orrs	r2, r1
 80026aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026ac:	e016      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026ae:	2312      	movs	r3, #18
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2213      	movs	r2, #19
 80026b4:	18ba      	adds	r2, r7, r2
 80026b6:	7812      	ldrb	r2, [r2, #0]
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e00f      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
 80026c4:	fffffcff 	.word	0xfffffcff
 80026c8:	fffeffff 	.word	0xfffeffff
 80026cc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d0:	2312      	movs	r3, #18
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2213      	movs	r2, #19
 80026d6:	18ba      	adds	r2, r7, r2
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026dc:	2311      	movs	r3, #17
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d105      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e6:	4bb6      	ldr	r3, [pc, #728]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026ea:	4bb5      	ldr	r3, [pc, #724]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ec:	49b5      	ldr	r1, [pc, #724]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80026ee:	400a      	ands	r2, r1
 80026f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026fc:	4bb0      	ldr	r3, [pc, #704]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	2203      	movs	r2, #3
 8002702:	4393      	bics	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4bad      	ldr	r3, [pc, #692]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800270c:	430a      	orrs	r2, r1
 800270e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d009      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800271a:	4ba9      	ldr	r3, [pc, #676]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800271c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271e:	220c      	movs	r2, #12
 8002720:	4393      	bics	r3, r2
 8002722:	0019      	movs	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	4ba5      	ldr	r3, [pc, #660]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800272a:	430a      	orrs	r2, r1
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2204      	movs	r2, #4
 8002734:	4013      	ands	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002738:	4ba1      	ldr	r3, [pc, #644]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800273a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273c:	2230      	movs	r2, #48	@ 0x30
 800273e:	4393      	bics	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	4b9e      	ldr	r3, [pc, #632]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002748:	430a      	orrs	r2, r1
 800274a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2210      	movs	r2, #16
 8002752:	4013      	ands	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002756:	4b9a      	ldr	r3, [pc, #616]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275a:	4a9b      	ldr	r2, [pc, #620]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800275c:	4013      	ands	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	4b96      	ldr	r3, [pc, #600]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002766:	430a      	orrs	r2, r1
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	015b      	lsls	r3, r3, #5
 8002772:	4013      	ands	r3, r2
 8002774:	d009      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002776:	4b92      	ldr	r3, [pc, #584]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277a:	4a94      	ldr	r2, [pc, #592]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800277c:	4013      	ands	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	4b8e      	ldr	r3, [pc, #568]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002786:	430a      	orrs	r2, r1
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4013      	ands	r3, r2
 8002794:	d009      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002796:	4b8a      	ldr	r3, [pc, #552]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279a:	4a8d      	ldr	r2, [pc, #564]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027a4:	4b86      	ldr	r3, [pc, #536]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027a6:	430a      	orrs	r2, r1
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4013      	ands	r3, r2
 80027b4:	d009      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027b6:	4b82      	ldr	r3, [pc, #520]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ba:	4a86      	ldr	r2, [pc, #536]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c4:	4b7e      	ldr	r3, [pc, #504]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2220      	movs	r2, #32
 80027d0:	4013      	ands	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d4:	4b7a      	ldr	r3, [pc, #488]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	4a7f      	ldr	r2, [pc, #508]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	4b77      	ldr	r3, [pc, #476]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2240      	movs	r2, #64	@ 0x40
 80027ee:	4013      	ands	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f2:	4b73      	ldr	r3, [pc, #460]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	4a79      	ldr	r2, [pc, #484]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	4b6f      	ldr	r3, [pc, #444]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002802:	430a      	orrs	r2, r1
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	01db      	lsls	r3, r3, #7
 800280e:	4013      	ands	r3, r2
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002812:	4b6b      	ldr	r3, [pc, #428]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	0899      	lsrs	r1, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800281e:	4b68      	ldr	r3, [pc, #416]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002820:	430a      	orrs	r2, r1
 8002822:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	05db      	lsls	r3, r3, #23
 800282c:	429a      	cmp	r2, r3
 800282e:	d106      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002830:	4b63      	ldr	r3, [pc, #396]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	4b62      	ldr	r3, [pc, #392]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002836:	2180      	movs	r1, #128	@ 0x80
 8002838:	0249      	lsls	r1, r1, #9
 800283a:	430a      	orrs	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	031b      	lsls	r3, r3, #12
 8002846:	4013      	ands	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800284a:	4b5d      	ldr	r3, [pc, #372]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800284c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284e:	2240      	movs	r2, #64	@ 0x40
 8002850:	4393      	bics	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002858:	4b59      	ldr	r3, [pc, #356]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800285a:	430a      	orrs	r2, r1
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2380      	movs	r3, #128	@ 0x80
 8002864:	039b      	lsls	r3, r3, #14
 8002866:	4013      	ands	r3, r2
 8002868:	d016      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800286a:	4b55      	ldr	r3, [pc, #340]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	4a5c      	ldr	r2, [pc, #368]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002878:	4b51      	ldr	r3, [pc, #324]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800287a:	430a      	orrs	r2, r1
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002882:	2380      	movs	r3, #128	@ 0x80
 8002884:	03db      	lsls	r3, r3, #15
 8002886:	429a      	cmp	r2, r3
 8002888:	d106      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800288a:	4b4d      	ldr	r3, [pc, #308]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b4c      	ldr	r3, [pc, #304]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	0449      	lsls	r1, r1, #17
 8002894:	430a      	orrs	r2, r1
 8002896:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	03db      	lsls	r3, r3, #15
 80028a0:	4013      	ands	r3, r2
 80028a2:	d016      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80028a4:	4b46      	ldr	r3, [pc, #280]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	4a4e      	ldr	r2, [pc, #312]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028b2:	4b43      	ldr	r3, [pc, #268]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	045b      	lsls	r3, r3, #17
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d106      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80028c4:	4b3e      	ldr	r3, [pc, #248]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	4b3d      	ldr	r3, [pc, #244]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028ca:	2180      	movs	r1, #128	@ 0x80
 80028cc:	0449      	lsls	r1, r1, #17
 80028ce:	430a      	orrs	r2, r1
 80028d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4013      	ands	r3, r2
 80028dc:	d014      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80028de:	4b38      	ldr	r3, [pc, #224]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	2203      	movs	r2, #3
 80028e4:	4393      	bics	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	4b34      	ldr	r3, [pc, #208]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d106      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028fa:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002900:	2180      	movs	r1, #128	@ 0x80
 8002902:	0249      	lsls	r1, r1, #9
 8002904:	430a      	orrs	r2, r1
 8002906:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	019b      	lsls	r3, r3, #6
 8002910:	4013      	ands	r3, r2
 8002912:	d014      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002914:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	220c      	movs	r2, #12
 800291a:	4393      	bics	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002922:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002924:	430a      	orrs	r2, r1
 8002926:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292c:	2b04      	cmp	r3, #4
 800292e:	d106      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002930:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002936:	2180      	movs	r1, #128	@ 0x80
 8002938:	0249      	lsls	r1, r1, #9
 800293a:	430a      	orrs	r2, r1
 800293c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	@ 0x80
 8002944:	045b      	lsls	r3, r3, #17
 8002946:	4013      	ands	r3, r2
 8002948:	d016      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800294a:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	4a22      	ldr	r2, [pc, #136]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800295a:	430a      	orrs	r2, r1
 800295c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	019b      	lsls	r3, r3, #6
 8002966:	429a      	cmp	r2, r3
 8002968:	d106      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002970:	2180      	movs	r1, #128	@ 0x80
 8002972:	0449      	lsls	r1, r1, #17
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	@ 0x80
 800297e:	049b      	lsls	r3, r3, #18
 8002980:	4013      	ands	r3, r2
 8002982:	d016      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002984:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002988:	4a10      	ldr	r2, [pc, #64]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800298a:	4013      	ands	r3, r2
 800298c:	0019      	movs	r1, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002992:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002994:	430a      	orrs	r2, r1
 8002996:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029aa:	2180      	movs	r1, #128	@ 0x80
 80029ac:	0449      	lsls	r1, r1, #17
 80029ae:	430a      	orrs	r2, r1
 80029b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80029b2:	2312      	movs	r3, #18
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	781b      	ldrb	r3, [r3, #0]
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b006      	add	sp, #24
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	efffffff 	.word	0xefffffff
 80029c8:	fffff3ff 	.word	0xfffff3ff
 80029cc:	fffffcff 	.word	0xfffffcff
 80029d0:	fff3ffff 	.word	0xfff3ffff
 80029d4:	ffcfffff 	.word	0xffcfffff
 80029d8:	ffffcfff 	.word	0xffffcfff
 80029dc:	ffff3fff 	.word	0xffff3fff
 80029e0:	ffbfffff 	.word	0xffbfffff
 80029e4:	feffffff 	.word	0xfeffffff

080029e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e046      	b.n	8002a88 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2288      	movs	r2, #136	@ 0x88
 80029fe:	589b      	ldr	r3, [r3, r2]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2284      	movs	r2, #132	@ 0x84
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7fe f86e 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2288      	movs	r2, #136	@ 0x88
 8002a18:	2124      	movs	r1, #36	@ 0x24
 8002a1a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2101      	movs	r1, #1
 8002a28:	438a      	bics	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 ffda 	bl	80039f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 fc80 	bl	8003344 <UART_SetConfig>
 8002a44:	0003      	movs	r3, r0
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e01c      	b.n	8002a88 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	490d      	ldr	r1, [pc, #52]	@ (8002a90 <HAL_UART_Init+0xa8>)
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	212a      	movs	r1, #42	@ 0x2a
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2101      	movs	r1, #1
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f001 f869 	bl	8003b58 <UART_CheckIdleState>
 8002a86:	0003      	movs	r3, r0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	ffffb7ff 	.word	0xffffb7ff

08002a94 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	@ 0x30
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	1dbb      	adds	r3, r7, #6
 8002aa0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2288      	movs	r2, #136	@ 0x88
 8002aa6:	589b      	ldr	r3, [r3, r2]
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d000      	beq.n	8002aae <HAL_UART_Transmit_IT+0x1a>
 8002aac:	e08d      	b.n	8002bca <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_UART_Transmit_IT+0x28>
 8002ab4:	1dbb      	adds	r3, r7, #6
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e085      	b.n	8002bcc <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	015b      	lsls	r3, r3, #5
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d109      	bne.n	8002ae0 <HAL_UART_Transmit_IT+0x4c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d001      	beq.n	8002ae0 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e075      	b.n	8002bcc <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1dba      	adds	r2, r7, #6
 8002aea:	2154      	movs	r1, #84	@ 0x54
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1dba      	adds	r2, r7, #6
 8002af4:	2156      	movs	r1, #86	@ 0x56
 8002af6:	8812      	ldrh	r2, [r2, #0]
 8002af8:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2290      	movs	r2, #144	@ 0x90
 8002b04:	2100      	movs	r1, #0
 8002b06:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2288      	movs	r2, #136	@ 0x88
 8002b0c:	2121      	movs	r1, #33	@ 0x21
 8002b0e:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	059b      	lsls	r3, r3, #22
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d12a      	bne.n	8002b72 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	015b      	lsls	r3, r3, #5
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_UART_Transmit_IT+0xa4>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d103      	bne.n	8002b38 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a28      	ldr	r2, [pc, #160]	@ (8002bd4 <HAL_UART_Transmit_IT+0x140>)
 8002b34:	679a      	str	r2, [r3, #120]	@ 0x78
 8002b36:	e002      	b.n	8002b3e <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a27      	ldr	r2, [pc, #156]	@ (8002bd8 <HAL_UART_Transmit_IT+0x144>)
 8002b3c:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b42:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b44:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b48:	2301      	movs	r3, #1
 8002b4a:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	f383 8810 	msr	PRIMASK, r3
}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2180      	movs	r1, #128	@ 0x80
 8002b60:	0409      	lsls	r1, r1, #16
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	f383 8810 	msr	PRIMASK, r3
}
 8002b70:	e029      	b.n	8002bc6 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	015b      	lsls	r3, r3, #5
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d107      	bne.n	8002b8e <HAL_UART_Transmit_IT+0xfa>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <HAL_UART_Transmit_IT+0x148>)
 8002b8a:	679a      	str	r2, [r3, #120]	@ 0x78
 8002b8c:	e002      	b.n	8002b94 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <HAL_UART_Transmit_IT+0x14c>)
 8002b92:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b94:	f3ef 8310 	mrs	r3, PRIMASK
 8002b98:	613b      	str	r3, [r7, #16]
  return(result);
 8002b9a:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f383 8810 	msr	PRIMASK, r3
}
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2180      	movs	r1, #128	@ 0x80
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f383 8810 	msr	PRIMASK, r3
}
 8002bc4:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
  }
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b00c      	add	sp, #48	@ 0x30
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	080044a9 	.word	0x080044a9
 8002bd8:	080043bd 	.word	0x080043bd
 8002bdc:	080042ff 	.word	0x080042ff
 8002be0:	0800424b 	.word	0x0800424b

08002be4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	1dbb      	adds	r3, r7, #6
 8002bf0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	228c      	movs	r2, #140	@ 0x8c
 8002bf6:	589b      	ldr	r3, [r3, r2]
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d14f      	bne.n	8002c9c <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_UART_Receive_DMA+0x26>
 8002c02:	1dbb      	adds	r3, r7, #6
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e047      	b.n	8002c9e <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	2380      	movs	r3, #128	@ 0x80
 8002c14:	015b      	lsls	r3, r3, #5
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d109      	bne.n	8002c2e <HAL_UART_Receive_DMA+0x4a>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d105      	bne.n	8002c2e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2201      	movs	r2, #1
 8002c26:	4013      	ands	r3, r2
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e037      	b.n	8002c9e <HAL_UART_Receive_DMA+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca8 <HAL_UART_Receive_DMA+0xc4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d025      	beq.n	8002c8a <HAL_UART_Receive_DMA+0xa6>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1a      	ldr	r2, [pc, #104]	@ (8002cac <HAL_UART_Receive_DMA+0xc8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d020      	beq.n	8002c8a <HAL_UART_Receive_DMA+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	4013      	ands	r3, r2
 8002c54:	d019      	beq.n	8002c8a <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c56:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5a:	613b      	str	r3, [r7, #16]
  return(result);
 8002c5c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	2301      	movs	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f383 8810 	msr	PRIMASK, r3
}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2180      	movs	r1, #128	@ 0x80
 8002c78:	04c9      	lsls	r1, r1, #19
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f383 8810 	msr	PRIMASK, r3
}
 8002c88:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002c8a:	1dbb      	adds	r3, r7, #6
 8002c8c:	881a      	ldrh	r2, [r3, #0]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f001 f87a 	bl	8003d8c <UART_Start_Receive_DMA>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	e000      	b.n	8002c9e <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b008      	add	sp, #32
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	40008000 	.word	0x40008000
 8002cac:	40008400 	.word	0x40008400

08002cb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b0aa      	sub	sp, #168	@ 0xa8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	22a4      	movs	r2, #164	@ 0xa4
 8002cc0:	18b9      	adds	r1, r7, r2
 8002cc2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	20a0      	movs	r0, #160	@ 0xa0
 8002ccc:	1839      	adds	r1, r7, r0
 8002cce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	249c      	movs	r4, #156	@ 0x9c
 8002cd8:	1939      	adds	r1, r7, r4
 8002cda:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002cdc:	0011      	movs	r1, r2
 8002cde:	18bb      	adds	r3, r7, r2
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4aa2      	ldr	r2, [pc, #648]	@ (8002f6c <HAL_UART_IRQHandler+0x2bc>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2298      	movs	r2, #152	@ 0x98
 8002ce8:	18bd      	adds	r5, r7, r2
 8002cea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002cec:	18bb      	adds	r3, r7, r2
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11a      	bne.n	8002d2a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d015      	beq.n	8002d2a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002cfe:	183b      	adds	r3, r7, r0
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2220      	movs	r2, #32
 8002d04:	4013      	ands	r3, r2
 8002d06:	d105      	bne.n	8002d14 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d08:	193b      	adds	r3, r7, r4
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	055b      	lsls	r3, r3, #21
 8002d10:	4013      	ands	r3, r2
 8002d12:	d00a      	beq.n	8002d2a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d100      	bne.n	8002d1e <HAL_UART_IRQHandler+0x6e>
 8002d1c:	e2dc      	b.n	80032d8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	0010      	movs	r0, r2
 8002d26:	4798      	blx	r3
      }
      return;
 8002d28:	e2d6      	b.n	80032d8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d2a:	2398      	movs	r3, #152	@ 0x98
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <HAL_UART_IRQHandler+0x86>
 8002d34:	e122      	b.n	8002f7c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002d36:	239c      	movs	r3, #156	@ 0x9c
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a8c      	ldr	r2, [pc, #560]	@ (8002f70 <HAL_UART_IRQHandler+0x2c0>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d106      	bne.n	8002d50 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002d42:	23a0      	movs	r3, #160	@ 0xa0
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a8a      	ldr	r2, [pc, #552]	@ (8002f74 <HAL_UART_IRQHandler+0x2c4>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d100      	bne.n	8002d50 <HAL_UART_IRQHandler+0xa0>
 8002d4e:	e115      	b.n	8002f7c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d50:	23a4      	movs	r3, #164	@ 0xa4
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d012      	beq.n	8002d82 <HAL_UART_IRQHandler+0xd2>
 8002d5c:	23a0      	movs	r3, #160	@ 0xa0
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	2380      	movs	r3, #128	@ 0x80
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4013      	ands	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2290      	movs	r2, #144	@ 0x90
 8002d76:	589b      	ldr	r3, [r3, r2]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2190      	movs	r1, #144	@ 0x90
 8002d80:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d82:	23a4      	movs	r3, #164	@ 0xa4
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d011      	beq.n	8002db2 <HAL_UART_IRQHandler+0x102>
 8002d8e:	239c      	movs	r3, #156	@ 0x9c
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2201      	movs	r2, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2290      	movs	r2, #144	@ 0x90
 8002da6:	589b      	ldr	r3, [r3, r2]
 8002da8:	2204      	movs	r2, #4
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2190      	movs	r1, #144	@ 0x90
 8002db0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002db2:	23a4      	movs	r3, #164	@ 0xa4
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2204      	movs	r2, #4
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d011      	beq.n	8002de2 <HAL_UART_IRQHandler+0x132>
 8002dbe:	239c      	movs	r3, #156	@ 0x9c
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2290      	movs	r2, #144	@ 0x90
 8002dd6:	589b      	ldr	r3, [r3, r2]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2190      	movs	r1, #144	@ 0x90
 8002de0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002de2:	23a4      	movs	r3, #164	@ 0xa4
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2208      	movs	r2, #8
 8002dea:	4013      	ands	r3, r2
 8002dec:	d017      	beq.n	8002e1e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002dee:	23a0      	movs	r3, #160	@ 0xa0
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2220      	movs	r2, #32
 8002df6:	4013      	ands	r3, r2
 8002df8:	d105      	bne.n	8002e06 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002dfa:	239c      	movs	r3, #156	@ 0x9c
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5b      	ldr	r2, [pc, #364]	@ (8002f70 <HAL_UART_IRQHandler+0x2c0>)
 8002e02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2290      	movs	r2, #144	@ 0x90
 8002e12:	589b      	ldr	r3, [r3, r2]
 8002e14:	2208      	movs	r2, #8
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2190      	movs	r1, #144	@ 0x90
 8002e1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e1e:	23a4      	movs	r3, #164	@ 0xa4
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_UART_IRQHandler+0x1a4>
 8002e2c:	23a0      	movs	r3, #160	@ 0xa0
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	2380      	movs	r3, #128	@ 0x80
 8002e34:	04db      	lsls	r3, r3, #19
 8002e36:	4013      	ands	r3, r2
 8002e38:	d00c      	beq.n	8002e54 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2290      	movs	r2, #144	@ 0x90
 8002e48:	589b      	ldr	r3, [r3, r2]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2190      	movs	r1, #144	@ 0x90
 8002e52:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2290      	movs	r2, #144	@ 0x90
 8002e58:	589b      	ldr	r3, [r3, r2]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d100      	bne.n	8002e60 <HAL_UART_IRQHandler+0x1b0>
 8002e5e:	e23d      	b.n	80032dc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e60:	23a4      	movs	r3, #164	@ 0xa4
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2220      	movs	r2, #32
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d015      	beq.n	8002e98 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e6c:	23a0      	movs	r3, #160	@ 0xa0
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2220      	movs	r2, #32
 8002e74:	4013      	ands	r3, r2
 8002e76:	d106      	bne.n	8002e86 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e78:	239c      	movs	r3, #156	@ 0x9c
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	055b      	lsls	r3, r3, #21
 8002e82:	4013      	ands	r3, r2
 8002e84:	d008      	beq.n	8002e98 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	0010      	movs	r0, r2
 8002e96:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2290      	movs	r2, #144	@ 0x90
 8002e9c:	589b      	ldr	r3, [r3, r2]
 8002e9e:	2194      	movs	r1, #148	@ 0x94
 8002ea0:	187a      	adds	r2, r7, r1
 8002ea2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b40      	cmp	r3, #64	@ 0x40
 8002eb0:	d004      	beq.n	8002ebc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2228      	movs	r2, #40	@ 0x28
 8002eb8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eba:	d04c      	beq.n	8002f56 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f001 f84a 	bl	8003f58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b40      	cmp	r3, #64	@ 0x40
 8002ed0:	d13c      	bne.n	8002f4c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002ed8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	2090      	movs	r0, #144	@ 0x90
 8002edc:	183a      	adds	r2, r7, r0
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2140      	movs	r1, #64	@ 0x40
 8002ef8:	438a      	bics	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	183b      	adds	r3, r7, r0
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2280      	movs	r2, #128	@ 0x80
 8002f0e:	589b      	ldr	r3, [r3, r2]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d016      	beq.n	8002f42 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2280      	movs	r2, #128	@ 0x80
 8002f18:	589b      	ldr	r3, [r3, r2]
 8002f1a:	4a17      	ldr	r2, [pc, #92]	@ (8002f78 <HAL_UART_IRQHandler+0x2c8>)
 8002f1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2280      	movs	r2, #128	@ 0x80
 8002f22:	589b      	ldr	r3, [r3, r2]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7fe fa53 	bl	80013d0 <HAL_DMA_Abort_IT>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d01c      	beq.n	8002f68 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2280      	movs	r2, #128	@ 0x80
 8002f32:	589b      	ldr	r3, [r3, r2]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	2180      	movs	r1, #128	@ 0x80
 8002f3a:	5852      	ldr	r2, [r2, r1]
 8002f3c:	0010      	movs	r0, r2
 8002f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e012      	b.n	8002f68 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f000 f9e9 	bl	800331c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4a:	e00d      	b.n	8002f68 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 f9e4 	bl	800331c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	e008      	b.n	8002f68 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 f9df 	bl	800331c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2290      	movs	r2, #144	@ 0x90
 8002f62:	2100      	movs	r1, #0
 8002f64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002f66:	e1b9      	b.n	80032dc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	46c0      	nop			@ (mov r8, r8)
    return;
 8002f6a:	e1b7      	b.n	80032dc <HAL_UART_IRQHandler+0x62c>
 8002f6c:	0000080f 	.word	0x0000080f
 8002f70:	10000001 	.word	0x10000001
 8002f74:	04000120 	.word	0x04000120
 8002f78:	0800421d 	.word	0x0800421d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d000      	beq.n	8002f86 <HAL_UART_IRQHandler+0x2d6>
 8002f84:	e13e      	b.n	8003204 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f86:	23a4      	movs	r3, #164	@ 0xa4
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d100      	bne.n	8002f94 <HAL_UART_IRQHandler+0x2e4>
 8002f92:	e137      	b.n	8003204 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f94:	23a0      	movs	r3, #160	@ 0xa0
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x2f2>
 8002fa0:	e130      	b.n	8003204 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2240      	movs	r2, #64	@ 0x40
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b40      	cmp	r3, #64	@ 0x40
 8002fb6:	d000      	beq.n	8002fba <HAL_UART_IRQHandler+0x30a>
 8002fb8:	e0a4      	b.n	8003104 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2280      	movs	r2, #128	@ 0x80
 8002fbe:	589b      	ldr	r3, [r3, r2]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	217e      	movs	r1, #126	@ 0x7e
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d100      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x324>
 8002fd2:	e185      	b.n	80032e0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	225c      	movs	r2, #92	@ 0x5c
 8002fd8:	5a9b      	ldrh	r3, [r3, r2]
 8002fda:	187a      	adds	r2, r7, r1
 8002fdc:	8812      	ldrh	r2, [r2, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d300      	bcc.n	8002fe4 <HAL_UART_IRQHandler+0x334>
 8002fe2:	e17d      	b.n	80032e0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	187a      	adds	r2, r7, r1
 8002fe8:	215e      	movs	r1, #94	@ 0x5e
 8002fea:	8812      	ldrh	r2, [r2, #0]
 8002fec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2280      	movs	r2, #128	@ 0x80
 8002ff2:	589b      	ldr	r3, [r3, r2]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d170      	bne.n	80030e0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8003002:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003006:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003008:	2301      	movs	r3, #1
 800300a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300e:	f383 8810 	msr	PRIMASK, r3
}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	49b4      	ldr	r1, [pc, #720]	@ (80032f0 <HAL_UART_IRQHandler+0x640>)
 8003020:	400a      	ands	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003026:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302a:	f383 8810 	msr	PRIMASK, r3
}
 800302e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003030:	f3ef 8310 	mrs	r3, PRIMASK
 8003034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003038:	677b      	str	r3, [r7, #116]	@ 0x74
 800303a:	2301      	movs	r3, #1
 800303c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003040:	f383 8810 	msr	PRIMASK, r3
}
 8003044:	46c0      	nop			@ (mov r8, r8)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2101      	movs	r1, #1
 8003052:	438a      	bics	r2, r1
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003058:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800305c:	f383 8810 	msr	PRIMASK, r3
}
 8003060:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003062:	f3ef 8310 	mrs	r3, PRIMASK
 8003066:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800306a:	673b      	str	r3, [r7, #112]	@ 0x70
 800306c:	2301      	movs	r3, #1
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003072:	f383 8810 	msr	PRIMASK, r3
}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2140      	movs	r1, #64	@ 0x40
 8003084:	438a      	bics	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800308a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800308e:	f383 8810 	msr	PRIMASK, r3
}
 8003092:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	228c      	movs	r2, #140	@ 0x8c
 8003098:	2120      	movs	r1, #32
 800309a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a2:	f3ef 8310 	mrs	r3, PRIMASK
 80030a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80030a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030ac:	2301      	movs	r3, #1
 80030ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030b2:	f383 8810 	msr	PRIMASK, r3
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2110      	movs	r1, #16
 80030c4:	438a      	bics	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ce:	f383 8810 	msr	PRIMASK, r3
}
 80030d2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	589b      	ldr	r3, [r3, r2]
 80030da:	0018      	movs	r0, r3
 80030dc:	f7fe f918 	bl	8001310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	225c      	movs	r2, #92	@ 0x5c
 80030ea:	5a9a      	ldrh	r2, [r3, r2]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	215e      	movs	r1, #94	@ 0x5e
 80030f0:	5a5b      	ldrh	r3, [r3, r1]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0011      	movs	r1, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 f915 	bl	800332c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003102:	e0ed      	b.n	80032e0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	225c      	movs	r2, #92	@ 0x5c
 8003108:	5a99      	ldrh	r1, [r3, r2]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	225e      	movs	r2, #94	@ 0x5e
 800310e:	5a9b      	ldrh	r3, [r3, r2]
 8003110:	b29a      	uxth	r2, r3
 8003112:	208e      	movs	r0, #142	@ 0x8e
 8003114:	183b      	adds	r3, r7, r0
 8003116:	1a8a      	subs	r2, r1, r2
 8003118:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	225e      	movs	r2, #94	@ 0x5e
 800311e:	5a9b      	ldrh	r3, [r3, r2]
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d100      	bne.n	8003128 <HAL_UART_IRQHandler+0x478>
 8003126:	e0dd      	b.n	80032e4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003128:	183b      	adds	r3, r7, r0
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d100      	bne.n	8003132 <HAL_UART_IRQHandler+0x482>
 8003130:	e0d8      	b.n	80032e4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003132:	f3ef 8310 	mrs	r3, PRIMASK
 8003136:	60fb      	str	r3, [r7, #12]
  return(result);
 8003138:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800313a:	2488      	movs	r4, #136	@ 0x88
 800313c:	193a      	adds	r2, r7, r4
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	2301      	movs	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f383 8810 	msr	PRIMASK, r3
}
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4967      	ldr	r1, [pc, #412]	@ (80032f4 <HAL_UART_IRQHandler+0x644>)
 8003158:	400a      	ands	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	193b      	adds	r3, r7, r4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f383 8810 	msr	PRIMASK, r3
}
 8003168:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800316a:	f3ef 8310 	mrs	r3, PRIMASK
 800316e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003170:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003172:	2484      	movs	r4, #132	@ 0x84
 8003174:	193a      	adds	r2, r7, r4
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	2301      	movs	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f383 8810 	msr	PRIMASK, r3
}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	495a      	ldr	r1, [pc, #360]	@ (80032f8 <HAL_UART_IRQHandler+0x648>)
 8003190:	400a      	ands	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	193b      	adds	r3, r7, r4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f383 8810 	msr	PRIMASK, r3
}
 80031a0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	228c      	movs	r2, #140	@ 0x8c
 80031a6:	2120      	movs	r1, #32
 80031a8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031be:	2480      	movs	r4, #128	@ 0x80
 80031c0:	193a      	adds	r2, r7, r4
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	2301      	movs	r3, #1
 80031c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ca:	f383 8810 	msr	PRIMASK, r3
}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2110      	movs	r1, #16
 80031dc:	438a      	bics	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	193b      	adds	r3, r7, r4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e8:	f383 8810 	msr	PRIMASK, r3
}
 80031ec:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031f4:	183b      	adds	r3, r7, r0
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f000 f895 	bl	800332c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003202:	e06f      	b.n	80032e4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003204:	23a4      	movs	r3, #164	@ 0xa4
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	035b      	lsls	r3, r3, #13
 800320e:	4013      	ands	r3, r2
 8003210:	d010      	beq.n	8003234 <HAL_UART_IRQHandler+0x584>
 8003212:	239c      	movs	r3, #156	@ 0x9c
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	03db      	lsls	r3, r3, #15
 800321c:	4013      	ands	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	0352      	lsls	r2, r2, #13
 8003228:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f001 f9e1 	bl	80045f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003232:	e05a      	b.n	80032ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003234:	23a4      	movs	r3, #164	@ 0xa4
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	4013      	ands	r3, r2
 800323e:	d016      	beq.n	800326e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003240:	23a0      	movs	r3, #160	@ 0xa0
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2280      	movs	r2, #128	@ 0x80
 8003248:	4013      	ands	r3, r2
 800324a:	d106      	bne.n	800325a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800324c:	239c      	movs	r3, #156	@ 0x9c
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	4013      	ands	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800325e:	2b00      	cmp	r3, #0
 8003260:	d042      	beq.n	80032e8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	0010      	movs	r0, r2
 800326a:	4798      	blx	r3
    }
    return;
 800326c:	e03c      	b.n	80032e8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800326e:	23a4      	movs	r3, #164	@ 0xa4
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2240      	movs	r2, #64	@ 0x40
 8003276:	4013      	ands	r3, r2
 8003278:	d00a      	beq.n	8003290 <HAL_UART_IRQHandler+0x5e0>
 800327a:	23a0      	movs	r3, #160	@ 0xa0
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2240      	movs	r2, #64	@ 0x40
 8003282:	4013      	ands	r3, r2
 8003284:	d004      	beq.n	8003290 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f001 f987 	bl	800459c <UART_EndTransmit_IT>
    return;
 800328e:	e02c      	b.n	80032ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003290:	23a4      	movs	r3, #164	@ 0xa4
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2380      	movs	r3, #128	@ 0x80
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	4013      	ands	r3, r2
 800329c:	d00b      	beq.n	80032b6 <HAL_UART_IRQHandler+0x606>
 800329e:	23a0      	movs	r3, #160	@ 0xa0
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	05db      	lsls	r3, r3, #23
 80032a8:	4013      	ands	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f001 f9b0 	bl	8004614 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032b4:	e019      	b.n	80032ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80032b6:	23a4      	movs	r3, #164	@ 0xa4
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	045b      	lsls	r3, r3, #17
 80032c0:	4013      	ands	r3, r2
 80032c2:	d012      	beq.n	80032ea <HAL_UART_IRQHandler+0x63a>
 80032c4:	23a0      	movs	r3, #160	@ 0xa0
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da0d      	bge.n	80032ea <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f001 f997 	bl	8004604 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032d6:	e008      	b.n	80032ea <HAL_UART_IRQHandler+0x63a>
      return;
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	e006      	b.n	80032ea <HAL_UART_IRQHandler+0x63a>
    return;
 80032dc:	46c0      	nop			@ (mov r8, r8)
 80032de:	e004      	b.n	80032ea <HAL_UART_IRQHandler+0x63a>
      return;
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	e002      	b.n	80032ea <HAL_UART_IRQHandler+0x63a>
      return;
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	e000      	b.n	80032ea <HAL_UART_IRQHandler+0x63a>
    return;
 80032e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b02a      	add	sp, #168	@ 0xa8
 80032ee:	bdb0      	pop	{r4, r5, r7, pc}
 80032f0:	fffffeff 	.word	0xfffffeff
 80032f4:	fffffedf 	.word	0xfffffedf
 80032f8:	effffffe 	.word	0xeffffffe

080032fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b002      	add	sp, #8
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003314:	46c0      	nop			@ (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003324:	46c0      	nop			@ (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	000a      	movs	r2, r1
 8003336:	1cbb      	adds	r3, r7, #2
 8003338:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003344:	b5b0      	push	{r4, r5, r7, lr}
 8003346:	b090      	sub	sp, #64	@ 0x40
 8003348:	af00      	add	r7, sp, #0
 800334a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800334c:	231a      	movs	r3, #26
 800334e:	2220      	movs	r2, #32
 8003350:	189b      	adds	r3, r3, r2
 8003352:	19db      	adds	r3, r3, r7
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	431a      	orrs	r2, r3
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	431a      	orrs	r2, r3
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4313      	orrs	r3, r2
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4ac1      	ldr	r2, [pc, #772]	@ (800367c <UART_SetConfig+0x338>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003382:	430b      	orrs	r3, r1
 8003384:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4abc      	ldr	r2, [pc, #752]	@ (8003680 <UART_SetConfig+0x33c>)
 800338e:	4013      	ands	r3, r2
 8003390:	0018      	movs	r0, r3
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	68d9      	ldr	r1, [r3, #12]
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	0003      	movs	r3, r0
 800339c:	430b      	orrs	r3, r1
 800339e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4ab6      	ldr	r2, [pc, #728]	@ (8003684 <UART_SetConfig+0x340>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d009      	beq.n	80033c4 <UART_SetConfig+0x80>
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4ab4      	ldr	r2, [pc, #720]	@ (8003688 <UART_SetConfig+0x344>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033c0:	4313      	orrs	r3, r2
 80033c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4ab0      	ldr	r2, [pc, #704]	@ (800368c <UART_SetConfig+0x348>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d6:	430b      	orrs	r3, r1
 80033d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	220f      	movs	r2, #15
 80033e2:	4393      	bics	r3, r2
 80033e4:	0018      	movs	r0, r3
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	0003      	movs	r3, r0
 80033f0:	430b      	orrs	r3, r1
 80033f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4aa5      	ldr	r2, [pc, #660]	@ (8003690 <UART_SetConfig+0x34c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d131      	bne.n	8003462 <UART_SetConfig+0x11e>
 80033fe:	4ba5      	ldr	r3, [pc, #660]	@ (8003694 <UART_SetConfig+0x350>)
 8003400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003402:	2203      	movs	r2, #3
 8003404:	4013      	ands	r3, r2
 8003406:	2b03      	cmp	r3, #3
 8003408:	d01d      	beq.n	8003446 <UART_SetConfig+0x102>
 800340a:	d823      	bhi.n	8003454 <UART_SetConfig+0x110>
 800340c:	2b02      	cmp	r3, #2
 800340e:	d00c      	beq.n	800342a <UART_SetConfig+0xe6>
 8003410:	d820      	bhi.n	8003454 <UART_SetConfig+0x110>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <UART_SetConfig+0xd8>
 8003416:	2b01      	cmp	r3, #1
 8003418:	d00e      	beq.n	8003438 <UART_SetConfig+0xf4>
 800341a:	e01b      	b.n	8003454 <UART_SetConfig+0x110>
 800341c:	231b      	movs	r3, #27
 800341e:	2220      	movs	r2, #32
 8003420:	189b      	adds	r3, r3, r2
 8003422:	19db      	adds	r3, r3, r7
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	e154      	b.n	80036d4 <UART_SetConfig+0x390>
 800342a:	231b      	movs	r3, #27
 800342c:	2220      	movs	r2, #32
 800342e:	189b      	adds	r3, r3, r2
 8003430:	19db      	adds	r3, r3, r7
 8003432:	2202      	movs	r2, #2
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e14d      	b.n	80036d4 <UART_SetConfig+0x390>
 8003438:	231b      	movs	r3, #27
 800343a:	2220      	movs	r2, #32
 800343c:	189b      	adds	r3, r3, r2
 800343e:	19db      	adds	r3, r3, r7
 8003440:	2204      	movs	r2, #4
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e146      	b.n	80036d4 <UART_SetConfig+0x390>
 8003446:	231b      	movs	r3, #27
 8003448:	2220      	movs	r2, #32
 800344a:	189b      	adds	r3, r3, r2
 800344c:	19db      	adds	r3, r3, r7
 800344e:	2208      	movs	r2, #8
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e13f      	b.n	80036d4 <UART_SetConfig+0x390>
 8003454:	231b      	movs	r3, #27
 8003456:	2220      	movs	r2, #32
 8003458:	189b      	adds	r3, r3, r2
 800345a:	19db      	adds	r3, r3, r7
 800345c:	2210      	movs	r2, #16
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e138      	b.n	80036d4 <UART_SetConfig+0x390>
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a8c      	ldr	r2, [pc, #560]	@ (8003698 <UART_SetConfig+0x354>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d131      	bne.n	80034d0 <UART_SetConfig+0x18c>
 800346c:	4b89      	ldr	r3, [pc, #548]	@ (8003694 <UART_SetConfig+0x350>)
 800346e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003470:	220c      	movs	r2, #12
 8003472:	4013      	ands	r3, r2
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d01d      	beq.n	80034b4 <UART_SetConfig+0x170>
 8003478:	d823      	bhi.n	80034c2 <UART_SetConfig+0x17e>
 800347a:	2b08      	cmp	r3, #8
 800347c:	d00c      	beq.n	8003498 <UART_SetConfig+0x154>
 800347e:	d820      	bhi.n	80034c2 <UART_SetConfig+0x17e>
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <UART_SetConfig+0x146>
 8003484:	2b04      	cmp	r3, #4
 8003486:	d00e      	beq.n	80034a6 <UART_SetConfig+0x162>
 8003488:	e01b      	b.n	80034c2 <UART_SetConfig+0x17e>
 800348a:	231b      	movs	r3, #27
 800348c:	2220      	movs	r2, #32
 800348e:	189b      	adds	r3, r3, r2
 8003490:	19db      	adds	r3, r3, r7
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e11d      	b.n	80036d4 <UART_SetConfig+0x390>
 8003498:	231b      	movs	r3, #27
 800349a:	2220      	movs	r2, #32
 800349c:	189b      	adds	r3, r3, r2
 800349e:	19db      	adds	r3, r3, r7
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e116      	b.n	80036d4 <UART_SetConfig+0x390>
 80034a6:	231b      	movs	r3, #27
 80034a8:	2220      	movs	r2, #32
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	2204      	movs	r2, #4
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e10f      	b.n	80036d4 <UART_SetConfig+0x390>
 80034b4:	231b      	movs	r3, #27
 80034b6:	2220      	movs	r2, #32
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	2208      	movs	r2, #8
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e108      	b.n	80036d4 <UART_SetConfig+0x390>
 80034c2:	231b      	movs	r3, #27
 80034c4:	2220      	movs	r2, #32
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	2210      	movs	r2, #16
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e101      	b.n	80036d4 <UART_SetConfig+0x390>
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a71      	ldr	r2, [pc, #452]	@ (800369c <UART_SetConfig+0x358>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d131      	bne.n	800353e <UART_SetConfig+0x1fa>
 80034da:	4b6e      	ldr	r3, [pc, #440]	@ (8003694 <UART_SetConfig+0x350>)
 80034dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034de:	2230      	movs	r2, #48	@ 0x30
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b30      	cmp	r3, #48	@ 0x30
 80034e4:	d01d      	beq.n	8003522 <UART_SetConfig+0x1de>
 80034e6:	d823      	bhi.n	8003530 <UART_SetConfig+0x1ec>
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d00c      	beq.n	8003506 <UART_SetConfig+0x1c2>
 80034ec:	d820      	bhi.n	8003530 <UART_SetConfig+0x1ec>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <UART_SetConfig+0x1b4>
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d00e      	beq.n	8003514 <UART_SetConfig+0x1d0>
 80034f6:	e01b      	b.n	8003530 <UART_SetConfig+0x1ec>
 80034f8:	231b      	movs	r3, #27
 80034fa:	2220      	movs	r2, #32
 80034fc:	189b      	adds	r3, r3, r2
 80034fe:	19db      	adds	r3, r3, r7
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e0e6      	b.n	80036d4 <UART_SetConfig+0x390>
 8003506:	231b      	movs	r3, #27
 8003508:	2220      	movs	r2, #32
 800350a:	189b      	adds	r3, r3, r2
 800350c:	19db      	adds	r3, r3, r7
 800350e:	2202      	movs	r2, #2
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	e0df      	b.n	80036d4 <UART_SetConfig+0x390>
 8003514:	231b      	movs	r3, #27
 8003516:	2220      	movs	r2, #32
 8003518:	189b      	adds	r3, r3, r2
 800351a:	19db      	adds	r3, r3, r7
 800351c:	2204      	movs	r2, #4
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	e0d8      	b.n	80036d4 <UART_SetConfig+0x390>
 8003522:	231b      	movs	r3, #27
 8003524:	2220      	movs	r2, #32
 8003526:	189b      	adds	r3, r3, r2
 8003528:	19db      	adds	r3, r3, r7
 800352a:	2208      	movs	r2, #8
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e0d1      	b.n	80036d4 <UART_SetConfig+0x390>
 8003530:	231b      	movs	r3, #27
 8003532:	2220      	movs	r2, #32
 8003534:	189b      	adds	r3, r3, r2
 8003536:	19db      	adds	r3, r3, r7
 8003538:	2210      	movs	r2, #16
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e0ca      	b.n	80036d4 <UART_SetConfig+0x390>
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a57      	ldr	r2, [pc, #348]	@ (80036a0 <UART_SetConfig+0x35c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d106      	bne.n	8003556 <UART_SetConfig+0x212>
 8003548:	231b      	movs	r3, #27
 800354a:	2220      	movs	r2, #32
 800354c:	189b      	adds	r3, r3, r2
 800354e:	19db      	adds	r3, r3, r7
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e0be      	b.n	80036d4 <UART_SetConfig+0x390>
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a52      	ldr	r2, [pc, #328]	@ (80036a4 <UART_SetConfig+0x360>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d106      	bne.n	800356e <UART_SetConfig+0x22a>
 8003560:	231b      	movs	r3, #27
 8003562:	2220      	movs	r2, #32
 8003564:	189b      	adds	r3, r3, r2
 8003566:	19db      	adds	r3, r3, r7
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e0b2      	b.n	80036d4 <UART_SetConfig+0x390>
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a4d      	ldr	r2, [pc, #308]	@ (80036a8 <UART_SetConfig+0x364>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d106      	bne.n	8003586 <UART_SetConfig+0x242>
 8003578:	231b      	movs	r3, #27
 800357a:	2220      	movs	r2, #32
 800357c:	189b      	adds	r3, r3, r2
 800357e:	19db      	adds	r3, r3, r7
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	e0a6      	b.n	80036d4 <UART_SetConfig+0x390>
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a3e      	ldr	r2, [pc, #248]	@ (8003684 <UART_SetConfig+0x340>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d13e      	bne.n	800360e <UART_SetConfig+0x2ca>
 8003590:	4b40      	ldr	r3, [pc, #256]	@ (8003694 <UART_SetConfig+0x350>)
 8003592:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003594:	23c0      	movs	r3, #192	@ 0xc0
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	4013      	ands	r3, r2
 800359a:	22c0      	movs	r2, #192	@ 0xc0
 800359c:	0112      	lsls	r2, r2, #4
 800359e:	4293      	cmp	r3, r2
 80035a0:	d027      	beq.n	80035f2 <UART_SetConfig+0x2ae>
 80035a2:	22c0      	movs	r2, #192	@ 0xc0
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d82a      	bhi.n	8003600 <UART_SetConfig+0x2bc>
 80035aa:	2280      	movs	r2, #128	@ 0x80
 80035ac:	0112      	lsls	r2, r2, #4
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d011      	beq.n	80035d6 <UART_SetConfig+0x292>
 80035b2:	2280      	movs	r2, #128	@ 0x80
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d822      	bhi.n	8003600 <UART_SetConfig+0x2bc>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <UART_SetConfig+0x284>
 80035be:	2280      	movs	r2, #128	@ 0x80
 80035c0:	00d2      	lsls	r2, r2, #3
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00e      	beq.n	80035e4 <UART_SetConfig+0x2a0>
 80035c6:	e01b      	b.n	8003600 <UART_SetConfig+0x2bc>
 80035c8:	231b      	movs	r3, #27
 80035ca:	2220      	movs	r2, #32
 80035cc:	189b      	adds	r3, r3, r2
 80035ce:	19db      	adds	r3, r3, r7
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	e07e      	b.n	80036d4 <UART_SetConfig+0x390>
 80035d6:	231b      	movs	r3, #27
 80035d8:	2220      	movs	r2, #32
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	19db      	adds	r3, r3, r7
 80035de:	2202      	movs	r2, #2
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e077      	b.n	80036d4 <UART_SetConfig+0x390>
 80035e4:	231b      	movs	r3, #27
 80035e6:	2220      	movs	r2, #32
 80035e8:	189b      	adds	r3, r3, r2
 80035ea:	19db      	adds	r3, r3, r7
 80035ec:	2204      	movs	r2, #4
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e070      	b.n	80036d4 <UART_SetConfig+0x390>
 80035f2:	231b      	movs	r3, #27
 80035f4:	2220      	movs	r2, #32
 80035f6:	189b      	adds	r3, r3, r2
 80035f8:	19db      	adds	r3, r3, r7
 80035fa:	2208      	movs	r2, #8
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e069      	b.n	80036d4 <UART_SetConfig+0x390>
 8003600:	231b      	movs	r3, #27
 8003602:	2220      	movs	r2, #32
 8003604:	189b      	adds	r3, r3, r2
 8003606:	19db      	adds	r3, r3, r7
 8003608:	2210      	movs	r2, #16
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e062      	b.n	80036d4 <UART_SetConfig+0x390>
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1d      	ldr	r2, [pc, #116]	@ (8003688 <UART_SetConfig+0x344>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d157      	bne.n	80036c8 <UART_SetConfig+0x384>
 8003618:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <UART_SetConfig+0x350>)
 800361a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800361c:	23c0      	movs	r3, #192	@ 0xc0
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4013      	ands	r3, r2
 8003622:	22c0      	movs	r2, #192	@ 0xc0
 8003624:	0092      	lsls	r2, r2, #2
 8003626:	4293      	cmp	r3, r2
 8003628:	d040      	beq.n	80036ac <UART_SetConfig+0x368>
 800362a:	22c0      	movs	r2, #192	@ 0xc0
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	4293      	cmp	r3, r2
 8003630:	d843      	bhi.n	80036ba <UART_SetConfig+0x376>
 8003632:	2280      	movs	r2, #128	@ 0x80
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	4293      	cmp	r3, r2
 8003638:	d011      	beq.n	800365e <UART_SetConfig+0x31a>
 800363a:	2280      	movs	r2, #128	@ 0x80
 800363c:	0092      	lsls	r2, r2, #2
 800363e:	4293      	cmp	r3, r2
 8003640:	d83b      	bhi.n	80036ba <UART_SetConfig+0x376>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <UART_SetConfig+0x30c>
 8003646:	2280      	movs	r2, #128	@ 0x80
 8003648:	0052      	lsls	r2, r2, #1
 800364a:	4293      	cmp	r3, r2
 800364c:	d00e      	beq.n	800366c <UART_SetConfig+0x328>
 800364e:	e034      	b.n	80036ba <UART_SetConfig+0x376>
 8003650:	231b      	movs	r3, #27
 8003652:	2220      	movs	r2, #32
 8003654:	189b      	adds	r3, r3, r2
 8003656:	19db      	adds	r3, r3, r7
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e03a      	b.n	80036d4 <UART_SetConfig+0x390>
 800365e:	231b      	movs	r3, #27
 8003660:	2220      	movs	r2, #32
 8003662:	189b      	adds	r3, r3, r2
 8003664:	19db      	adds	r3, r3, r7
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e033      	b.n	80036d4 <UART_SetConfig+0x390>
 800366c:	231b      	movs	r3, #27
 800366e:	2220      	movs	r2, #32
 8003670:	189b      	adds	r3, r3, r2
 8003672:	19db      	adds	r3, r3, r7
 8003674:	2204      	movs	r2, #4
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e02c      	b.n	80036d4 <UART_SetConfig+0x390>
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	cfff69f3 	.word	0xcfff69f3
 8003680:	ffffcfff 	.word	0xffffcfff
 8003684:	40008000 	.word	0x40008000
 8003688:	40008400 	.word	0x40008400
 800368c:	11fff4ff 	.word	0x11fff4ff
 8003690:	40013800 	.word	0x40013800
 8003694:	40021000 	.word	0x40021000
 8003698:	40004400 	.word	0x40004400
 800369c:	40004800 	.word	0x40004800
 80036a0:	40004c00 	.word	0x40004c00
 80036a4:	40005000 	.word	0x40005000
 80036a8:	40013c00 	.word	0x40013c00
 80036ac:	231b      	movs	r3, #27
 80036ae:	2220      	movs	r2, #32
 80036b0:	189b      	adds	r3, r3, r2
 80036b2:	19db      	adds	r3, r3, r7
 80036b4:	2208      	movs	r2, #8
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e00c      	b.n	80036d4 <UART_SetConfig+0x390>
 80036ba:	231b      	movs	r3, #27
 80036bc:	2220      	movs	r2, #32
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	19db      	adds	r3, r3, r7
 80036c2:	2210      	movs	r2, #16
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e005      	b.n	80036d4 <UART_SetConfig+0x390>
 80036c8:	231b      	movs	r3, #27
 80036ca:	2220      	movs	r2, #32
 80036cc:	189b      	adds	r3, r3, r2
 80036ce:	19db      	adds	r3, r3, r7
 80036d0:	2210      	movs	r2, #16
 80036d2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4ac1      	ldr	r2, [pc, #772]	@ (80039e0 <UART_SetConfig+0x69c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d005      	beq.n	80036ea <UART_SetConfig+0x3a6>
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4ac0      	ldr	r2, [pc, #768]	@ (80039e4 <UART_SetConfig+0x6a0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d000      	beq.n	80036ea <UART_SetConfig+0x3a6>
 80036e8:	e093      	b.n	8003812 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036ea:	231b      	movs	r3, #27
 80036ec:	2220      	movs	r2, #32
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	19db      	adds	r3, r3, r7
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d015      	beq.n	8003724 <UART_SetConfig+0x3e0>
 80036f8:	dc18      	bgt.n	800372c <UART_SetConfig+0x3e8>
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d00d      	beq.n	800371a <UART_SetConfig+0x3d6>
 80036fe:	dc15      	bgt.n	800372c <UART_SetConfig+0x3e8>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <UART_SetConfig+0x3c6>
 8003704:	2b02      	cmp	r3, #2
 8003706:	d005      	beq.n	8003714 <UART_SetConfig+0x3d0>
 8003708:	e010      	b.n	800372c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800370a:	f7fe ff1b 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 800370e:	0003      	movs	r3, r0
 8003710:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003712:	e014      	b.n	800373e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003714:	4bb4      	ldr	r3, [pc, #720]	@ (80039e8 <UART_SetConfig+0x6a4>)
 8003716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003718:	e011      	b.n	800373e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371a:	f7fe fe87 	bl	800242c <HAL_RCC_GetSysClockFreq>
 800371e:	0003      	movs	r3, r0
 8003720:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003722:	e00c      	b.n	800373e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003724:	2380      	movs	r3, #128	@ 0x80
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800372a:	e008      	b.n	800373e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003730:	231a      	movs	r3, #26
 8003732:	2220      	movs	r2, #32
 8003734:	189b      	adds	r3, r3, r2
 8003736:	19db      	adds	r3, r3, r7
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
        break;
 800373c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800373e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003740:	2b00      	cmp	r3, #0
 8003742:	d100      	bne.n	8003746 <UART_SetConfig+0x402>
 8003744:	e135      	b.n	80039b2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800374a:	4ba8      	ldr	r3, [pc, #672]	@ (80039ec <UART_SetConfig+0x6a8>)
 800374c:	0052      	lsls	r2, r2, #1
 800374e:	5ad3      	ldrh	r3, [r2, r3]
 8003750:	0019      	movs	r1, r3
 8003752:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003754:	f7fc fcd6 	bl	8000104 <__udivsi3>
 8003758:	0003      	movs	r3, r0
 800375a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	0013      	movs	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	189b      	adds	r3, r3, r2
 8003766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003768:	429a      	cmp	r2, r3
 800376a:	d305      	bcc.n	8003778 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003774:	429a      	cmp	r2, r3
 8003776:	d906      	bls.n	8003786 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003778:	231a      	movs	r3, #26
 800377a:	2220      	movs	r2, #32
 800377c:	189b      	adds	r3, r3, r2
 800377e:	19db      	adds	r3, r3, r7
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e044      	b.n	8003810 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003792:	4b96      	ldr	r3, [pc, #600]	@ (80039ec <UART_SetConfig+0x6a8>)
 8003794:	0052      	lsls	r2, r2, #1
 8003796:	5ad3      	ldrh	r3, [r2, r3]
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	69b8      	ldr	r0, [r7, #24]
 80037a4:	69f9      	ldr	r1, [r7, #28]
 80037a6:	f7fc fe23 	bl	80003f0 <__aeabi_uldivmod>
 80037aa:	0002      	movs	r2, r0
 80037ac:	000b      	movs	r3, r1
 80037ae:	0e11      	lsrs	r1, r2, #24
 80037b0:	021d      	lsls	r5, r3, #8
 80037b2:	430d      	orrs	r5, r1
 80037b4:	0214      	lsls	r4, r2, #8
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68b8      	ldr	r0, [r7, #8]
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	1900      	adds	r0, r0, r4
 80037c8:	4169      	adcs	r1, r5
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f7fc fe0a 	bl	80003f0 <__aeabi_uldivmod>
 80037dc:	0002      	movs	r2, r0
 80037de:	000b      	movs	r3, r1
 80037e0:	0013      	movs	r3, r2
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e6:	23c0      	movs	r3, #192	@ 0xc0
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d309      	bcc.n	8003802 <UART_SetConfig+0x4be>
 80037ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f0:	2380      	movs	r3, #128	@ 0x80
 80037f2:	035b      	lsls	r3, r3, #13
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d204      	bcs.n	8003802 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	e006      	b.n	8003810 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003802:	231a      	movs	r3, #26
 8003804:	2220      	movs	r2, #32
 8003806:	189b      	adds	r3, r3, r2
 8003808:	19db      	adds	r3, r3, r7
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800380e:	e0d0      	b.n	80039b2 <UART_SetConfig+0x66e>
 8003810:	e0cf      	b.n	80039b2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	2380      	movs	r3, #128	@ 0x80
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	429a      	cmp	r2, r3
 800381c:	d000      	beq.n	8003820 <UART_SetConfig+0x4dc>
 800381e:	e070      	b.n	8003902 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003820:	231b      	movs	r3, #27
 8003822:	2220      	movs	r2, #32
 8003824:	189b      	adds	r3, r3, r2
 8003826:	19db      	adds	r3, r3, r7
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b08      	cmp	r3, #8
 800382c:	d015      	beq.n	800385a <UART_SetConfig+0x516>
 800382e:	dc18      	bgt.n	8003862 <UART_SetConfig+0x51e>
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00d      	beq.n	8003850 <UART_SetConfig+0x50c>
 8003834:	dc15      	bgt.n	8003862 <UART_SetConfig+0x51e>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <UART_SetConfig+0x4fc>
 800383a:	2b02      	cmp	r3, #2
 800383c:	d005      	beq.n	800384a <UART_SetConfig+0x506>
 800383e:	e010      	b.n	8003862 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003840:	f7fe fe80 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8003844:	0003      	movs	r3, r0
 8003846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003848:	e014      	b.n	8003874 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800384a:	4b67      	ldr	r3, [pc, #412]	@ (80039e8 <UART_SetConfig+0x6a4>)
 800384c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800384e:	e011      	b.n	8003874 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003850:	f7fe fdec 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8003854:	0003      	movs	r3, r0
 8003856:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003858:	e00c      	b.n	8003874 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003860:	e008      	b.n	8003874 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003866:	231a      	movs	r3, #26
 8003868:	2220      	movs	r2, #32
 800386a:	189b      	adds	r3, r3, r2
 800386c:	19db      	adds	r3, r3, r7
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
        break;
 8003872:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003876:	2b00      	cmp	r3, #0
 8003878:	d100      	bne.n	800387c <UART_SetConfig+0x538>
 800387a:	e09a      	b.n	80039b2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003880:	4b5a      	ldr	r3, [pc, #360]	@ (80039ec <UART_SetConfig+0x6a8>)
 8003882:	0052      	lsls	r2, r2, #1
 8003884:	5ad3      	ldrh	r3, [r2, r3]
 8003886:	0019      	movs	r1, r3
 8003888:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800388a:	f7fc fc3b 	bl	8000104 <__udivsi3>
 800388e:	0003      	movs	r3, r0
 8003890:	005a      	lsls	r2, r3, #1
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	18d2      	adds	r2, r2, r3
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	0019      	movs	r1, r3
 80038a0:	0010      	movs	r0, r2
 80038a2:	f7fc fc2f 	bl	8000104 <__udivsi3>
 80038a6:	0003      	movs	r3, r0
 80038a8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	2b0f      	cmp	r3, #15
 80038ae:	d921      	bls.n	80038f4 <UART_SetConfig+0x5b0>
 80038b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b2:	2380      	movs	r3, #128	@ 0x80
 80038b4:	025b      	lsls	r3, r3, #9
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d21c      	bcs.n	80038f4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	b29a      	uxth	r2, r3
 80038be:	200e      	movs	r0, #14
 80038c0:	2420      	movs	r4, #32
 80038c2:	1903      	adds	r3, r0, r4
 80038c4:	19db      	adds	r3, r3, r7
 80038c6:	210f      	movs	r1, #15
 80038c8:	438a      	bics	r2, r1
 80038ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2207      	movs	r2, #7
 80038d4:	4013      	ands	r3, r2
 80038d6:	b299      	uxth	r1, r3
 80038d8:	1903      	adds	r3, r0, r4
 80038da:	19db      	adds	r3, r3, r7
 80038dc:	1902      	adds	r2, r0, r4
 80038de:	19d2      	adds	r2, r2, r7
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1902      	adds	r2, r0, r4
 80038ec:	19d2      	adds	r2, r2, r7
 80038ee:	8812      	ldrh	r2, [r2, #0]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	e05e      	b.n	80039b2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80038f4:	231a      	movs	r3, #26
 80038f6:	2220      	movs	r2, #32
 80038f8:	189b      	adds	r3, r3, r2
 80038fa:	19db      	adds	r3, r3, r7
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	e057      	b.n	80039b2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003902:	231b      	movs	r3, #27
 8003904:	2220      	movs	r2, #32
 8003906:	189b      	adds	r3, r3, r2
 8003908:	19db      	adds	r3, r3, r7
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d015      	beq.n	800393c <UART_SetConfig+0x5f8>
 8003910:	dc18      	bgt.n	8003944 <UART_SetConfig+0x600>
 8003912:	2b04      	cmp	r3, #4
 8003914:	d00d      	beq.n	8003932 <UART_SetConfig+0x5ee>
 8003916:	dc15      	bgt.n	8003944 <UART_SetConfig+0x600>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <UART_SetConfig+0x5de>
 800391c:	2b02      	cmp	r3, #2
 800391e:	d005      	beq.n	800392c <UART_SetConfig+0x5e8>
 8003920:	e010      	b.n	8003944 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003922:	f7fe fe0f 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8003926:	0003      	movs	r3, r0
 8003928:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800392a:	e014      	b.n	8003956 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800392c:	4b2e      	ldr	r3, [pc, #184]	@ (80039e8 <UART_SetConfig+0x6a4>)
 800392e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003930:	e011      	b.n	8003956 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003932:	f7fe fd7b 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8003936:	0003      	movs	r3, r0
 8003938:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800393a:	e00c      	b.n	8003956 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003942:	e008      	b.n	8003956 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003948:	231a      	movs	r3, #26
 800394a:	2220      	movs	r2, #32
 800394c:	189b      	adds	r3, r3, r2
 800394e:	19db      	adds	r3, r3, r7
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
        break;
 8003954:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02a      	beq.n	80039b2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003960:	4b22      	ldr	r3, [pc, #136]	@ (80039ec <UART_SetConfig+0x6a8>)
 8003962:	0052      	lsls	r2, r2, #1
 8003964:	5ad3      	ldrh	r3, [r2, r3]
 8003966:	0019      	movs	r1, r3
 8003968:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800396a:	f7fc fbcb 	bl	8000104 <__udivsi3>
 800396e:	0003      	movs	r3, r0
 8003970:	001a      	movs	r2, r3
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	18d2      	adds	r2, r2, r3
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	0019      	movs	r1, r3
 8003980:	0010      	movs	r0, r2
 8003982:	f7fc fbbf 	bl	8000104 <__udivsi3>
 8003986:	0003      	movs	r3, r0
 8003988:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	2b0f      	cmp	r3, #15
 800398e:	d90a      	bls.n	80039a6 <UART_SetConfig+0x662>
 8003990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003992:	2380      	movs	r3, #128	@ 0x80
 8003994:	025b      	lsls	r3, r3, #9
 8003996:	429a      	cmp	r2, r3
 8003998:	d205      	bcs.n	80039a6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800399a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399c:	b29a      	uxth	r2, r3
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	e005      	b.n	80039b2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80039a6:	231a      	movs	r3, #26
 80039a8:	2220      	movs	r2, #32
 80039aa:	189b      	adds	r3, r3, r2
 80039ac:	19db      	adds	r3, r3, r7
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	226a      	movs	r2, #106	@ 0x6a
 80039b6:	2101      	movs	r1, #1
 80039b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	2268      	movs	r2, #104	@ 0x68
 80039be:	2101      	movs	r1, #1
 80039c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	2200      	movs	r2, #0
 80039c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	2200      	movs	r2, #0
 80039cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80039ce:	231a      	movs	r3, #26
 80039d0:	2220      	movs	r2, #32
 80039d2:	189b      	adds	r3, r3, r2
 80039d4:	19db      	adds	r3, r3, r7
 80039d6:	781b      	ldrb	r3, [r3, #0]
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b010      	add	sp, #64	@ 0x40
 80039de:	bdb0      	pop	{r4, r5, r7, pc}
 80039e0:	40008000 	.word	0x40008000
 80039e4:	40008400 	.word	0x40008400
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	08004928 	.word	0x08004928

080039f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	2208      	movs	r2, #8
 80039fe:	4013      	ands	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a4a      	ldr	r2, [pc, #296]	@ (8003b34 <UART_AdvFeatureConfig+0x144>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	2201      	movs	r2, #1
 8003a20:	4013      	ands	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4a43      	ldr	r2, [pc, #268]	@ (8003b38 <UART_AdvFeatureConfig+0x148>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	2202      	movs	r2, #2
 8003a42:	4013      	ands	r3, r2
 8003a44:	d00b      	beq.n	8003a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b3c <UART_AdvFeatureConfig+0x14c>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a62:	2204      	movs	r2, #4
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4a34      	ldr	r2, [pc, #208]	@ (8003b40 <UART_AdvFeatureConfig+0x150>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	2210      	movs	r2, #16
 8003a86:	4013      	ands	r3, r2
 8003a88:	d00b      	beq.n	8003aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a2c      	ldr	r2, [pc, #176]	@ (8003b44 <UART_AdvFeatureConfig+0x154>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	4a25      	ldr	r2, [pc, #148]	@ (8003b48 <UART_AdvFeatureConfig+0x158>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	2240      	movs	r2, #64	@ 0x40
 8003aca:	4013      	ands	r3, r2
 8003acc:	d01d      	beq.n	8003b0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <UART_AdvFeatureConfig+0x15c>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	0019      	movs	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	035b      	lsls	r3, r3, #13
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d10b      	bne.n	8003b0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a15      	ldr	r2, [pc, #84]	@ (8003b50 <UART_AdvFeatureConfig+0x160>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	2280      	movs	r2, #128	@ 0x80
 8003b10:	4013      	ands	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b54 <UART_AdvFeatureConfig+0x164>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	0019      	movs	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b002      	add	sp, #8
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	ffff7fff 	.word	0xffff7fff
 8003b38:	fffdffff 	.word	0xfffdffff
 8003b3c:	fffeffff 	.word	0xfffeffff
 8003b40:	fffbffff 	.word	0xfffbffff
 8003b44:	ffffefff 	.word	0xffffefff
 8003b48:	ffffdfff 	.word	0xffffdfff
 8003b4c:	ffefffff 	.word	0xffefffff
 8003b50:	ff9fffff 	.word	0xff9fffff
 8003b54:	fff7ffff 	.word	0xfff7ffff

08003b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b092      	sub	sp, #72	@ 0x48
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2290      	movs	r2, #144	@ 0x90
 8003b64:	2100      	movs	r1, #0
 8003b66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b68:	f7fd f97e 	bl	8000e68 <HAL_GetTick>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2208      	movs	r2, #8
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d12d      	bne.n	8003bda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b80:	2280      	movs	r2, #128	@ 0x80
 8003b82:	0391      	lsls	r1, r2, #14
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4a47      	ldr	r2, [pc, #284]	@ (8003ca4 <UART_CheckIdleState+0x14c>)
 8003b88:	9200      	str	r2, [sp, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f000 f88e 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 8003b90:	1e03      	subs	r3, r0, #0
 8003b92:	d022      	beq.n	8003bda <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b94:	f3ef 8310 	mrs	r3, PRIMASK
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2180      	movs	r1, #128	@ 0x80
 8003bb6:	438a      	bics	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2288      	movs	r2, #136	@ 0x88
 8003bca:	2120      	movs	r1, #32
 8003bcc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2284      	movs	r2, #132	@ 0x84
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e060      	b.n	8003c9c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2204      	movs	r2, #4
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d146      	bne.n	8003c76 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bea:	2280      	movs	r2, #128	@ 0x80
 8003bec:	03d1      	lsls	r1, r2, #15
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca4 <UART_CheckIdleState+0x14c>)
 8003bf2:	9200      	str	r2, [sp, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f000 f859 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d03b      	beq.n	8003c76 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003c02:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c04:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c08:	2301      	movs	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f383 8810 	msr	PRIMASK, r3
}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4922      	ldr	r1, [pc, #136]	@ (8003ca8 <UART_CheckIdleState+0x150>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f383 8810 	msr	PRIMASK, r3
}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c30:	f3ef 8310 	mrs	r3, PRIMASK
 8003c34:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c36:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f383 8810 	msr	PRIMASK, r3
}
 8003c44:	46c0      	nop			@ (mov r8, r8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	438a      	bics	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	228c      	movs	r2, #140	@ 0x8c
 8003c66:	2120      	movs	r1, #32
 8003c68:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2284      	movs	r2, #132	@ 0x84
 8003c6e:	2100      	movs	r1, #0
 8003c70:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e012      	b.n	8003c9c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2288      	movs	r2, #136	@ 0x88
 8003c7a:	2120      	movs	r1, #32
 8003c7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	228c      	movs	r2, #140	@ 0x8c
 8003c82:	2120      	movs	r1, #32
 8003c84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2284      	movs	r2, #132	@ 0x84
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b010      	add	sp, #64	@ 0x40
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	01ffffff 	.word	0x01ffffff
 8003ca8:	fffffedf 	.word	0xfffffedf

08003cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbc:	e051      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d04e      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7fd f8d0 	bl	8000e68 <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <UART_WaitOnFlagUntilTimeout+0x2e>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e051      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d03b      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b80      	cmp	r3, #128	@ 0x80
 8003cee:	d038      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d035      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d111      	bne.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2208      	movs	r2, #8
 8003d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f000 f922 	bl	8003f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2290      	movs	r2, #144	@ 0x90
 8003d18:	2108      	movs	r1, #8
 8003d1a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2284      	movs	r2, #132	@ 0x84
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e02c      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	2380      	movs	r3, #128	@ 0x80
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	401a      	ands	r2, r3
 8003d34:	2380      	movs	r3, #128	@ 0x80
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d112      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2280      	movs	r2, #128	@ 0x80
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 f905 	bl	8003f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2290      	movs	r2, #144	@ 0x90
 8003d52:	2120      	movs	r1, #32
 8003d54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2284      	movs	r2, #132	@ 0x84
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e00f      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	425a      	negs	r2, r3
 8003d72:	4153      	adcs	r3, r2
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	001a      	movs	r2, r3
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d09e      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b004      	add	sp, #16
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b090      	sub	sp, #64	@ 0x40
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	1dbb      	adds	r3, r7, #6
 8003d98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1dba      	adds	r2, r7, #6
 8003da4:	215c      	movs	r1, #92	@ 0x5c
 8003da6:	8812      	ldrh	r2, [r2, #0]
 8003da8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2290      	movs	r2, #144	@ 0x90
 8003dae:	2100      	movs	r1, #0
 8003db0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	228c      	movs	r2, #140	@ 0x8c
 8003db6:	2122      	movs	r1, #34	@ 0x22
 8003db8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2280      	movs	r2, #128	@ 0x80
 8003dbe:	589b      	ldr	r3, [r3, r2]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02d      	beq.n	8003e20 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2280      	movs	r2, #128	@ 0x80
 8003dc8:	589b      	ldr	r3, [r3, r2]
 8003dca:	4a40      	ldr	r2, [pc, #256]	@ (8003ecc <UART_Start_Receive_DMA+0x140>)
 8003dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2280      	movs	r2, #128	@ 0x80
 8003dd2:	589b      	ldr	r3, [r3, r2]
 8003dd4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ed0 <UART_Start_Receive_DMA+0x144>)
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2280      	movs	r2, #128	@ 0x80
 8003ddc:	589b      	ldr	r3, [r3, r2]
 8003dde:	4a3d      	ldr	r2, [pc, #244]	@ (8003ed4 <UART_Start_Receive_DMA+0x148>)
 8003de0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2280      	movs	r2, #128	@ 0x80
 8003de6:	589b      	ldr	r3, [r3, r2]
 8003de8:	2200      	movs	r2, #0
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2280      	movs	r2, #128	@ 0x80
 8003df0:	5898      	ldr	r0, [r3, r2]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3324      	adds	r3, #36	@ 0x24
 8003df8:	0019      	movs	r1, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	001a      	movs	r2, r3
 8003e00:	1dbb      	adds	r3, r7, #6
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	f7fd f9fe 	bl	8001204 <HAL_DMA_Start_IT>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d009      	beq.n	8003e20 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2290      	movs	r2, #144	@ 0x90
 8003e10:	2110      	movs	r1, #16
 8003e12:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	228c      	movs	r2, #140	@ 0x8c
 8003e18:	2120      	movs	r1, #32
 8003e1a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e050      	b.n	8003ec2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d019      	beq.n	8003e5c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e28:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e32:	2301      	movs	r3, #1
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	f383 8810 	msr	PRIMASK, r3
}
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2180      	movs	r1, #128	@ 0x80
 8003e4a:	0049      	lsls	r1, r1, #1
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e52:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	f383 8810 	msr	PRIMASK, r3
}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e60:	613b      	str	r3, [r7, #16]
  return(result);
 8003e62:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e66:	2301      	movs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f383 8810 	msr	PRIMASK, r3
}
 8003e70:	46c0      	nop			@ (mov r8, r8)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f383 8810 	msr	PRIMASK, r3
}
 8003e8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e94:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e98:	2301      	movs	r3, #1
 8003e9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2140      	movs	r1, #64	@ 0x40
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b010      	add	sp, #64	@ 0x40
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	08004025 	.word	0x08004025
 8003ed0:	08004155 	.word	0x08004155
 8003ed4:	08004197 	.word	0x08004197

08003ed8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	@ 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eea:	2301      	movs	r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f383 8810 	msr	PRIMASK, r3
}
 8003ef4:	46c0      	nop			@ (mov r8, r8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	21c0      	movs	r1, #192	@ 0xc0
 8003f02:	438a      	bics	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f12:	f3ef 8310 	mrs	r3, PRIMASK
 8003f16:	617b      	str	r3, [r7, #20]
  return(result);
 8003f18:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003f1a:	623b      	str	r3, [r7, #32]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f383 8810 	msr	PRIMASK, r3
}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4908      	ldr	r1, [pc, #32]	@ (8003f54 <UART_EndTxTransfer+0x7c>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2288      	movs	r2, #136	@ 0x88
 8003f48:	2120      	movs	r1, #32
 8003f4a:	5099      	str	r1, [r3, r2]
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b00a      	add	sp, #40	@ 0x28
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	ff7fffff 	.word	0xff7fffff

08003f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08e      	sub	sp, #56	@ 0x38
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f60:	f3ef 8310 	mrs	r3, PRIMASK
 8003f64:	617b      	str	r3, [r7, #20]
  return(result);
 8003f66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			@ (mov r8, r8)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4926      	ldr	r1, [pc, #152]	@ (800401c <UART_EndRxTransfer+0xc4>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	623b      	str	r3, [r7, #32]
  return(result);
 8003f98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	491b      	ldr	r1, [pc, #108]	@ (8004020 <UART_EndRxTransfer+0xc8>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d118      	bne.n	8003ffe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			@ (mov r8, r8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2110      	movs	r1, #16
 8003fee:	438a      	bics	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	228c      	movs	r2, #140	@ 0x8c
 8004002:	2120      	movs	r1, #32
 8004004:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b00e      	add	sp, #56	@ 0x38
 8004018:	bd80      	pop	{r7, pc}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	fffffedf 	.word	0xfffffedf
 8004020:	effffffe 	.word	0xeffffffe

08004024 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b094      	sub	sp, #80	@ 0x50
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2220      	movs	r2, #32
 800403a:	4013      	ands	r3, r2
 800403c:	d16f      	bne.n	800411e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800403e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004040:	225e      	movs	r2, #94	@ 0x5e
 8004042:	2100      	movs	r1, #0
 8004044:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004046:	f3ef 8310 	mrs	r3, PRIMASK
 800404a:	61bb      	str	r3, [r7, #24]
  return(result);
 800404c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800404e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004050:	2301      	movs	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	493a      	ldr	r1, [pc, #232]	@ (8004150 <UART_DMAReceiveCplt+0x12c>)
 8004068:	400a      	ands	r2, r1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800406e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f383 8810 	msr	PRIMASK, r3
}
 8004076:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004078:	f3ef 8310 	mrs	r3, PRIMASK
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	647b      	str	r3, [r7, #68]	@ 0x44
 8004082:	2301      	movs	r3, #1
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	438a      	bics	r2, r1
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040aa:	f3ef 8310 	mrs	r3, PRIMASK
 80040ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80040b4:	2301      	movs	r3, #1
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2140      	movs	r1, #64	@ 0x40
 80040cc:	438a      	bics	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	f383 8810 	msr	PRIMASK, r3
}
 80040da:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040de:	228c      	movs	r2, #140	@ 0x8c
 80040e0:	2120      	movs	r1, #32
 80040e2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d118      	bne.n	800411e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ec:	f3ef 8310 	mrs	r3, PRIMASK
 80040f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80040f2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f6:	2301      	movs	r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f383 8810 	msr	PRIMASK, r3
}
 8004100:	46c0      	nop			@ (mov r8, r8)
 8004102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2110      	movs	r1, #16
 800410e:	438a      	bics	r2, r1
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f383 8810 	msr	PRIMASK, r3
}
 800411c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004120:	2200      	movs	r2, #0
 8004122:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d108      	bne.n	800413e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800412e:	225c      	movs	r2, #92	@ 0x5c
 8004130:	5a9a      	ldrh	r2, [r3, r2]
 8004132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004134:	0011      	movs	r1, r2
 8004136:	0018      	movs	r0, r3
 8004138:	f7ff f8f8 	bl	800332c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800413c:	e003      	b.n	8004146 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800413e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004140:	0018      	movs	r0, r3
 8004142:	f7fc fafd 	bl	8000740 <HAL_UART_RxCpltCallback>
}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	b014      	add	sp, #80	@ 0x50
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	fffffeff 	.word	0xfffffeff

08004154 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10a      	bne.n	8004186 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	225c      	movs	r2, #92	@ 0x5c
 8004174:	5a9b      	ldrh	r3, [r3, r2]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f7ff f8d4 	bl	800332c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004184:	e003      	b.n	800418e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff f8bf 	bl	800330c <HAL_UART_RxHalfCpltCallback>
}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2288      	movs	r2, #136	@ 0x88
 80041a8:	589b      	ldr	r3, [r3, r2]
 80041aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	228c      	movs	r2, #140	@ 0x8c
 80041b0:	589b      	ldr	r3, [r3, r2]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2280      	movs	r2, #128	@ 0x80
 80041bc:	4013      	ands	r3, r2
 80041be:	2b80      	cmp	r3, #128	@ 0x80
 80041c0:	d10a      	bne.n	80041d8 <UART_DMAError+0x42>
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b21      	cmp	r3, #33	@ 0x21
 80041c6:	d107      	bne.n	80041d8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2256      	movs	r2, #86	@ 0x56
 80041cc:	2100      	movs	r1, #0
 80041ce:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7ff fe80 	bl	8003ed8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2240      	movs	r2, #64	@ 0x40
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b40      	cmp	r3, #64	@ 0x40
 80041e4:	d10a      	bne.n	80041fc <UART_DMAError+0x66>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b22      	cmp	r3, #34	@ 0x22
 80041ea:	d107      	bne.n	80041fc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	225e      	movs	r2, #94	@ 0x5e
 80041f0:	2100      	movs	r1, #0
 80041f2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7ff feae 	bl	8003f58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2290      	movs	r2, #144	@ 0x90
 8004200:	589b      	ldr	r3, [r3, r2]
 8004202:	2210      	movs	r2, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2190      	movs	r1, #144	@ 0x90
 800420a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff f884 	bl	800331c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004214:	46c0      	nop			@ (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b006      	add	sp, #24
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	225e      	movs	r2, #94	@ 0x5e
 800422e:	2100      	movs	r1, #0
 8004230:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2256      	movs	r2, #86	@ 0x56
 8004236:	2100      	movs	r1, #0
 8004238:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff f86d 	bl	800331c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	46bd      	mov	sp, r7
 8004246:	b004      	add	sp, #16
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b08a      	sub	sp, #40	@ 0x28
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2288      	movs	r2, #136	@ 0x88
 8004256:	589b      	ldr	r3, [r3, r2]
 8004258:	2b21      	cmp	r3, #33	@ 0x21
 800425a:	d14c      	bne.n	80042f6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2256      	movs	r2, #86	@ 0x56
 8004260:	5a9b      	ldrh	r3, [r3, r2]
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d132      	bne.n	80042ce <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004268:	f3ef 8310 	mrs	r3, PRIMASK
 800426c:	60bb      	str	r3, [r7, #8]
  return(result);
 800426e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
 8004272:	2301      	movs	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f383 8810 	msr	PRIMASK, r3
}
 800427c:	46c0      	nop			@ (mov r8, r8)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2180      	movs	r1, #128	@ 0x80
 800428a:	438a      	bics	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f383 8810 	msr	PRIMASK, r3
}
 8004298:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429a:	f3ef 8310 	mrs	r3, PRIMASK
 800429e:	617b      	str	r3, [r7, #20]
  return(result);
 80042a0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042a2:	623b      	str	r3, [r7, #32]
 80042a4:	2301      	movs	r3, #1
 80042a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f383 8810 	msr	PRIMASK, r3
}
 80042ae:	46c0      	nop			@ (mov r8, r8)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2140      	movs	r1, #64	@ 0x40
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f383 8810 	msr	PRIMASK, r3
}
 80042ca:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80042cc:	e013      	b.n	80042f6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2256      	movs	r2, #86	@ 0x56
 80042e8:	5a9b      	ldrh	r3, [r3, r2]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b299      	uxth	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2256      	movs	r2, #86	@ 0x56
 80042f4:	5299      	strh	r1, [r3, r2]
}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b00a      	add	sp, #40	@ 0x28
 80042fc:	bd80      	pop	{r7, pc}

080042fe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b08c      	sub	sp, #48	@ 0x30
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2288      	movs	r2, #136	@ 0x88
 800430a:	589b      	ldr	r3, [r3, r2]
 800430c:	2b21      	cmp	r3, #33	@ 0x21
 800430e:	d151      	bne.n	80043b4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2256      	movs	r2, #86	@ 0x56
 8004314:	5a9b      	ldrh	r3, [r3, r2]
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d132      	bne.n	8004382 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431c:	f3ef 8310 	mrs	r3, PRIMASK
 8004320:	60fb      	str	r3, [r7, #12]
  return(result);
 8004322:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004326:	2301      	movs	r3, #1
 8004328:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			@ (mov r8, r8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2180      	movs	r1, #128	@ 0x80
 800433e:	438a      	bics	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800434e:	f3ef 8310 	mrs	r3, PRIMASK
 8004352:	61bb      	str	r3, [r7, #24]
  return(result);
 8004354:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
 8004358:	2301      	movs	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f383 8810 	msr	PRIMASK, r3
}
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2140      	movs	r1, #64	@ 0x40
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	f383 8810 	msr	PRIMASK, r3
}
 800437e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004380:	e018      	b.n	80043b4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	001a      	movs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	05d2      	lsls	r2, r2, #23
 8004394:	0dd2      	lsrs	r2, r2, #23
 8004396:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	1c9a      	adds	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2256      	movs	r2, #86	@ 0x56
 80043a6:	5a9b      	ldrh	r3, [r3, r2]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b299      	uxth	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2256      	movs	r2, #86	@ 0x56
 80043b2:	5299      	strh	r1, [r3, r2]
}
 80043b4:	46c0      	nop			@ (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b00c      	add	sp, #48	@ 0x30
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	@ 0x30
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2288      	movs	r2, #136	@ 0x88
 80043c8:	589b      	ldr	r3, [r3, r2]
 80043ca:	2b21      	cmp	r3, #33	@ 0x21
 80043cc:	d165      	bne.n	800449a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80043ce:	232e      	movs	r3, #46	@ 0x2e
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	216a      	movs	r1, #106	@ 0x6a
 80043d6:	5a52      	ldrh	r2, [r2, r1]
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	e059      	b.n	8004490 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2256      	movs	r2, #86	@ 0x56
 80043e0:	5a9b      	ldrh	r3, [r3, r2]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d133      	bne.n	8004450 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80043f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043f2:	2301      	movs	r3, #1
 80043f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4926      	ldr	r1, [pc, #152]	@ (80044a4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800440a:	400a      	ands	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f383 8810 	msr	PRIMASK, r3
}
 8004418:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441a:	f3ef 8310 	mrs	r3, PRIMASK
 800441e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004420:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24
 8004424:	2301      	movs	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2140      	movs	r1, #64	@ 0x40
 800443c:	430a      	orrs	r2, r1
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f383 8810 	msr	PRIMASK, r3
}
 800444a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800444c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800444e:	e024      	b.n	800449a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	2280      	movs	r2, #128	@ 0x80
 8004458:	4013      	ands	r3, r2
 800445a:	d013      	beq.n	8004484 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2256      	movs	r2, #86	@ 0x56
 8004476:	5a9b      	ldrh	r3, [r3, r2]
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b299      	uxth	r1, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2256      	movs	r2, #86	@ 0x56
 8004482:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004484:	212e      	movs	r1, #46	@ 0x2e
 8004486:	187b      	adds	r3, r7, r1
 8004488:	881a      	ldrh	r2, [r3, #0]
 800448a:	187b      	adds	r3, r7, r1
 800448c:	3a01      	subs	r2, #1
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	232e      	movs	r3, #46	@ 0x2e
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1a0      	bne.n	80043dc <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b00c      	add	sp, #48	@ 0x30
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	ff7fffff 	.word	0xff7fffff

080044a8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08c      	sub	sp, #48	@ 0x30
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2288      	movs	r2, #136	@ 0x88
 80044b4:	589b      	ldr	r3, [r3, r2]
 80044b6:	2b21      	cmp	r3, #33	@ 0x21
 80044b8:	d16a      	bne.n	8004590 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80044ba:	232e      	movs	r3, #46	@ 0x2e
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	216a      	movs	r1, #106	@ 0x6a
 80044c2:	5a52      	ldrh	r2, [r2, r1]
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	e05e      	b.n	8004586 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2256      	movs	r2, #86	@ 0x56
 80044cc:	5a9b      	ldrh	r3, [r3, r2]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d133      	bne.n	800453c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d4:	f3ef 8310 	mrs	r3, PRIMASK
 80044d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80044da:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044de:	2301      	movs	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f383 8810 	msr	PRIMASK, r3
}
 80044e8:	46c0      	nop			@ (mov r8, r8)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4928      	ldr	r1, [pc, #160]	@ (8004598 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f383 8810 	msr	PRIMASK, r3
}
 8004504:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004506:	f3ef 8310 	mrs	r3, PRIMASK
 800450a:	617b      	str	r3, [r7, #20]
  return(result);
 800450c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	2301      	movs	r3, #1
 8004512:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f383 8810 	msr	PRIMASK, r3
}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2140      	movs	r1, #64	@ 0x40
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f383 8810 	msr	PRIMASK, r3
}
 8004536:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004538:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800453a:	e029      	b.n	8004590 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	2280      	movs	r2, #128	@ 0x80
 8004544:	4013      	ands	r3, r2
 8004546:	d018      	beq.n	800457a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	001a      	movs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	05d2      	lsls	r2, r2, #23
 800455a:	0dd2      	lsrs	r2, r2, #23
 800455c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004562:	1c9a      	adds	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2256      	movs	r2, #86	@ 0x56
 800456c:	5a9b      	ldrh	r3, [r3, r2]
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b299      	uxth	r1, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2256      	movs	r2, #86	@ 0x56
 8004578:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800457a:	212e      	movs	r1, #46	@ 0x2e
 800457c:	187b      	adds	r3, r7, r1
 800457e:	881a      	ldrh	r2, [r3, #0]
 8004580:	187b      	adds	r3, r7, r1
 8004582:	3a01      	subs	r2, #1
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	232e      	movs	r3, #46	@ 0x2e
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d19b      	bne.n	80044c8 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004590:	46c0      	nop			@ (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b00c      	add	sp, #48	@ 0x30
 8004596:	bd80      	pop	{r7, pc}
 8004598:	ff7fffff 	.word	0xff7fffff

0800459c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a4:	f3ef 8310 	mrs	r3, PRIMASK
 80045a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045aa:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	2301      	movs	r3, #1
 80045b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f383 8810 	msr	PRIMASK, r3
}
 80045b8:	46c0      	nop			@ (mov r8, r8)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2140      	movs	r1, #64	@ 0x40
 80045c6:	438a      	bics	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f383 8810 	msr	PRIMASK, r3
}
 80045d4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2288      	movs	r2, #136	@ 0x88
 80045da:	2120      	movs	r1, #32
 80045dc:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	0018      	movs	r0, r3
 80045e8:	f7fe fe88 	bl	80032fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ec:	46c0      	nop			@ (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b006      	add	sp, #24
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b002      	add	sp, #8
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800460c:	46c0      	nop			@ (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800461c:	46c0      	nop			@ (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2284      	movs	r2, #132	@ 0x84
 8004630:	5c9b      	ldrb	r3, [r3, r2]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_UARTEx_DisableFifoMode+0x16>
 8004636:	2302      	movs	r3, #2
 8004638:	e027      	b.n	800468a <HAL_UARTEx_DisableFifoMode+0x66>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2284      	movs	r2, #132	@ 0x84
 800463e:	2101      	movs	r1, #1
 8004640:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2288      	movs	r2, #136	@ 0x88
 8004646:	2124      	movs	r1, #36	@ 0x24
 8004648:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2101      	movs	r1, #1
 800465e:	438a      	bics	r2, r1
 8004660:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a0b      	ldr	r2, [pc, #44]	@ (8004694 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004666:	4013      	ands	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2288      	movs	r2, #136	@ 0x88
 800467c:	2120      	movs	r1, #32
 800467e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2284      	movs	r2, #132	@ 0x84
 8004684:	2100      	movs	r1, #0
 8004686:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b004      	add	sp, #16
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	dfffffff 	.word	0xdfffffff

08004698 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2284      	movs	r2, #132	@ 0x84
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e02e      	b.n	800470e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2284      	movs	r2, #132	@ 0x84
 80046b4:	2101      	movs	r1, #1
 80046b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2288      	movs	r2, #136	@ 0x88
 80046bc:	2124      	movs	r1, #36	@ 0x24
 80046be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2101      	movs	r1, #1
 80046d4:	438a      	bics	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	08d9      	lsrs	r1, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f000 f854 	bl	800479c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2288      	movs	r2, #136	@ 0x88
 8004700:	2120      	movs	r1, #32
 8004702:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2284      	movs	r2, #132	@ 0x84
 8004708:	2100      	movs	r1, #0
 800470a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2284      	movs	r2, #132	@ 0x84
 8004726:	5c9b      	ldrb	r3, [r3, r2]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e02f      	b.n	8004790 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2284      	movs	r2, #132	@ 0x84
 8004734:	2101      	movs	r1, #1
 8004736:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2288      	movs	r2, #136	@ 0x88
 800473c:	2124      	movs	r1, #36	@ 0x24
 800473e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2101      	movs	r1, #1
 8004754:	438a      	bics	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	4a0e      	ldr	r2, [pc, #56]	@ (8004798 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004760:	4013      	ands	r3, r2
 8004762:	0019      	movs	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f000 f813 	bl	800479c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2288      	movs	r2, #136	@ 0x88
 8004782:	2120      	movs	r1, #32
 8004784:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2284      	movs	r2, #132	@ 0x84
 800478a:	2100      	movs	r1, #0
 800478c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b004      	add	sp, #16
 8004796:	bd80      	pop	{r7, pc}
 8004798:	f1ffffff 	.word	0xf1ffffff

0800479c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d108      	bne.n	80047be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	226a      	movs	r2, #106	@ 0x6a
 80047b0:	2101      	movs	r1, #1
 80047b2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2268      	movs	r2, #104	@ 0x68
 80047b8:	2101      	movs	r1, #1
 80047ba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047bc:	e043      	b.n	8004846 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047be:	260f      	movs	r6, #15
 80047c0:	19bb      	adds	r3, r7, r6
 80047c2:	2208      	movs	r2, #8
 80047c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047c6:	200e      	movs	r0, #14
 80047c8:	183b      	adds	r3, r7, r0
 80047ca:	2208      	movs	r2, #8
 80047cc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	0e5b      	lsrs	r3, r3, #25
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	240d      	movs	r4, #13
 80047da:	193b      	adds	r3, r7, r4
 80047dc:	2107      	movs	r1, #7
 80047de:	400a      	ands	r2, r1
 80047e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	0f5b      	lsrs	r3, r3, #29
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	250c      	movs	r5, #12
 80047ee:	197b      	adds	r3, r7, r5
 80047f0:	2107      	movs	r1, #7
 80047f2:	400a      	ands	r2, r1
 80047f4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047f6:	183b      	adds	r3, r7, r0
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	197a      	adds	r2, r7, r5
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	4914      	ldr	r1, [pc, #80]	@ (8004850 <UARTEx_SetNbDataToProcess+0xb4>)
 8004800:	5c8a      	ldrb	r2, [r1, r2]
 8004802:	435a      	muls	r2, r3
 8004804:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004806:	197b      	adds	r3, r7, r5
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	4a12      	ldr	r2, [pc, #72]	@ (8004854 <UARTEx_SetNbDataToProcess+0xb8>)
 800480c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800480e:	0019      	movs	r1, r3
 8004810:	f7fb fd02 	bl	8000218 <__divsi3>
 8004814:	0003      	movs	r3, r0
 8004816:	b299      	uxth	r1, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	226a      	movs	r2, #106	@ 0x6a
 800481c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800481e:	19bb      	adds	r3, r7, r6
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	193a      	adds	r2, r7, r4
 8004824:	7812      	ldrb	r2, [r2, #0]
 8004826:	490a      	ldr	r1, [pc, #40]	@ (8004850 <UARTEx_SetNbDataToProcess+0xb4>)
 8004828:	5c8a      	ldrb	r2, [r1, r2]
 800482a:	435a      	muls	r2, r3
 800482c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800482e:	193b      	adds	r3, r7, r4
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	4a08      	ldr	r2, [pc, #32]	@ (8004854 <UARTEx_SetNbDataToProcess+0xb8>)
 8004834:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004836:	0019      	movs	r1, r3
 8004838:	f7fb fcee 	bl	8000218 <__divsi3>
 800483c:	0003      	movs	r3, r0
 800483e:	b299      	uxth	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2268      	movs	r2, #104	@ 0x68
 8004844:	5299      	strh	r1, [r3, r2]
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b005      	add	sp, #20
 800484c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	08004940 	.word	0x08004940
 8004854:	08004948 	.word	0x08004948

08004858 <memset>:
 8004858:	0003      	movs	r3, r0
 800485a:	1882      	adds	r2, r0, r2
 800485c:	4293      	cmp	r3, r2
 800485e:	d100      	bne.n	8004862 <memset+0xa>
 8004860:	4770      	bx	lr
 8004862:	7019      	strb	r1, [r3, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	e7f9      	b.n	800485c <memset+0x4>

08004868 <__libc_init_array>:
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	2600      	movs	r6, #0
 800486c:	4c0c      	ldr	r4, [pc, #48]	@ (80048a0 <__libc_init_array+0x38>)
 800486e:	4d0d      	ldr	r5, [pc, #52]	@ (80048a4 <__libc_init_array+0x3c>)
 8004870:	1b64      	subs	r4, r4, r5
 8004872:	10a4      	asrs	r4, r4, #2
 8004874:	42a6      	cmp	r6, r4
 8004876:	d109      	bne.n	800488c <__libc_init_array+0x24>
 8004878:	2600      	movs	r6, #0
 800487a:	f000 f819 	bl	80048b0 <_init>
 800487e:	4c0a      	ldr	r4, [pc, #40]	@ (80048a8 <__libc_init_array+0x40>)
 8004880:	4d0a      	ldr	r5, [pc, #40]	@ (80048ac <__libc_init_array+0x44>)
 8004882:	1b64      	subs	r4, r4, r5
 8004884:	10a4      	asrs	r4, r4, #2
 8004886:	42a6      	cmp	r6, r4
 8004888:	d105      	bne.n	8004896 <__libc_init_array+0x2e>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	00b3      	lsls	r3, r6, #2
 800488e:	58eb      	ldr	r3, [r5, r3]
 8004890:	4798      	blx	r3
 8004892:	3601      	adds	r6, #1
 8004894:	e7ee      	b.n	8004874 <__libc_init_array+0xc>
 8004896:	00b3      	lsls	r3, r6, #2
 8004898:	58eb      	ldr	r3, [r5, r3]
 800489a:	4798      	blx	r3
 800489c:	3601      	adds	r6, #1
 800489e:	e7f2      	b.n	8004886 <__libc_init_array+0x1e>
 80048a0:	08004958 	.word	0x08004958
 80048a4:	08004958 	.word	0x08004958
 80048a8:	0800495c 	.word	0x0800495c
 80048ac:	08004958 	.word	0x08004958

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
