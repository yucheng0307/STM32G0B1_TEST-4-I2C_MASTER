
TEST-2-UART_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049dc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b20  08004b20  0000602c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b20  08004b20  00005b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b28  08004b28  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b28  08004b28  00005b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b2c  08004b2c  00005b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08004b30  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000002c  08004b5c  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004b5c  00006180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4c3  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8d  00000000  00000000  00012517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  000144a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075f  00000000  00000000  00014e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad6c  00000000  00000000  0001559f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d112  00000000  00000000  0003030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad4a0  00000000  00000000  0003d41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea8bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c8  00000000  00000000  000ea900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ec9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000002c 	.word	0x2000002c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004a80 	.word	0x08004a80

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000030 	.word	0x20000030
 8000100:	08004a80 	.word	0x08004a80

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 f9fb 	bl	8004a28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b2a      	ldr	r3, [pc, #168]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <MX_GPIO_Init+0xc0>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fe82 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2280      	movs	r2, #128	@ 0x80
 800068c:	0192      	lsls	r2, r2, #6
 800068e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2288      	movs	r2, #136	@ 0x88
 8000694:	0352      	lsls	r2, r2, #13
 8000696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 80006a2:	0019      	movs	r1, r3
 80006a4:	0010      	movs	r0, r2
 80006a6:	f000 fd05 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006aa:	0021      	movs	r1, r4
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2220      	movs	r2, #32
 80006b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006c4:	187a      	adds	r2, r7, r1
 80006c6:	23a0      	movs	r3, #160	@ 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fcf1 	bl	80010b4 <HAL_GPIO_Init>

}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b009      	add	sp, #36	@ 0x24
 80006d8:	bd90      	pop	{r4, r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	40021000 	.word	0x40021000
 80006e0:	50000800 	.word	0x50000800

080006e4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a11      	ldr	r2, [pc, #68]	@ (8000738 <HAL_UART_RxCpltCallback+0x54>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d10b      	bne.n	800070e <HAL_UART_RxCpltCallback+0x2a>
	{
		//answer to host
		HAL_UART_Transmit_IT(&huart1,tx1_buff,sizeof(tx1_buff));
 80006f6:	4911      	ldr	r1, [pc, #68]	@ (800073c <HAL_UART_RxCpltCallback+0x58>)
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <HAL_UART_RxCpltCallback+0x5c>)
 80006fa:	220d      	movs	r2, #13
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fe4b 	bl	8002398 <HAL_UART_Transmit_IT>
		// reset receive int
		HAL_UART_Receive_IT(&huart1,rx1_buff,sizeof(rx1_buff));
 8000702:	4910      	ldr	r1, [pc, #64]	@ (8000744 <HAL_UART_RxCpltCallback+0x60>)
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_UART_RxCpltCallback+0x5c>)
 8000706:	2204      	movs	r2, #4
 8000708:	0018      	movs	r0, r3
 800070a:	f001 feed 	bl	80024e8 <HAL_UART_Receive_IT>
	}

	if(huart->Instance==USART2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <HAL_UART_RxCpltCallback+0x64>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d10b      	bne.n	8000730 <HAL_UART_RxCpltCallback+0x4c>
	{
		//answer to host
		HAL_UART_Transmit_IT(&huart2,tx2_buff,sizeof(tx2_buff));
 8000718:	490c      	ldr	r1, [pc, #48]	@ (800074c <HAL_UART_RxCpltCallback+0x68>)
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <HAL_UART_RxCpltCallback+0x6c>)
 800071c:	220d      	movs	r2, #13
 800071e:	0018      	movs	r0, r3
 8000720:	f001 fe3a 	bl	8002398 <HAL_UART_Transmit_IT>
		// reset receive int
		HAL_UART_Receive_IT(&huart2,rx2_buff,sizeof(rx2_buff));
 8000724:	490b      	ldr	r1, [pc, #44]	@ (8000754 <HAL_UART_RxCpltCallback+0x70>)
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <HAL_UART_RxCpltCallback+0x6c>)
 8000728:	2204      	movs	r2, #4
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fedc 	bl	80024e8 <HAL_UART_Receive_IT>
	}
}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40013800 	.word	0x40013800
 800073c:	20000000 	.word	0x20000000
 8000740:	20000054 	.word	0x20000054
 8000744:	20000048 	.word	0x20000048
 8000748:	40004400 	.word	0x40004400
 800074c:	20000010 	.word	0x20000010
 8000750:	200000e8 	.word	0x200000e8
 8000754:	2000004c 	.word	0x2000004c

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 fa68 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f822 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f7ff ff5a 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000768:	f000 f930 	bl	80009cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800076c:	f000 f8e0 	bl	8000930 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,rx1_buff,sizeof(rx1_buff));//receive int enable
 8000770:	4908      	ldr	r1, [pc, #32]	@ (8000794 <main+0x3c>)
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <main+0x40>)
 8000774:	2204      	movs	r2, #4
 8000776:	0018      	movs	r0, r3
 8000778:	f001 feb6 	bl	80024e8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,rx2_buff,sizeof(rx2_buff));//receive int enable
 800077c:	4907      	ldr	r1, [pc, #28]	@ (800079c <main+0x44>)
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <main+0x48>)
 8000780:	2204      	movs	r2, #4
 8000782:	0018      	movs	r0, r3
 8000784:	f001 feb0 	bl	80024e8 <HAL_UART_Receive_IT>
  i=sizeof(tx1_buff);
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <main+0x4c>)
 800078a:	220d      	movs	r2, #13
 800078c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	e7fd      	b.n	800078e <main+0x36>
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	20000048 	.word	0x20000048
 8000798:	20000054 	.word	0x20000054
 800079c:	2000004c 	.word	0x2000004c
 80007a0:	200000e8 	.word	0x200000e8
 80007a4:	20000050 	.word	0x20000050

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b095      	sub	sp, #84	@ 0x54
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	2414      	movs	r4, #20
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	233c      	movs	r3, #60	@ 0x3c
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f004 f935 	bl	8004a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	0018      	movs	r0, r3
 80007c2:	2310      	movs	r3, #16
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f004 f92e 	bl	8004a28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2380      	movs	r3, #128	@ 0x80
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fdf9 	bl	80013c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2202      	movs	r2, #2
 80007da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2280      	movs	r2, #128	@ 0x80
 80007e0:	0052      	lsls	r2, r2, #1
 80007e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007e4:	0021      	movs	r1, r4
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2240      	movs	r2, #64	@ 0x40
 80007f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2202      	movs	r2, #2
 80007f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2202      	movs	r2, #2
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2208      	movs	r2, #8
 8000808:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	0292      	lsls	r2, r2, #10
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2280      	movs	r2, #128	@ 0x80
 8000816:	0492      	lsls	r2, r2, #18
 8000818:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2280      	movs	r2, #128	@ 0x80
 800081e:	0592      	lsls	r2, r2, #22
 8000820:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	187b      	adds	r3, r7, r1
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fe1b 	bl	8001460 <HAL_RCC_OscConfig>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800082e:	f000 f819 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2202      	movs	r2, #2
 800083c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2102      	movs	r1, #2
 800084e:	0018      	movs	r0, r3
 8000850:	f001 f966 	bl	8001b20 <HAL_RCC_ClockConfig>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000858:	f000 f804 	bl	8000864 <Error_Handler>
  }
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b015      	add	sp, #84	@ 0x54
 8000862:	bd90      	pop	{r4, r7, pc}

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_MspInit+0x4c>)
 8000878:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <HAL_MspInit+0x4c>)
 800087c:	2101      	movs	r1, #1
 800087e:	430a      	orrs	r2, r1
 8000880:	641a      	str	r2, [r3, #64]	@ 0x40
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	2201      	movs	r2, #1
 8000888:	4013      	ands	r3, r2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <HAL_MspInit+0x4c>)
 8000890:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <HAL_MspInit+0x4c>)
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	0549      	lsls	r1, r1, #21
 8000898:	430a      	orrs	r2, r1
 800089a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <HAL_MspInit+0x4c>)
 800089e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008a0:	2380      	movs	r3, #128	@ 0x80
 80008a2:	055b      	lsls	r3, r3, #21
 80008a4:	4013      	ands	r3, r2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008aa:	23c0      	movs	r3, #192	@ 0xc0
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 fa44 	bl	8000d3c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 fa0c 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f8:	4b03      	ldr	r3, [pc, #12]	@ (8000908 <USART1_IRQHandler+0x14>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f001 fe5a 	bl	80025b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	20000054 	.word	0x20000054

0800090c <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <USART2_LPUART2_IRQHandler+0x14>)
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fe4e 	bl	80025b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	200000e8 	.word	0x200000e8

08000924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 8000936:	4a24      	ldr	r2, [pc, #144]	@ (80009c8 <MX_USART1_UART_Init+0x98>)
 8000938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093a:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 800093c:	22e1      	movs	r2, #225	@ 0xe1
 800093e:	0252      	lsls	r2, r2, #9
 8000940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 800097a:	0018      	movs	r0, r3
 800097c:	f001 fcb6 	bl	80022ec <HAL_UART_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000984:	f7ff ff6e 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 800098a:	2100      	movs	r1, #0
 800098c:	0018      	movs	r0, r3
 800098e:	f003 ff6b 	bl	8004868 <HAL_UARTEx_SetTxFifoThreshold>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000996:	f7ff ff65 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 800099c:	2100      	movs	r1, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f003 ffa2 	bl	80048e8 <HAL_UARTEx_SetRxFifoThreshold>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f7ff ff5c 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <MX_USART1_UART_Init+0x94>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f003 ff20 	bl	80047f4 <HAL_UARTEx_DisableFifoMode>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f7ff ff54 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	20000054 	.word	0x20000054
 80009c8:	40013800 	.word	0x40013800

080009cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 80009d2:	4a24      	ldr	r2, [pc, #144]	@ (8000a64 <MX_USART2_UART_Init+0x98>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d6:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 80009d8:	22e1      	movs	r2, #225	@ 0xe1
 80009da:	0252      	lsls	r2, r2, #9
 80009dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 fc68 	bl	80022ec <HAL_UART_Init>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a20:	f7ff ff20 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f003 ff1d 	bl	8004868 <HAL_UARTEx_SetTxFifoThreshold>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a32:	f7ff ff17 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f003 ff54 	bl	80048e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a44:	f7ff ff0e 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <MX_USART2_UART_Init+0x94>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f003 fed2 	bl	80047f4 <HAL_UARTEx_DisableFifoMode>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a54:	f7ff ff06 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	200000e8 	.word	0x200000e8
 8000a64:	40004400 	.word	0x40004400

08000a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b09f      	sub	sp, #124	@ 0x7c
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	2364      	movs	r3, #100	@ 0x64
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	0018      	movs	r0, r3
 8000a76:	2314      	movs	r3, #20
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f003 ffd4 	bl	8004a28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a80:	2418      	movs	r4, #24
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	0018      	movs	r0, r3
 8000a86:	234c      	movs	r3, #76	@ 0x4c
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f003 ffcc 	bl	8004a28 <memset>
  if(uartHandle->Instance==USART1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a4d      	ldr	r2, [pc, #308]	@ (8000bcc <HAL_UART_MspInit+0x164>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d146      	bne.n	8000b28 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f001 f9e3 	bl	8001e74 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ab2:	f7ff fed7 	bl	8000864 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab6:	4b46      	ldr	r3, [pc, #280]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000ab8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aba:	4b45      	ldr	r3, [pc, #276]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	01c9      	lsls	r1, r1, #7
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ac4:	4b42      	ldr	r3, [pc, #264]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac8:	2380      	movs	r3, #128	@ 0x80
 8000aca:	01db      	lsls	r3, r3, #7
 8000acc:	4013      	ands	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000ad8:	2104      	movs	r1, #4
 8000ada:	430a      	orrs	r2, r1
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ade:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000aea:	2164      	movs	r1, #100	@ 0x64
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2230      	movs	r2, #48	@ 0x30
 8000af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2202      	movs	r2, #2
 8000af6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2201      	movs	r2, #1
 8000b08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	4a31      	ldr	r2, [pc, #196]	@ (8000bd4 <HAL_UART_MspInit+0x16c>)
 8000b0e:	0019      	movs	r1, r3
 8000b10:	0010      	movs	r0, r2
 8000b12:	f000 facf 	bl	80010b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	201b      	movs	r0, #27
 8000b1c:	f000 f9d0 	bl	8000ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b20:	201b      	movs	r0, #27
 8000b22:	f000 f9e2 	bl	8000eea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b26:	e04c      	b.n	8000bc2 <HAL_UART_MspInit+0x15a>
  else if(uartHandle->Instance==USART2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd8 <HAL_UART_MspInit+0x170>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d147      	bne.n	8000bc2 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b32:	2118      	movs	r1, #24
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2202      	movs	r2, #2
 8000b38:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 f996 	bl	8001e74 <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000b4c:	f7ff fe8a 	bl	8000864 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000b52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b54:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	0289      	lsls	r1, r1, #10
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b62:	2380      	movs	r3, #128	@ 0x80
 8000b64:	029b      	lsls	r3, r3, #10
 8000b66:	4013      	ands	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	430a      	orrs	r2, r1
 8000b76:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <HAL_UART_MspInit+0x168>)
 8000b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b84:	2164      	movs	r1, #100	@ 0x64
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	220c      	movs	r2, #12
 8000b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2202      	movs	r2, #2
 8000b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	187a      	adds	r2, r7, r1
 8000ba6:	23a0      	movs	r3, #160	@ 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fa81 	bl	80010b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	201c      	movs	r0, #28
 8000bb8:	f000 f982 	bl	8000ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000bbc:	201c      	movs	r0, #28
 8000bbe:	f000 f994 	bl	8000eea <HAL_NVIC_EnableIRQ>
}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b01f      	add	sp, #124	@ 0x7c
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	50000800 	.word	0x50000800
 8000bd8:	40004400 	.word	0x40004400

08000bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be0:	f7ff fea0 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0a:	f003 ff15 	bl	8004a38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c0e:	f7ff fda3 	bl	8000758 <main>

08000c12 <LoopForever>:

LoopForever:
  b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000c20:	08004b30 	.word	0x08004b30
  ldr r2, =_sbss
 8000c24:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000c28:	20000180 	.word	0x20000180

08000c2c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_COMP_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <HAL_Init+0x3c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_Init+0x3c>)
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	0049      	lsls	r1, r1, #1
 8000c46:	430a      	orrs	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f810 	bl	8000c70 <HAL_InitTick>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e001      	b.n	8000c60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fe08 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	781b      	ldrb	r3, [r3, #0]
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c80:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <HAL_InitTick+0x88>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d02b      	beq.n	8000ce0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c88:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <HAL_InitTick+0x8c>)
 8000c8a:	681c      	ldr	r4, [r3, #0]
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <HAL_InitTick+0x88>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	0019      	movs	r1, r3
 8000c92:	23fa      	movs	r3, #250	@ 0xfa
 8000c94:	0098      	lsls	r0, r3, #2
 8000c96:	f7ff fa35 	bl	8000104 <__udivsi3>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	0020      	movs	r0, r4
 8000ca0:	f7ff fa30 	bl	8000104 <__udivsi3>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f92f 	bl	8000f0a <HAL_SYSTICK_Config>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d112      	bne.n	8000cd6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d80a      	bhi.n	8000ccc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 f8fe 	bl	8000ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_InitTick+0x90>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	e00d      	b.n	8000ce8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e008      	b.n	8000ce8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	e003      	b.n	8000ce8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ce8:	230f      	movs	r3, #15
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	781b      	ldrb	r3, [r3, #0]
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b005      	add	sp, #20
 8000cf4:	bd90      	pop	{r4, r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	20000020 	.word	0x20000020
 8000d00:	20000024 	.word	0x20000024

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_IncTick+0x1c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	18d2      	adds	r2, r2, r3
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	46c0      	nop			@ (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	20000028 	.word	0x20000028
 8000d24:	2000017c 	.word	0x2000017c

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b02      	ldr	r3, [pc, #8]	@ (8000d38 <HAL_GetTick+0x10>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	2000017c 	.word	0x2000017c

08000d3c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a06      	ldr	r2, [pc, #24]	@ (8000d64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	40010000 	.word	0x40010000
 8000d64:	fffff9ff 	.word	0xfffff9ff

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	0002      	movs	r2, r0
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d7a:	d809      	bhi.n	8000d90 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	001a      	movs	r2, r3
 8000d82:	231f      	movs	r3, #31
 8000d84:	401a      	ands	r2, r3
 8000d86:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <__NVIC_EnableIRQ+0x30>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4091      	lsls	r1, r2
 8000d8c:	000a      	movs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000db0:	d828      	bhi.n	8000e04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db2:	4a2f      	ldr	r2, [pc, #188]	@ (8000e70 <__NVIC_SetPriority+0xd4>)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	33c0      	adds	r3, #192	@ 0xc0
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	589b      	ldr	r3, [r3, r2]
 8000dc2:	1dfa      	adds	r2, r7, #7
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	2203      	movs	r2, #3
 8000dca:	400a      	ands	r2, r1
 8000dcc:	00d2      	lsls	r2, r2, #3
 8000dce:	21ff      	movs	r1, #255	@ 0xff
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	43d2      	mvns	r2, r2
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	019b      	lsls	r3, r3, #6
 8000dde:	22ff      	movs	r2, #255	@ 0xff
 8000de0:	401a      	ands	r2, r3
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	0018      	movs	r0, r3
 8000de8:	2303      	movs	r3, #3
 8000dea:	4003      	ands	r3, r0
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df0:	481f      	ldr	r0, [pc, #124]	@ (8000e70 <__NVIC_SetPriority+0xd4>)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	33c0      	adds	r3, #192	@ 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e02:	e031      	b.n	8000e68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	4a1b      	ldr	r2, [pc, #108]	@ (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	400b      	ands	r3, r1
 8000e10:	3b08      	subs	r3, #8
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3306      	adds	r3, #6
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1dfa      	adds	r2, r7, #7
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	0011      	movs	r1, r2
 8000e24:	2203      	movs	r2, #3
 8000e26:	400a      	ands	r2, r1
 8000e28:	00d2      	lsls	r2, r2, #3
 8000e2a:	21ff      	movs	r1, #255	@ 0xff
 8000e2c:	4091      	lsls	r1, r2
 8000e2e:	000a      	movs	r2, r1
 8000e30:	43d2      	mvns	r2, r2
 8000e32:	401a      	ands	r2, r3
 8000e34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	019b      	lsls	r3, r3, #6
 8000e3a:	22ff      	movs	r2, #255	@ 0xff
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0018      	movs	r0, r3
 8000e44:	2303      	movs	r3, #3
 8000e46:	4003      	ands	r3, r0
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4c:	4809      	ldr	r0, [pc, #36]	@ (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	001c      	movs	r4, r3
 8000e54:	230f      	movs	r3, #15
 8000e56:	4023      	ands	r3, r4
 8000e58:	3b08      	subs	r3, #8
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	3306      	adds	r3, #6
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	18c3      	adds	r3, r0, r3
 8000e64:	3304      	adds	r3, #4
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b003      	add	sp, #12
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	045b      	lsls	r3, r3, #17
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d301      	bcc.n	8000e90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e010      	b.n	8000eb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e90:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <SysTick_Config+0x44>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	3a01      	subs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e98:	2301      	movs	r3, #1
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ff7c 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <SysTick_Config+0x44>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <SysTick_Config+0x44>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	210f      	movs	r1, #15
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	1c02      	adds	r2, r0, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff ff33 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ffaf 	bl	8000e78 <SysTick_Config>
 8000f1a:	0003      	movs	r3, r0
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e04f      	b.n	8000fd6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2225      	movs	r2, #37	@ 0x25
 8000f3a:	5c9b      	ldrb	r3, [r3, r2]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d008      	beq.n	8000f54 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2224      	movs	r2, #36	@ 0x24
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e040      	b.n	8000fd6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	210e      	movs	r1, #14
 8000f60:	438a      	bics	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f6e:	491c      	ldr	r1, [pc, #112]	@ (8000fe0 <HAL_DMA_Abort+0xbc>)
 8000f70:	400a      	ands	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	438a      	bics	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f88:	221c      	movs	r2, #28
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	2101      	movs	r1, #1
 8000f92:	4091      	lsls	r1, r2
 8000f94:	000a      	movs	r2, r1
 8000f96:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000fa0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00c      	beq.n	8000fc4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fb4:	490a      	ldr	r1, [pc, #40]	@ (8000fe0 <HAL_DMA_Abort+0xbc>)
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000fc2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2225      	movs	r2, #37	@ 0x25
 8000fc8:	2101      	movs	r1, #1
 8000fca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2224      	movs	r2, #36	@ 0x24
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	fffffeff 	.word	0xfffffeff

08000fe4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fec:	210f      	movs	r1, #15
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2225      	movs	r2, #37	@ 0x25
 8000ff8:	5c9b      	ldrb	r3, [r3, r2]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d006      	beq.n	800100e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2204      	movs	r2, #4
 8001004:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
 800100c:	e048      	b.n	80010a0 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	210e      	movs	r1, #14
 800101a:	438a      	bics	r2, r1
 800101c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	438a      	bics	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001038:	491d      	ldr	r1, [pc, #116]	@ (80010b0 <HAL_DMA_Abort_IT+0xcc>)
 800103a:	400a      	ands	r2, r1
 800103c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	221c      	movs	r2, #28
 8001044:	401a      	ands	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	2101      	movs	r1, #1
 800104c:	4091      	lsls	r1, r2
 800104e:	000a      	movs	r2, r1
 8001050:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800105a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106e:	4910      	ldr	r1, [pc, #64]	@ (80010b0 <HAL_DMA_Abort_IT+0xcc>)
 8001070:	400a      	ands	r2, r1
 8001072:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800107c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2225      	movs	r2, #37	@ 0x25
 8001082:	2101      	movs	r1, #1
 8001084:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2224      	movs	r2, #36	@ 0x24
 800108a:	2100      	movs	r1, #0
 800108c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	0010      	movs	r0, r2
 800109e:	4798      	blx	r3
    }
  }
  return status;
 80010a0:	230f      	movs	r3, #15
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	781b      	ldrb	r3, [r3, #0]
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b004      	add	sp, #16
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	fffffeff 	.word	0xfffffeff

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	e14d      	b.n	8001360 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4091      	lsls	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <HAL_GPIO_Init+0x28>
 80010da:	e13e      	b.n	800135a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2203      	movs	r2, #3
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <HAL_GPIO_Init+0x40>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d130      	bne.n	8001156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	409a      	lsls	r2, r3
 8001102:	0013      	movs	r3, r2
 8001104:	43da      	mvns	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	409a      	lsls	r2, r3
 8001116:	0013      	movs	r3, r2
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112a:	2201      	movs	r2, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	2201      	movs	r2, #1
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	4013      	ands	r3, r2
 800115e:	2b03      	cmp	r3, #3
 8001160:	d017      	beq.n	8001192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	4013      	ands	r3, r2
 800119a:	2b02      	cmp	r3, #2
 800119c:	d123      	bne.n	80011e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	58d3      	ldr	r3, [r2, r3]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2207      	movs	r2, #7
 80011b0:	4013      	ands	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2107      	movs	r1, #7
 80011ca:	400b      	ands	r3, r1
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	6939      	ldr	r1, [r7, #16]
 80011e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	401a      	ands	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	23c0      	movs	r3, #192	@ 0xc0
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	d100      	bne.n	8001228 <HAL_GPIO_Init+0x174>
 8001226:	e098      	b.n	800135a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001228:	4a53      	ldr	r2, [pc, #332]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3318      	adds	r3, #24
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	589b      	ldr	r3, [r3, r2]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	220f      	movs	r2, #15
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	43da      	mvns	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	23a0      	movs	r3, #160	@ 0xa0
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	429a      	cmp	r2, r3
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x1d6>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a48      	ldr	r2, [pc, #288]	@ (800137c <HAL_GPIO_Init+0x2c8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x1d2>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a47      	ldr	r2, [pc, #284]	@ (8001380 <HAL_GPIO_Init+0x2cc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x1ce>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a46      	ldr	r2, [pc, #280]	@ (8001384 <HAL_GPIO_Init+0x2d0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x1ca>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a45      	ldr	r2, [pc, #276]	@ (8001388 <HAL_GPIO_Init+0x2d4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x1c6>
 8001276:	2304      	movs	r3, #4
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x1d8>
 800127a:	2305      	movs	r3, #5
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x1d8>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x1d8>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x1d8>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x1d8>
 800128a:	2300      	movs	r3, #0
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	2103      	movs	r1, #3
 8001290:	400a      	ands	r2, r1
 8001292:	00d2      	lsls	r2, r2, #3
 8001294:	4093      	lsls	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800129c:	4936      	ldr	r1, [pc, #216]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3318      	adds	r3, #24
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012aa:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	2380      	movs	r3, #128	@ 0x80
 80012c0:	035b      	lsls	r3, r3, #13
 80012c2:	4013      	ands	r3, r2
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	2380      	movs	r3, #128	@ 0x80
 80012ea:	039b      	lsls	r3, r3, #14
 80012ec:	4013      	ands	r3, r2
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 8001300:	2384      	movs	r3, #132	@ 0x84
 8001302:	58d3      	ldr	r3, [r2, r3]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43da      	mvns	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	029b      	lsls	r3, r3, #10
 8001318:	4013      	ands	r3, r2
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001324:	4914      	ldr	r1, [pc, #80]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 8001326:	2284      	movs	r2, #132	@ 0x84
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800132c:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001352:	4909      	ldr	r1, [pc, #36]	@ (8001378 <HAL_GPIO_Init+0x2c4>)
 8001354:	2280      	movs	r2, #128	@ 0x80
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	40da      	lsrs	r2, r3
 8001368:	1e13      	subs	r3, r2, #0
 800136a:	d000      	beq.n	800136e <HAL_GPIO_Init+0x2ba>
 800136c:	e6aa      	b.n	80010c4 <HAL_GPIO_Init+0x10>
  }
}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b006      	add	sp, #24
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021800 	.word	0x40021800
 800137c:	50000400 	.word	0x50000400
 8001380:	50000800 	.word	0x50000800
 8001384:	50000c00 	.word	0x50000c00
 8001388:	50001000 	.word	0x50001000

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	0008      	movs	r0, r1
 8001396:	0011      	movs	r1, r2
 8001398:	1cbb      	adds	r3, r7, #2
 800139a:	1c02      	adds	r2, r0, #0
 800139c:	801a      	strh	r2, [r3, #0]
 800139e:	1c7b      	adds	r3, r7, #1
 80013a0:	1c0a      	adds	r2, r1, #0
 80013a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a4:	1c7b      	adds	r3, r7, #1
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ac:	1cbb      	adds	r3, r7, #2
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b6:	1cbb      	adds	r3, r7, #2
 80013b8:	881a      	ldrh	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013d0:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	@ (800143c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	0019      	movs	r1, r3
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d11f      	bne.n	800142c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	0013      	movs	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	189b      	adds	r3, r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4912      	ldr	r1, [pc, #72]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7fe fe82 	bl	8000104 <__udivsi3>
 8001400:	0003      	movs	r3, r0
 8001402:	3301      	adds	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001406:	e008      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3b01      	subs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	e001      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e009      	b.n	800142e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	401a      	ands	r2, r3
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	429a      	cmp	r2, r3
 800142a:	d0ed      	beq.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	40007000 	.word	0x40007000
 800143c:	fffff9ff 	.word	0xfffff9ff
 8001440:	20000020 	.word	0x20000020
 8001444:	000f4240 	.word	0x000f4240

08001448 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <LL_RCC_GetAPB1Prescaler+0x14>)
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	23e0      	movs	r3, #224	@ 0xe0
 8001452:	01db      	lsls	r3, r3, #7
 8001454:	4013      	ands	r3, r2
}
 8001456:	0018      	movs	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	f000 fb50 	bl	8001b14 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	4013      	ands	r3, r2
 800147c:	d100      	bne.n	8001480 <HAL_RCC_OscConfig+0x20>
 800147e:	e07c      	b.n	800157a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001480:	4bc3      	ldr	r3, [pc, #780]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2238      	movs	r2, #56	@ 0x38
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800148a:	4bc1      	ldr	r3, [pc, #772]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2203      	movs	r2, #3
 8001490:	4013      	ands	r3, r2
 8001492:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b10      	cmp	r3, #16
 8001498:	d102      	bne.n	80014a0 <HAL_RCC_OscConfig+0x40>
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d002      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d10b      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4bba      	ldr	r3, [pc, #744]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	2380      	movs	r3, #128	@ 0x80
 80014ac:	029b      	lsls	r3, r3, #10
 80014ae:	4013      	ands	r3, r2
 80014b0:	d062      	beq.n	8001578 <HAL_RCC_OscConfig+0x118>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d15e      	bne.n	8001578 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e32a      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	025b      	lsls	r3, r3, #9
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d107      	bne.n	80014da <HAL_RCC_OscConfig+0x7a>
 80014ca:	4bb1      	ldr	r3, [pc, #708]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4bb0      	ldr	r3, [pc, #704]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80014d0:	2180      	movs	r1, #128	@ 0x80
 80014d2:	0249      	lsls	r1, r1, #9
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e020      	b.n	800151c <HAL_RCC_OscConfig+0xbc>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	23a0      	movs	r3, #160	@ 0xa0
 80014e0:	02db      	lsls	r3, r3, #11
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d10e      	bne.n	8001504 <HAL_RCC_OscConfig+0xa4>
 80014e6:	4baa      	ldr	r3, [pc, #680]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4ba9      	ldr	r3, [pc, #676]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80014ec:	2180      	movs	r1, #128	@ 0x80
 80014ee:	02c9      	lsls	r1, r1, #11
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	4ba6      	ldr	r3, [pc, #664]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4ba5      	ldr	r3, [pc, #660]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	0249      	lsls	r1, r1, #9
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e00b      	b.n	800151c <HAL_RCC_OscConfig+0xbc>
 8001504:	4ba2      	ldr	r3, [pc, #648]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4ba1      	ldr	r3, [pc, #644]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 800150a:	49a2      	ldr	r1, [pc, #648]	@ (8001794 <HAL_RCC_OscConfig+0x334>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	4b9f      	ldr	r3, [pc, #636]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b9e      	ldr	r3, [pc, #632]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001516:	49a0      	ldr	r1, [pc, #640]	@ (8001798 <HAL_RCC_OscConfig+0x338>)
 8001518:	400a      	ands	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d014      	beq.n	800154e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fc00 	bl	8000d28 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff fbfb 	bl	8000d28 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	@ 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e2e9      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001540:	4b93      	ldr	r3, [pc, #588]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0xce>
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fbeb 	bl	8000d28 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fbe6 	bl	8000d28 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e2d4      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156a:	4b89      	ldr	r3, [pc, #548]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	029b      	lsls	r3, r3, #10
 8001572:	4013      	ands	r3, r2
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0xf8>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d100      	bne.n	8001586 <HAL_RCC_OscConfig+0x126>
 8001584:	e099      	b.n	80016ba <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001586:	4b82      	ldr	r3, [pc, #520]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2238      	movs	r2, #56	@ 0x38
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001590:	4b7f      	ldr	r3, [pc, #508]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2203      	movs	r2, #3
 8001596:	4013      	ands	r3, r2
 8001598:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b10      	cmp	r3, #16
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_OscConfig+0x146>
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d002      	beq.n	80015ac <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d135      	bne.n	8001618 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ac:	4b78      	ldr	r3, [pc, #480]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x164>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e2a7      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b72      	ldr	r3, [pc, #456]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a74      	ldr	r2, [pc, #464]	@ (800179c <HAL_RCC_OscConfig+0x33c>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	0019      	movs	r1, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	021a      	lsls	r2, r3, #8
 80015d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80015d6:	430a      	orrs	r2, r1
 80015d8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d112      	bne.n	8001606 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a6e      	ldr	r2, [pc, #440]	@ (80017a0 <HAL_RCC_OscConfig+0x340>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	4b68      	ldr	r3, [pc, #416]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015f4:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0adb      	lsrs	r3, r3, #11
 80015fa:	2207      	movs	r2, #7
 80015fc:	4013      	ands	r3, r2
 80015fe:	4a69      	ldr	r2, [pc, #420]	@ (80017a4 <HAL_RCC_OscConfig+0x344>)
 8001600:	40da      	lsrs	r2, r3
 8001602:	4b69      	ldr	r3, [pc, #420]	@ (80017a8 <HAL_RCC_OscConfig+0x348>)
 8001604:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001606:	4b69      	ldr	r3, [pc, #420]	@ (80017ac <HAL_RCC_OscConfig+0x34c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0018      	movs	r0, r3
 800160c:	f7ff fb30 	bl	8000c70 <HAL_InitTick>
 8001610:	1e03      	subs	r3, r0, #0
 8001612:	d051      	beq.n	80016b8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e27d      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d030      	beq.n	8001682 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001620:	4b5b      	ldr	r3, [pc, #364]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a5e      	ldr	r2, [pc, #376]	@ (80017a0 <HAL_RCC_OscConfig+0x340>)
 8001626:	4013      	ands	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	4b58      	ldr	r3, [pc, #352]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b56      	ldr	r3, [pc, #344]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b55      	ldr	r3, [pc, #340]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 800163a:	2180      	movs	r1, #128	@ 0x80
 800163c:	0049      	lsls	r1, r1, #1
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fb71 	bl	8000d28 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fb6c 	bl	8000d28 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e25a      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165e:	4b4c      	ldr	r3, [pc, #304]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4013      	ands	r3, r2
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b49      	ldr	r3, [pc, #292]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4a4b      	ldr	r2, [pc, #300]	@ (800179c <HAL_RCC_OscConfig+0x33c>)
 8001670:	4013      	ands	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	021a      	lsls	r2, r3, #8
 800167a:	4b45      	ldr	r3, [pc, #276]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	e01b      	b.n	80016ba <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b43      	ldr	r3, [pc, #268]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b42      	ldr	r3, [pc, #264]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001688:	4949      	ldr	r1, [pc, #292]	@ (80017b0 <HAL_RCC_OscConfig+0x350>)
 800168a:	400a      	ands	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fb4b 	bl	8000d28 <HAL_GetTick>
 8001692:	0003      	movs	r3, r0
 8001694:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff fb46 	bl	8000d28 <HAL_GetTick>
 800169c:	0002      	movs	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e234      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016aa:	4b39      	ldr	r3, [pc, #228]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4013      	ands	r3, r2
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x238>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2208      	movs	r2, #8
 80016c0:	4013      	ands	r3, r2
 80016c2:	d047      	beq.n	8001754 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016c4:	4b32      	ldr	r3, [pc, #200]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2238      	movs	r2, #56	@ 0x38
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b18      	cmp	r3, #24
 80016ce:	d10a      	bne.n	80016e6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80016d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d4:	2202      	movs	r2, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	d03c      	beq.n	8001754 <HAL_RCC_OscConfig+0x2f4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d138      	bne.n	8001754 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e216      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d019      	beq.n	8001722 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016ee:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80016f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016f2:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 80016f4:	2101      	movs	r1, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb15 	bl	8000d28 <HAL_GetTick>
 80016fe:	0003      	movs	r3, r0
 8001700:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fb10 	bl	8000d28 <HAL_GetTick>
 8001708:	0002      	movs	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1fe      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001716:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d0f1      	beq.n	8001704 <HAL_RCC_OscConfig+0x2a4>
 8001720:	e018      	b.n	8001754 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001722:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001724:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001728:	2101      	movs	r1, #1
 800172a:	438a      	bics	r2, r1
 800172c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fafb 	bl	8000d28 <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff faf6 	bl	8000d28 <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1e4      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d1f1      	bne.n	8001738 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2204      	movs	r2, #4
 800175a:	4013      	ands	r3, r2
 800175c:	d100      	bne.n	8001760 <HAL_RCC_OscConfig+0x300>
 800175e:	e0c7      	b.n	80018f0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001760:	231f      	movs	r3, #31
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2238      	movs	r2, #56	@ 0x38
 800176e:	4013      	ands	r3, r2
 8001770:	2b20      	cmp	r3, #32
 8001772:	d11f      	bne.n	80017b4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_RCC_OscConfig+0x330>)
 8001776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d100      	bne.n	8001780 <HAL_RCC_OscConfig+0x320>
 800177e:	e0b7      	b.n	80018f0 <HAL_RCC_OscConfig+0x490>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d000      	beq.n	800178a <HAL_RCC_OscConfig+0x32a>
 8001788:	e0b2      	b.n	80018f0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e1c2      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	40021000 	.word	0x40021000
 8001794:	fffeffff 	.word	0xfffeffff
 8001798:	fffbffff 	.word	0xfffbffff
 800179c:	ffff80ff 	.word	0xffff80ff
 80017a0:	ffffc7ff 	.word	0xffffc7ff
 80017a4:	00f42400 	.word	0x00f42400
 80017a8:	20000020 	.word	0x20000020
 80017ac:	20000024 	.word	0x20000024
 80017b0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017b4:	4bb5      	ldr	r3, [pc, #724]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80017b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	055b      	lsls	r3, r3, #21
 80017bc:	4013      	ands	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_OscConfig+0x364>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x366>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d011      	beq.n	80017ee <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4bb0      	ldr	r3, [pc, #704]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80017cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017ce:	4baf      	ldr	r3, [pc, #700]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80017d0:	2180      	movs	r1, #128	@ 0x80
 80017d2:	0549      	lsls	r1, r1, #21
 80017d4:	430a      	orrs	r2, r1
 80017d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017d8:	4bac      	ldr	r3, [pc, #688]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80017da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	055b      	lsls	r3, r3, #21
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80017e6:	231f      	movs	r3, #31
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ee:	4ba8      	ldr	r3, [pc, #672]	@ (8001a90 <HAL_RCC_OscConfig+0x630>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4013      	ands	r3, r2
 80017f8:	d11a      	bne.n	8001830 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017fa:	4ba5      	ldr	r3, [pc, #660]	@ (8001a90 <HAL_RCC_OscConfig+0x630>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4ba4      	ldr	r3, [pc, #656]	@ (8001a90 <HAL_RCC_OscConfig+0x630>)
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	0049      	lsls	r1, r1, #1
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001808:	f7ff fa8e 	bl	8000d28 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff fa89 	bl	8000d28 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e177      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	4b9a      	ldr	r3, [pc, #616]	@ (8001a90 <HAL_RCC_OscConfig+0x630>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	@ 0x80
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4013      	ands	r3, r2
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x3e6>
 8001838:	4b94      	ldr	r3, [pc, #592]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 800183a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800183c:	4b93      	ldr	r3, [pc, #588]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 800183e:	2101      	movs	r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001844:	e01c      	b.n	8001880 <HAL_RCC_OscConfig+0x420>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b05      	cmp	r3, #5
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x408>
 800184e:	4b8f      	ldr	r3, [pc, #572]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001850:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001852:	4b8e      	ldr	r3, [pc, #568]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001854:	2104      	movs	r1, #4
 8001856:	430a      	orrs	r2, r1
 8001858:	65da      	str	r2, [r3, #92]	@ 0x5c
 800185a:	4b8c      	ldr	r3, [pc, #560]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 800185c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800185e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001860:	2101      	movs	r1, #1
 8001862:	430a      	orrs	r2, r1
 8001864:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0x420>
 8001868:	4b88      	ldr	r3, [pc, #544]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 800186a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800186c:	4b87      	ldr	r3, [pc, #540]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 800186e:	2101      	movs	r1, #1
 8001870:	438a      	bics	r2, r1
 8001872:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001874:	4b85      	ldr	r3, [pc, #532]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001876:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001878:	4b84      	ldr	r3, [pc, #528]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 800187a:	2104      	movs	r1, #4
 800187c:	438a      	bics	r2, r1
 800187e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d014      	beq.n	80018b2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fa4e 	bl	8000d28 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001890:	e009      	b.n	80018a6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff fa49 	bl	8000d28 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a7d      	ldr	r2, [pc, #500]	@ (8001a94 <HAL_RCC_OscConfig+0x634>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e136      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018a6:	4b79      	ldr	r3, [pc, #484]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80018a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018aa:	2202      	movs	r2, #2
 80018ac:	4013      	ands	r3, r2
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x432>
 80018b0:	e013      	b.n	80018da <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff fa39 	bl	8000d28 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ba:	e009      	b.n	80018d0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018bc:	f7ff fa34 	bl	8000d28 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	4a73      	ldr	r2, [pc, #460]	@ (8001a94 <HAL_RCC_OscConfig+0x634>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e121      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d0:	4b6e      	ldr	r3, [pc, #440]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80018d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018da:	231f      	movs	r3, #31
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018e4:	4b69      	ldr	r3, [pc, #420]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80018e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018e8:	4b68      	ldr	r3, [pc, #416]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80018ea:	496b      	ldr	r1, [pc, #428]	@ (8001a98 <HAL_RCC_OscConfig+0x638>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2220      	movs	r2, #32
 80018f6:	4013      	ands	r3, r2
 80018f8:	d039      	beq.n	800196e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01b      	beq.n	800193a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001902:	4b62      	ldr	r3, [pc, #392]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b61      	ldr	r3, [pc, #388]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001908:	2180      	movs	r1, #128	@ 0x80
 800190a:	03c9      	lsls	r1, r1, #15
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fa0a 	bl	8000d28 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191a:	f7ff fa05 	bl	8000d28 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0f3      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800192c:	4b57      	ldr	r3, [pc, #348]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	4013      	ands	r3, r2
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x4ba>
 8001938:	e019      	b.n	800196e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800193a:	4b54      	ldr	r3, [pc, #336]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001940:	4956      	ldr	r1, [pc, #344]	@ (8001a9c <HAL_RCC_OscConfig+0x63c>)
 8001942:	400a      	ands	r2, r1
 8001944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff f9ef 	bl	8000d28 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001950:	f7ff f9ea 	bl	8000d28 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0d8      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001962:	4b4a      	ldr	r3, [pc, #296]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	4013      	ands	r3, r2
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d100      	bne.n	8001978 <HAL_RCC_OscConfig+0x518>
 8001976:	e0cc      	b.n	8001b12 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001978:	4b44      	ldr	r3, [pc, #272]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2238      	movs	r2, #56	@ 0x38
 800197e:	4013      	ands	r3, r2
 8001980:	2b10      	cmp	r3, #16
 8001982:	d100      	bne.n	8001986 <HAL_RCC_OscConfig+0x526>
 8001984:	e07b      	b.n	8001a7e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d156      	bne.n	8001a3c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b3e      	ldr	r3, [pc, #248]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001994:	4942      	ldr	r1, [pc, #264]	@ (8001aa0 <HAL_RCC_OscConfig+0x640>)
 8001996:	400a      	ands	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff f9c5 	bl	8000d28 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f9c0 	bl	8000d28 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0ae      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b6:	4b35      	ldr	r3, [pc, #212]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	049b      	lsls	r3, r3, #18
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c2:	4b32      	ldr	r3, [pc, #200]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4a37      	ldr	r2, [pc, #220]	@ (8001aa4 <HAL_RCC_OscConfig+0x644>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ee:	431a      	orrs	r2, r3
 80019f0:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f6:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 80019fc:	2180      	movs	r1, #128	@ 0x80
 80019fe:	0449      	lsls	r1, r1, #17
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a04:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001a0a:	2180      	movs	r1, #128	@ 0x80
 8001a0c:	0549      	lsls	r1, r1, #21
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff f989 	bl	8000d28 <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f984 	bl	8000d28 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e072      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	049b      	lsls	r3, r3, #18
 8001a36:	4013      	ands	r3, r2
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x5bc>
 8001a3a:	e06a      	b.n	8001b12 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001a42:	4917      	ldr	r1, [pc, #92]	@ (8001aa0 <HAL_RCC_OscConfig+0x640>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f96e 	bl	8000d28 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff f969 	bl	8000d28 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e057      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	049b      	lsls	r3, r3, #18
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <HAL_RCC_OscConfig+0x62c>)
 8001a76:	490c      	ldr	r1, [pc, #48]	@ (8001aa8 <HAL_RCC_OscConfig+0x648>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	e049      	b.n	8001b12 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d112      	bne.n	8001aac <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e044      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40007000 	.word	0x40007000
 8001a94:	00001388 	.word	0x00001388
 8001a98:	efffffff 	.word	0xefffffff
 8001a9c:	ffbfffff 	.word	0xffbfffff
 8001aa0:	feffffff 	.word	0xfeffffff
 8001aa4:	11c1808c 	.word	0x11c1808c
 8001aa8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <HAL_RCC_OscConfig+0x6bc>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d126      	bne.n	8001b0e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2270      	movs	r2, #112	@ 0x70
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d11f      	bne.n	8001b0e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	23fe      	movs	r3, #254	@ 0xfe
 8001ad2:	01db      	lsls	r3, r3, #7
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ada:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d116      	bne.n	8001b0e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	23f8      	movs	r3, #248	@ 0xf8
 8001ae4:	039b      	lsls	r3, r3, #14
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10e      	bne.n	8001b0e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	23e0      	movs	r3, #224	@ 0xe0
 8001af4:	051b      	lsls	r3, r3, #20
 8001af6:	401a      	ands	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	0f5b      	lsrs	r3, r3, #29
 8001b04:	075a      	lsls	r2, r3, #29
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b008      	add	sp, #32
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0e9      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b76      	ldr	r3, [pc, #472]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2207      	movs	r2, #7
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d91e      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b73      	ldr	r3, [pc, #460]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2207      	movs	r2, #7
 8001b48:	4393      	bics	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	4b70      	ldr	r3, [pc, #448]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f8e8 	bl	8000d28 <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b5c:	e009      	b.n	8001b72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5e:	f7ff f8e3 	bl	8000d28 <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	4a6a      	ldr	r2, [pc, #424]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e0ca      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b72:	4b67      	ldr	r3, [pc, #412]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2207      	movs	r2, #7
 8001b78:	4013      	ands	r3, r2
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1ee      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d015      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	4013      	ands	r3, r2
 8001b92:	d006      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b94:	4b60      	ldr	r3, [pc, #384]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b5f      	ldr	r3, [pc, #380]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001b9a:	21e0      	movs	r1, #224	@ 0xe0
 8001b9c:	01c9      	lsls	r1, r1, #7
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d1c <HAL_RCC_ClockConfig+0x1fc>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4b59      	ldr	r3, [pc, #356]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d057      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc8:	4b53      	ldr	r3, [pc, #332]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	029b      	lsls	r3, r3, #10
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d12b      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e097      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be0:	4b4d      	ldr	r3, [pc, #308]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	049b      	lsls	r3, r3, #18
 8001be8:	4013      	ands	r3, r2
 8001bea:	d11f      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e08b      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf8:	4b47      	ldr	r3, [pc, #284]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4013      	ands	r3, r2
 8001c02:	d113      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e07f      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c10:	4b41      	ldr	r3, [pc, #260]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d108      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e074      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e06d      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2207      	movs	r2, #7
 8001c32:	4393      	bics	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4b37      	ldr	r3, [pc, #220]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c40:	f7ff f872 	bl	8000d28 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c48:	e009      	b.n	8001c5e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4a:	f7ff f86d 	bl	8000d28 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	4a2f      	ldr	r2, [pc, #188]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e054      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2238      	movs	r2, #56	@ 0x38
 8001c64:	401a      	ands	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1ec      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2207      	movs	r2, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d21e      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2207      	movs	r2, #7
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f84a 	bl	8000d28 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c98:	e009      	b.n	8001cae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9a:	f7ff f845 	bl	8000d28 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e02c      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1ee      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d009      	beq.n	8001cda <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc6:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4a15      	ldr	r2, [pc, #84]	@ (8001d20 <HAL_RCC_ClockConfig+0x200>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cda:	f000 f829 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cde:	0001      	movs	r1, r0
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	401a      	ands	r2, r3
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <HAL_RCC_ClockConfig+0x204>)
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	58d3      	ldr	r3, [r2, r3]
 8001cf0:	221f      	movs	r2, #31
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	000a      	movs	r2, r1
 8001cf6:	40da      	lsrs	r2, r3
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_RCC_ClockConfig+0x208>)
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCC_ClockConfig+0x20c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7fe ffb5 	bl	8000c70 <HAL_InitTick>
 8001d06:	0003      	movs	r3, r0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b004      	add	sp, #16
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40022000 	.word	0x40022000
 8001d14:	00001388 	.word	0x00001388
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	fffff0ff 	.word	0xfffff0ff
 8001d20:	ffff8fff 	.word	0xffff8fff
 8001d24:	08004a98 	.word	0x08004a98
 8001d28:	20000020 	.word	0x20000020
 8001d2c:	20000024 	.word	0x20000024

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d36:	4b3c      	ldr	r3, [pc, #240]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2238      	movs	r2, #56	@ 0x38
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d10f      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d40:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0adb      	lsrs	r3, r3, #11
 8001d46:	2207      	movs	r2, #7
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	0013      	movs	r3, r2
 8001d50:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d52:	6839      	ldr	r1, [r7, #0]
 8001d54:	4835      	ldr	r0, [pc, #212]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d56:	f7fe f9d5 	bl	8000104 <__udivsi3>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e05d      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d60:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2238      	movs	r2, #56	@ 0x38
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d102      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d6c:	4b30      	ldr	r3, [pc, #192]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e054      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d72:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2238      	movs	r2, #56	@ 0x38
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d138      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2203      	movs	r2, #3
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	2207      	movs	r2, #7
 8001d90:	4013      	ands	r3, r2
 8001d92:	3301      	adds	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d10d      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	4824      	ldr	r0, [pc, #144]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x100>)
 8001da0:	f7fe f9b0 	bl	8000104 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	0019      	movs	r1, r3
 8001da8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	227f      	movs	r2, #127	@ 0x7f
 8001db0:	4013      	ands	r3, r2
 8001db2:	434b      	muls	r3, r1
 8001db4:	617b      	str	r3, [r7, #20]
        break;
 8001db6:	e00d      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	481c      	ldr	r0, [pc, #112]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dbc:	f7fe f9a2 	bl	8000104 <__udivsi3>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	227f      	movs	r2, #127	@ 0x7f
 8001dcc:	4013      	ands	r3, r2
 8001dce:	434b      	muls	r3, r1
 8001dd0:	617b      	str	r3, [r7, #20]
        break;
 8001dd2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001dd4:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0f5b      	lsrs	r3, r3, #29
 8001dda:	2207      	movs	r2, #7
 8001ddc:	4013      	ands	r3, r2
 8001dde:	3301      	adds	r3, #1
 8001de0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f7fe f98d 	bl	8000104 <__udivsi3>
 8001dea:	0003      	movs	r3, r0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	e015      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001df0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2238      	movs	r2, #56	@ 0x38
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d103      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001dfc:	2380      	movs	r3, #128	@ 0x80
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e04:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2238      	movs	r2, #56	@ 0x38
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b18      	cmp	r3, #24
 8001e0e:	d103      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e10:	23fa      	movs	r3, #250	@ 0xfa
 8001e12:	01db      	lsls	r3, r3, #7
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	e001      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e1c:	693b      	ldr	r3, [r7, #16]
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b006      	add	sp, #24
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	007a1200 	.word	0x007a1200

08001e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	@ (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	20000020 	.word	0x20000020

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	0004      	movs	r4, r0
 8001e52:	f7ff faf9 	bl	8001448 <LL_RCC_GetAPB1Prescaler>
 8001e56:	0003      	movs	r3, r0
 8001e58:	0b1a      	lsrs	r2, r3, #12
 8001e5a:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	58d3      	ldr	r3, [r2, r3]
 8001e60:	221f      	movs	r2, #31
 8001e62:	4013      	ands	r3, r2
 8001e64:	40dc      	lsrs	r4, r3
 8001e66:	0023      	movs	r3, r4
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	08004ad8 	.word	0x08004ad8

08001e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e7c:	2313      	movs	r3, #19
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e84:	2312      	movs	r3, #18
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	4013      	ands	r3, r2
 8001e96:	d100      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e98:	e0ad      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2011      	movs	r0, #17
 8001e9c:	183b      	adds	r3, r7, r0
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea2:	4b47      	ldr	r3, [pc, #284]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	055b      	lsls	r3, r3, #21
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d110      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	4b44      	ldr	r3, [pc, #272]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb2:	4b43      	ldr	r3, [pc, #268]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	0549      	lsls	r1, r1, #21
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ebc:	4b40      	ldr	r3, [pc, #256]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	055b      	lsls	r3, r3, #21
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eca:	183b      	adds	r3, r7, r0
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001ed6:	2180      	movs	r1, #128	@ 0x80
 8001ed8:	0049      	lsls	r1, r1, #1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ede:	f7fe ff23 	bl	8000d28 <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee8:	f7fe ff1e 	bl	8000d28 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d904      	bls.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ef6:	2313      	movs	r3, #19
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	2203      	movs	r2, #3
 8001efc:	701a      	strb	r2, [r3, #0]
        break;
 8001efe:	e005      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f00:	4b30      	ldr	r3, [pc, #192]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d0ed      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f0c:	2313      	movs	r3, #19
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d15e      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f16:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f1a:	23c0      	movs	r3, #192	@ 0xc0
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d019      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d014      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f32:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f36:	4a24      	ldr	r2, [pc, #144]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f3c:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f40:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f42:	2180      	movs	r1, #128	@ 0x80
 8001f44:	0249      	lsls	r1, r1, #9
 8001f46:	430a      	orrs	r2, r1
 8001f48:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f50:	491e      	ldr	r1, [pc, #120]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	d016      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe fee0 	bl	8000d28 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6c:	e00c      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7fe fedb 	bl	8000d28 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	4a15      	ldr	r2, [pc, #84]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d904      	bls.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f7e:	2313      	movs	r3, #19
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2203      	movs	r2, #3
 8001f84:	701a      	strb	r2, [r3, #0]
            break;
 8001f86:	e004      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f88:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d0ed      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f92:	2313      	movs	r3, #19
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa0:	4a09      	ldr	r2, [pc, #36]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fb0:	e016      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2213      	movs	r2, #19
 8001fb8:	18ba      	adds	r2, r7, r2
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e00f      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	fffffcff 	.word	0xfffffcff
 8001fcc:	fffeffff 	.word	0xfffeffff
 8001fd0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd4:	2312      	movs	r3, #18
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2213      	movs	r2, #19
 8001fda:	18ba      	adds	r2, r7, r2
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fe0:	2311      	movs	r3, #17
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4bb6      	ldr	r3, [pc, #728]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fee:	4bb5      	ldr	r3, [pc, #724]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff0:	49b5      	ldr	r1, [pc, #724]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d009      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002000:	4bb0      	ldr	r3, [pc, #704]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002004:	2203      	movs	r2, #3
 8002006:	4393      	bics	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4bad      	ldr	r3, [pc, #692]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002010:	430a      	orrs	r2, r1
 8002012:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	d009      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800201e:	4ba9      	ldr	r3, [pc, #676]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	220c      	movs	r2, #12
 8002024:	4393      	bics	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4ba5      	ldr	r3, [pc, #660]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202e:	430a      	orrs	r2, r1
 8002030:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2204      	movs	r2, #4
 8002038:	4013      	ands	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800203c:	4ba1      	ldr	r3, [pc, #644]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800203e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002040:	2230      	movs	r2, #48	@ 0x30
 8002042:	4393      	bics	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	4b9e      	ldr	r3, [pc, #632]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800204c:	430a      	orrs	r2, r1
 800204e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2210      	movs	r2, #16
 8002056:	4013      	ands	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800205a:	4b9a      	ldr	r3, [pc, #616]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800205c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205e:	4a9b      	ldr	r2, [pc, #620]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	4b96      	ldr	r3, [pc, #600]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800206a:	430a      	orrs	r2, r1
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	@ 0x80
 8002074:	015b      	lsls	r3, r3, #5
 8002076:	4013      	ands	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800207a:	4b92      	ldr	r3, [pc, #584]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800207c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207e:	4a94      	ldr	r2, [pc, #592]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002080:	4013      	ands	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	4b8e      	ldr	r3, [pc, #568]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208a:	430a      	orrs	r2, r1
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	2380      	movs	r3, #128	@ 0x80
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d009      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800209a:	4b8a      	ldr	r3, [pc, #552]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209e:	4a8d      	ldr	r2, [pc, #564]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020a8:	4b86      	ldr	r3, [pc, #536]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020aa:	430a      	orrs	r2, r1
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4013      	ands	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020ba:	4b82      	ldr	r3, [pc, #520]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	4a86      	ldr	r2, [pc, #536]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c8:	4b7e      	ldr	r3, [pc, #504]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2220      	movs	r2, #32
 80020d4:	4013      	ands	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d8:	4b7a      	ldr	r3, [pc, #488]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020dc:	4a7f      	ldr	r2, [pc, #508]	@ (80022dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	4b77      	ldr	r3, [pc, #476]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2240      	movs	r2, #64	@ 0x40
 80020f2:	4013      	ands	r3, r2
 80020f4:	d009      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020f6:	4b73      	ldr	r3, [pc, #460]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fa:	4a79      	ldr	r2, [pc, #484]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	4b6f      	ldr	r3, [pc, #444]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002106:	430a      	orrs	r2, r1
 8002108:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	01db      	lsls	r3, r3, #7
 8002112:	4013      	ands	r3, r2
 8002114:	d015      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002116:	4b6b      	ldr	r3, [pc, #428]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	0899      	lsrs	r1, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002122:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002124:	430a      	orrs	r2, r1
 8002126:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	05db      	lsls	r3, r3, #23
 8002130:	429a      	cmp	r2, r3
 8002132:	d106      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002134:	4b63      	ldr	r3, [pc, #396]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4b62      	ldr	r3, [pc, #392]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800213a:	2180      	movs	r1, #128	@ 0x80
 800213c:	0249      	lsls	r1, r1, #9
 800213e:	430a      	orrs	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	031b      	lsls	r3, r3, #12
 800214a:	4013      	ands	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800214e:	4b5d      	ldr	r3, [pc, #372]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002152:	2240      	movs	r2, #64	@ 0x40
 8002154:	4393      	bics	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800215c:	4b59      	ldr	r3, [pc, #356]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215e:	430a      	orrs	r2, r1
 8002160:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	039b      	lsls	r3, r3, #14
 800216a:	4013      	ands	r3, r2
 800216c:	d016      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800216e:	4b55      	ldr	r3, [pc, #340]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002172:	4a5c      	ldr	r2, [pc, #368]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002174:	4013      	ands	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800217c:	4b51      	ldr	r3, [pc, #324]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800217e:	430a      	orrs	r2, r1
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002186:	2380      	movs	r3, #128	@ 0x80
 8002188:	03db      	lsls	r3, r3, #15
 800218a:	429a      	cmp	r2, r3
 800218c:	d106      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800218e:	4b4d      	ldr	r3, [pc, #308]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	4b4c      	ldr	r3, [pc, #304]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002194:	2180      	movs	r1, #128	@ 0x80
 8002196:	0449      	lsls	r1, r1, #17
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	03db      	lsls	r3, r3, #15
 80021a4:	4013      	ands	r3, r2
 80021a6:	d016      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80021a8:	4b46      	ldr	r3, [pc, #280]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ac:	4a4e      	ldr	r2, [pc, #312]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021b6:	4b43      	ldr	r3, [pc, #268]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	045b      	lsls	r3, r3, #17
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021c8:	4b3e      	ldr	r3, [pc, #248]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4b3d      	ldr	r3, [pc, #244]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ce:	2180      	movs	r1, #128	@ 0x80
 80021d0:	0449      	lsls	r1, r1, #17
 80021d2:	430a      	orrs	r2, r1
 80021d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	4013      	ands	r3, r2
 80021e0:	d014      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021e2:	4b38      	ldr	r3, [pc, #224]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	2203      	movs	r2, #3
 80021e8:	4393      	bics	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	4b34      	ldr	r3, [pc, #208]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f2:	430a      	orrs	r2, r1
 80021f4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d106      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021fe:	4b31      	ldr	r3, [pc, #196]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	4b30      	ldr	r3, [pc, #192]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002204:	2180      	movs	r1, #128	@ 0x80
 8002206:	0249      	lsls	r1, r1, #9
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	019b      	lsls	r3, r3, #6
 8002214:	4013      	ands	r3, r2
 8002216:	d014      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002218:	4b2a      	ldr	r3, [pc, #168]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	220c      	movs	r2, #12
 800221e:	4393      	bics	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002226:	4b27      	ldr	r3, [pc, #156]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002228:	430a      	orrs	r2, r1
 800222a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	2b04      	cmp	r3, #4
 8002232:	d106      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002234:	4b23      	ldr	r3, [pc, #140]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800223a:	2180      	movs	r1, #128	@ 0x80
 800223c:	0249      	lsls	r1, r1, #9
 800223e:	430a      	orrs	r2, r1
 8002240:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	045b      	lsls	r3, r3, #17
 800224a:	4013      	ands	r3, r2
 800224c:	d016      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800224e:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	4a22      	ldr	r2, [pc, #136]	@ (80022dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800225e:	430a      	orrs	r2, r1
 8002260:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	019b      	lsls	r3, r3, #6
 800226a:	429a      	cmp	r2, r3
 800226c:	d106      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	0449      	lsls	r1, r1, #17
 8002278:	430a      	orrs	r2, r1
 800227a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	049b      	lsls	r3, r3, #18
 8002284:	4013      	ands	r3, r2
 8002286:	d016      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002288:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	4a10      	ldr	r2, [pc, #64]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002298:	430a      	orrs	r2, r1
 800229a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d106      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ae:	2180      	movs	r1, #128	@ 0x80
 80022b0:	0449      	lsls	r1, r1, #17
 80022b2:	430a      	orrs	r2, r1
 80022b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80022b6:	2312      	movs	r3, #18
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	781b      	ldrb	r3, [r3, #0]
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b006      	add	sp, #24
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	efffffff 	.word	0xefffffff
 80022cc:	fffff3ff 	.word	0xfffff3ff
 80022d0:	fffffcff 	.word	0xfffffcff
 80022d4:	fff3ffff 	.word	0xfff3ffff
 80022d8:	ffcfffff 	.word	0xffcfffff
 80022dc:	ffffcfff 	.word	0xffffcfff
 80022e0:	ffff3fff 	.word	0xffff3fff
 80022e4:	ffbfffff 	.word	0xffbfffff
 80022e8:	feffffff 	.word	0xfeffffff

080022ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e046      	b.n	800238c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2288      	movs	r2, #136	@ 0x88
 8002302:	589b      	ldr	r3, [r3, r2]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2284      	movs	r2, #132	@ 0x84
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f7fe fba8 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2288      	movs	r2, #136	@ 0x88
 800231c:	2124      	movs	r1, #36	@ 0x24
 800231e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2101      	movs	r1, #1
 800232c:	438a      	bics	r2, r1
 800232e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	0018      	movs	r0, r3
 800233c:	f000 ffd2 	bl	80032e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	0018      	movs	r0, r3
 8002344:	f000 fc78 	bl	8002c38 <UART_SetConfig>
 8002348:	0003      	movs	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e01c      	b.n	800238c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	490d      	ldr	r1, [pc, #52]	@ (8002394 <HAL_UART_Init+0xa8>)
 800235e:	400a      	ands	r2, r1
 8002360:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	212a      	movs	r1, #42	@ 0x2a
 800236e:	438a      	bics	r2, r1
 8002370:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f001 f861 	bl	800344c <UART_CheckIdleState>
 800238a:	0003      	movs	r3, r0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}
 8002394:	ffffb7ff 	.word	0xffffb7ff

08002398 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	@ 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	1dbb      	adds	r3, r7, #6
 80023a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2288      	movs	r2, #136	@ 0x88
 80023aa:	589b      	ldr	r3, [r3, r2]
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d000      	beq.n	80023b2 <HAL_UART_Transmit_IT+0x1a>
 80023b0:	e08d      	b.n	80024ce <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_UART_Transmit_IT+0x28>
 80023b8:	1dbb      	adds	r3, r7, #6
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e085      	b.n	80024d0 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	015b      	lsls	r3, r3, #5
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d109      	bne.n	80023e4 <HAL_UART_Transmit_IT+0x4c>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2201      	movs	r2, #1
 80023dc:	4013      	ands	r3, r2
 80023de:	d001      	beq.n	80023e4 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e075      	b.n	80024d0 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1dba      	adds	r2, r7, #6
 80023ee:	2154      	movs	r1, #84	@ 0x54
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1dba      	adds	r2, r7, #6
 80023f8:	2156      	movs	r1, #86	@ 0x56
 80023fa:	8812      	ldrh	r2, [r2, #0]
 80023fc:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2290      	movs	r2, #144	@ 0x90
 8002408:	2100      	movs	r1, #0
 800240a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2288      	movs	r2, #136	@ 0x88
 8002410:	2121      	movs	r1, #33	@ 0x21
 8002412:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	059b      	lsls	r3, r3, #22
 800241c:	429a      	cmp	r2, r3
 800241e:	d12a      	bne.n	8002476 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	015b      	lsls	r3, r3, #5
 8002428:	429a      	cmp	r2, r3
 800242a:	d107      	bne.n	800243c <HAL_UART_Transmit_IT+0xa4>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a28      	ldr	r2, [pc, #160]	@ (80024d8 <HAL_UART_Transmit_IT+0x140>)
 8002438:	679a      	str	r2, [r3, #120]	@ 0x78
 800243a:	e002      	b.n	8002442 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a27      	ldr	r2, [pc, #156]	@ (80024dc <HAL_UART_Transmit_IT+0x144>)
 8002440:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002442:	f3ef 8310 	mrs	r3, PRIMASK
 8002446:	61fb      	str	r3, [r7, #28]
  return(result);
 8002448:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800244c:	2301      	movs	r3, #1
 800244e:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f383 8810 	msr	PRIMASK, r3
}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2180      	movs	r1, #128	@ 0x80
 8002464:	0409      	lsls	r1, r1, #16
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	f383 8810 	msr	PRIMASK, r3
}
 8002474:	e029      	b.n	80024ca <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	015b      	lsls	r3, r3, #5
 800247e:	429a      	cmp	r2, r3
 8002480:	d107      	bne.n	8002492 <HAL_UART_Transmit_IT+0xfa>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d103      	bne.n	8002492 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <HAL_UART_Transmit_IT+0x148>)
 800248e:	679a      	str	r2, [r3, #120]	@ 0x78
 8002490:	e002      	b.n	8002498 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a13      	ldr	r2, [pc, #76]	@ (80024e4 <HAL_UART_Transmit_IT+0x14c>)
 8002496:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002498:	f3ef 8310 	mrs	r3, PRIMASK
 800249c:	613b      	str	r3, [r7, #16]
  return(result);
 800249e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024a2:	2301      	movs	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f383 8810 	msr	PRIMASK, r3
}
 80024ac:	46c0      	nop			@ (mov r8, r8)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2180      	movs	r1, #128	@ 0x80
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f383 8810 	msr	PRIMASK, r3
}
 80024c8:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
  }
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b00c      	add	sp, #48	@ 0x30
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	08003c21 	.word	0x08003c21
 80024dc:	08003b35 	.word	0x08003b35
 80024e0:	08003a77 	.word	0x08003a77
 80024e4:	080039c3 	.word	0x080039c3

080024e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	1dbb      	adds	r3, r7, #6
 80024f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	228c      	movs	r2, #140	@ 0x8c
 80024fa:	589b      	ldr	r3, [r3, r2]
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d14f      	bne.n	80025a0 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_UART_Receive_IT+0x26>
 8002506:	1dbb      	adds	r3, r7, #6
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e047      	b.n	80025a2 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	015b      	lsls	r3, r3, #5
 800251a:	429a      	cmp	r2, r3
 800251c:	d109      	bne.n	8002532 <HAL_UART_Receive_IT+0x4a>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2201      	movs	r2, #1
 800252a:	4013      	ands	r3, r2
 800252c:	d001      	beq.n	8002532 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e037      	b.n	80025a2 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1b      	ldr	r2, [pc, #108]	@ (80025ac <HAL_UART_Receive_IT+0xc4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_UART_Receive_IT+0xa6>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1a      	ldr	r2, [pc, #104]	@ (80025b0 <HAL_UART_Receive_IT+0xc8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d020      	beq.n	800258e <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	041b      	lsls	r3, r3, #16
 8002556:	4013      	ands	r3, r2
 8002558:	d019      	beq.n	800258e <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800255a:	f3ef 8310 	mrs	r3, PRIMASK
 800255e:	613b      	str	r3, [r7, #16]
  return(result);
 8002560:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	2301      	movs	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f383 8810 	msr	PRIMASK, r3
}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2180      	movs	r1, #128	@ 0x80
 800257c:	04c9      	lsls	r1, r1, #19
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f383 8810 	msr	PRIMASK, r3
}
 800258c:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800258e:	1dbb      	adds	r3, r7, #6
 8002590:	881a      	ldrh	r2, [r3, #0]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	0018      	movs	r0, r3
 8002598:	f001 f872 	bl	8003680 <UART_Start_Receive_IT>
 800259c:	0003      	movs	r3, r0
 800259e:	e000      	b.n	80025a2 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b008      	add	sp, #32
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	40008000 	.word	0x40008000
 80025b0:	40008400 	.word	0x40008400

080025b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b0aa      	sub	sp, #168	@ 0xa8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	22a4      	movs	r2, #164	@ 0xa4
 80025c4:	18b9      	adds	r1, r7, r2
 80025c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	20a0      	movs	r0, #160	@ 0xa0
 80025d0:	1839      	adds	r1, r7, r0
 80025d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	249c      	movs	r4, #156	@ 0x9c
 80025dc:	1939      	adds	r1, r7, r4
 80025de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80025e0:	0011      	movs	r1, r2
 80025e2:	18bb      	adds	r3, r7, r2
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4aa2      	ldr	r2, [pc, #648]	@ (8002870 <HAL_UART_IRQHandler+0x2bc>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	2298      	movs	r2, #152	@ 0x98
 80025ec:	18bd      	adds	r5, r7, r2
 80025ee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80025f0:	18bb      	adds	r3, r7, r2
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d11a      	bne.n	800262e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2220      	movs	r2, #32
 80025fe:	4013      	ands	r3, r2
 8002600:	d015      	beq.n	800262e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002602:	183b      	adds	r3, r7, r0
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2220      	movs	r2, #32
 8002608:	4013      	ands	r3, r2
 800260a:	d105      	bne.n	8002618 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800260c:	193b      	adds	r3, r7, r4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	@ 0x80
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	4013      	ands	r3, r2
 8002616:	d00a      	beq.n	800262e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800261c:	2b00      	cmp	r3, #0
 800261e:	d100      	bne.n	8002622 <HAL_UART_IRQHandler+0x6e>
 8002620:	e2dc      	b.n	8002bdc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	0010      	movs	r0, r2
 800262a:	4798      	blx	r3
      }
      return;
 800262c:	e2d6      	b.n	8002bdc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800262e:	2398      	movs	r3, #152	@ 0x98
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d100      	bne.n	800263a <HAL_UART_IRQHandler+0x86>
 8002638:	e122      	b.n	8002880 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800263a:	239c      	movs	r3, #156	@ 0x9c
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a8c      	ldr	r2, [pc, #560]	@ (8002874 <HAL_UART_IRQHandler+0x2c0>)
 8002642:	4013      	ands	r3, r2
 8002644:	d106      	bne.n	8002654 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002646:	23a0      	movs	r3, #160	@ 0xa0
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a8a      	ldr	r2, [pc, #552]	@ (8002878 <HAL_UART_IRQHandler+0x2c4>)
 800264e:	4013      	ands	r3, r2
 8002650:	d100      	bne.n	8002654 <HAL_UART_IRQHandler+0xa0>
 8002652:	e115      	b.n	8002880 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002654:	23a4      	movs	r3, #164	@ 0xa4
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
 800265e:	d012      	beq.n	8002686 <HAL_UART_IRQHandler+0xd2>
 8002660:	23a0      	movs	r3, #160	@ 0xa0
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4013      	ands	r3, r2
 800266c:	d00b      	beq.n	8002686 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2290      	movs	r2, #144	@ 0x90
 800267a:	589b      	ldr	r3, [r3, r2]
 800267c:	2201      	movs	r2, #1
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2190      	movs	r1, #144	@ 0x90
 8002684:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002686:	23a4      	movs	r3, #164	@ 0xa4
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2202      	movs	r2, #2
 800268e:	4013      	ands	r3, r2
 8002690:	d011      	beq.n	80026b6 <HAL_UART_IRQHandler+0x102>
 8002692:	239c      	movs	r3, #156	@ 0x9c
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	4013      	ands	r3, r2
 800269c:	d00b      	beq.n	80026b6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2202      	movs	r2, #2
 80026a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2290      	movs	r2, #144	@ 0x90
 80026aa:	589b      	ldr	r3, [r3, r2]
 80026ac:	2204      	movs	r2, #4
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2190      	movs	r1, #144	@ 0x90
 80026b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026b6:	23a4      	movs	r3, #164	@ 0xa4
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2204      	movs	r2, #4
 80026be:	4013      	ands	r3, r2
 80026c0:	d011      	beq.n	80026e6 <HAL_UART_IRQHandler+0x132>
 80026c2:	239c      	movs	r3, #156	@ 0x9c
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	d00b      	beq.n	80026e6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2204      	movs	r2, #4
 80026d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2290      	movs	r2, #144	@ 0x90
 80026da:	589b      	ldr	r3, [r3, r2]
 80026dc:	2202      	movs	r2, #2
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2190      	movs	r1, #144	@ 0x90
 80026e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026e6:	23a4      	movs	r3, #164	@ 0xa4
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2208      	movs	r2, #8
 80026ee:	4013      	ands	r3, r2
 80026f0:	d017      	beq.n	8002722 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026f2:	23a0      	movs	r3, #160	@ 0xa0
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2220      	movs	r2, #32
 80026fa:	4013      	ands	r3, r2
 80026fc:	d105      	bne.n	800270a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80026fe:	239c      	movs	r3, #156	@ 0x9c
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5b      	ldr	r2, [pc, #364]	@ (8002874 <HAL_UART_IRQHandler+0x2c0>)
 8002706:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002708:	d00b      	beq.n	8002722 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2208      	movs	r2, #8
 8002710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2290      	movs	r2, #144	@ 0x90
 8002716:	589b      	ldr	r3, [r3, r2]
 8002718:	2208      	movs	r2, #8
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2190      	movs	r1, #144	@ 0x90
 8002720:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002722:	23a4      	movs	r3, #164	@ 0xa4
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4013      	ands	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_UART_IRQHandler+0x1a4>
 8002730:	23a0      	movs	r3, #160	@ 0xa0
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	04db      	lsls	r3, r3, #19
 800273a:	4013      	ands	r3, r2
 800273c:	d00c      	beq.n	8002758 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2280      	movs	r2, #128	@ 0x80
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2290      	movs	r2, #144	@ 0x90
 800274c:	589b      	ldr	r3, [r3, r2]
 800274e:	2220      	movs	r2, #32
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2190      	movs	r1, #144	@ 0x90
 8002756:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2290      	movs	r2, #144	@ 0x90
 800275c:	589b      	ldr	r3, [r3, r2]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d100      	bne.n	8002764 <HAL_UART_IRQHandler+0x1b0>
 8002762:	e23d      	b.n	8002be0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002764:	23a4      	movs	r3, #164	@ 0xa4
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2220      	movs	r2, #32
 800276c:	4013      	ands	r3, r2
 800276e:	d015      	beq.n	800279c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002770:	23a0      	movs	r3, #160	@ 0xa0
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2220      	movs	r2, #32
 8002778:	4013      	ands	r3, r2
 800277a:	d106      	bne.n	800278a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800277c:	239c      	movs	r3, #156	@ 0x9c
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	055b      	lsls	r3, r3, #21
 8002786:	4013      	ands	r3, r2
 8002788:	d008      	beq.n	800279c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	0010      	movs	r0, r2
 800279a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2290      	movs	r2, #144	@ 0x90
 80027a0:	589b      	ldr	r3, [r3, r2]
 80027a2:	2194      	movs	r1, #148	@ 0x94
 80027a4:	187a      	adds	r2, r7, r1
 80027a6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2240      	movs	r2, #64	@ 0x40
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b40      	cmp	r3, #64	@ 0x40
 80027b4:	d004      	beq.n	80027c0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2228      	movs	r2, #40	@ 0x28
 80027bc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027be:	d04c      	beq.n	800285a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f001 f880 	bl	80038c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2240      	movs	r2, #64	@ 0x40
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b40      	cmp	r3, #64	@ 0x40
 80027d4:	d13c      	bne.n	8002850 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d6:	f3ef 8310 	mrs	r3, PRIMASK
 80027da:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80027dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027de:	2090      	movs	r0, #144	@ 0x90
 80027e0:	183a      	adds	r2, r7, r0
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	2301      	movs	r3, #1
 80027e6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027ea:	f383 8810 	msr	PRIMASK, r3
}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2140      	movs	r1, #64	@ 0x40
 80027fc:	438a      	bics	r2, r1
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	183b      	adds	r3, r7, r0
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002808:	f383 8810 	msr	PRIMASK, r3
}
 800280c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	589b      	ldr	r3, [r3, r2]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d016      	beq.n	8002846 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2280      	movs	r2, #128	@ 0x80
 800281c:	589b      	ldr	r3, [r3, r2]
 800281e:	4a17      	ldr	r2, [pc, #92]	@ (800287c <HAL_UART_IRQHandler+0x2c8>)
 8002820:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2280      	movs	r2, #128	@ 0x80
 8002826:	589b      	ldr	r3, [r3, r2]
 8002828:	0018      	movs	r0, r3
 800282a:	f7fe fbdb 	bl	8000fe4 <HAL_DMA_Abort_IT>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d01c      	beq.n	800286c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2280      	movs	r2, #128	@ 0x80
 8002836:	589b      	ldr	r3, [r3, r2]
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	2180      	movs	r1, #128	@ 0x80
 800283e:	5852      	ldr	r2, [r2, r1]
 8002840:	0010      	movs	r0, r2
 8002842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002844:	e012      	b.n	800286c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0018      	movs	r0, r3
 800284a:	f000 f9e1 	bl	8002c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284e:	e00d      	b.n	800286c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0018      	movs	r0, r3
 8002854:	f000 f9dc 	bl	8002c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	e008      	b.n	800286c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 f9d7 	bl	8002c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2290      	movs	r2, #144	@ 0x90
 8002866:	2100      	movs	r1, #0
 8002868:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800286a:	e1b9      	b.n	8002be0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286c:	46c0      	nop			@ (mov r8, r8)
    return;
 800286e:	e1b7      	b.n	8002be0 <HAL_UART_IRQHandler+0x62c>
 8002870:	0000080f 	.word	0x0000080f
 8002874:	10000001 	.word	0x10000001
 8002878:	04000120 	.word	0x04000120
 800287c:	08003995 	.word	0x08003995

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d000      	beq.n	800288a <HAL_UART_IRQHandler+0x2d6>
 8002888:	e13e      	b.n	8002b08 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800288a:	23a4      	movs	r3, #164	@ 0xa4
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2210      	movs	r2, #16
 8002892:	4013      	ands	r3, r2
 8002894:	d100      	bne.n	8002898 <HAL_UART_IRQHandler+0x2e4>
 8002896:	e137      	b.n	8002b08 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002898:	23a0      	movs	r3, #160	@ 0xa0
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2210      	movs	r2, #16
 80028a0:	4013      	ands	r3, r2
 80028a2:	d100      	bne.n	80028a6 <HAL_UART_IRQHandler+0x2f2>
 80028a4:	e130      	b.n	8002b08 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2210      	movs	r2, #16
 80028ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2240      	movs	r2, #64	@ 0x40
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b40      	cmp	r3, #64	@ 0x40
 80028ba:	d000      	beq.n	80028be <HAL_UART_IRQHandler+0x30a>
 80028bc:	e0a4      	b.n	8002a08 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2280      	movs	r2, #128	@ 0x80
 80028c2:	589b      	ldr	r3, [r3, r2]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	217e      	movs	r1, #126	@ 0x7e
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d100      	bne.n	80028d8 <HAL_UART_IRQHandler+0x324>
 80028d6:	e185      	b.n	8002be4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	225c      	movs	r2, #92	@ 0x5c
 80028dc:	5a9b      	ldrh	r3, [r3, r2]
 80028de:	187a      	adds	r2, r7, r1
 80028e0:	8812      	ldrh	r2, [r2, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d300      	bcc.n	80028e8 <HAL_UART_IRQHandler+0x334>
 80028e6:	e17d      	b.n	8002be4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	187a      	adds	r2, r7, r1
 80028ec:	215e      	movs	r1, #94	@ 0x5e
 80028ee:	8812      	ldrh	r2, [r2, #0]
 80028f0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2280      	movs	r2, #128	@ 0x80
 80028f6:	589b      	ldr	r3, [r3, r2]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2220      	movs	r2, #32
 80028fe:	4013      	ands	r3, r2
 8002900:	d170      	bne.n	80029e4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002902:	f3ef 8310 	mrs	r3, PRIMASK
 8002906:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800290a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800290c:	2301      	movs	r3, #1
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002912:	f383 8810 	msr	PRIMASK, r3
}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	49b4      	ldr	r1, [pc, #720]	@ (8002bf4 <HAL_UART_IRQHandler+0x640>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800292a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292e:	f383 8810 	msr	PRIMASK, r3
}
 8002932:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002934:	f3ef 8310 	mrs	r3, PRIMASK
 8002938:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800293a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293c:	677b      	str	r3, [r7, #116]	@ 0x74
 800293e:	2301      	movs	r3, #1
 8002940:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002944:	f383 8810 	msr	PRIMASK, r3
}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	438a      	bics	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800295c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002960:	f383 8810 	msr	PRIMASK, r3
}
 8002964:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002966:	f3ef 8310 	mrs	r3, PRIMASK
 800296a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800296c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800296e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002970:	2301      	movs	r3, #1
 8002972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002976:	f383 8810 	msr	PRIMASK, r3
}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2140      	movs	r1, #64	@ 0x40
 8002988:	438a      	bics	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800298e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002992:	f383 8810 	msr	PRIMASK, r3
}
 8002996:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	228c      	movs	r2, #140	@ 0x8c
 800299c:	2120      	movs	r1, #32
 800299e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a6:	f3ef 8310 	mrs	r3, PRIMASK
 80029aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80029ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029b0:	2301      	movs	r3, #1
 80029b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029b6:	f383 8810 	msr	PRIMASK, r3
}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2110      	movs	r1, #16
 80029c8:	438a      	bics	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	589b      	ldr	r3, [r3, r2]
 80029de:	0018      	movs	r0, r3
 80029e0:	f7fe faa0 	bl	8000f24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	225c      	movs	r2, #92	@ 0x5c
 80029ee:	5a9a      	ldrh	r2, [r3, r2]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	215e      	movs	r1, #94	@ 0x5e
 80029f4:	5a5b      	ldrh	r3, [r3, r1]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	0011      	movs	r1, r2
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 f90d 	bl	8002c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a06:	e0ed      	b.n	8002be4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	225c      	movs	r2, #92	@ 0x5c
 8002a0c:	5a99      	ldrh	r1, [r3, r2]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	225e      	movs	r2, #94	@ 0x5e
 8002a12:	5a9b      	ldrh	r3, [r3, r2]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	208e      	movs	r0, #142	@ 0x8e
 8002a18:	183b      	adds	r3, r7, r0
 8002a1a:	1a8a      	subs	r2, r1, r2
 8002a1c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	225e      	movs	r2, #94	@ 0x5e
 8002a22:	5a9b      	ldrh	r3, [r3, r2]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d100      	bne.n	8002a2c <HAL_UART_IRQHandler+0x478>
 8002a2a:	e0dd      	b.n	8002be8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002a2c:	183b      	adds	r3, r7, r0
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d100      	bne.n	8002a36 <HAL_UART_IRQHandler+0x482>
 8002a34:	e0d8      	b.n	8002be8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a36:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a3e:	2488      	movs	r4, #136	@ 0x88
 8002a40:	193a      	adds	r2, r7, r4
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f383 8810 	msr	PRIMASK, r3
}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4967      	ldr	r1, [pc, #412]	@ (8002bf8 <HAL_UART_IRQHandler+0x644>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	193b      	adds	r3, r7, r4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a72:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a74:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a76:	2484      	movs	r4, #132	@ 0x84
 8002a78:	193a      	adds	r2, r7, r4
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f383 8810 	msr	PRIMASK, r3
}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	495a      	ldr	r1, [pc, #360]	@ (8002bfc <HAL_UART_IRQHandler+0x648>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	193b      	adds	r3, r7, r4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f383 8810 	msr	PRIMASK, r3
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	228c      	movs	r2, #140	@ 0x8c
 8002aaa:	2120      	movs	r1, #32
 8002aac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aba:	f3ef 8310 	mrs	r3, PRIMASK
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac2:	2480      	movs	r4, #128	@ 0x80
 8002ac4:	193a      	adds	r2, r7, r4
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ace:	f383 8810 	msr	PRIMASK, r3
}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2110      	movs	r1, #16
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aec:	f383 8810 	msr	PRIMASK, r3
}
 8002af0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002af8:	183b      	adds	r3, r7, r0
 8002afa:	881a      	ldrh	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	0011      	movs	r1, r2
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 f88d 	bl	8002c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b06:	e06f      	b.n	8002be8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b08:	23a4      	movs	r3, #164	@ 0xa4
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	2380      	movs	r3, #128	@ 0x80
 8002b10:	035b      	lsls	r3, r3, #13
 8002b12:	4013      	ands	r3, r2
 8002b14:	d010      	beq.n	8002b38 <HAL_UART_IRQHandler+0x584>
 8002b16:	239c      	movs	r3, #156	@ 0x9c
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	03db      	lsls	r3, r3, #15
 8002b20:	4013      	ands	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2280      	movs	r2, #128	@ 0x80
 8002b2a:	0352      	lsls	r2, r2, #13
 8002b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f001 fe47 	bl	80047c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b36:	e05a      	b.n	8002bee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002b38:	23a4      	movs	r3, #164	@ 0xa4
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2280      	movs	r2, #128	@ 0x80
 8002b40:	4013      	ands	r3, r2
 8002b42:	d016      	beq.n	8002b72 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002b44:	23a0      	movs	r3, #160	@ 0xa0
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2280      	movs	r2, #128	@ 0x80
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d106      	bne.n	8002b5e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002b50:	239c      	movs	r3, #156	@ 0x9c
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	@ 0x80
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d042      	beq.n	8002bec <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	0010      	movs	r0, r2
 8002b6e:	4798      	blx	r3
    }
    return;
 8002b70:	e03c      	b.n	8002bec <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b72:	23a4      	movs	r3, #164	@ 0xa4
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2240      	movs	r2, #64	@ 0x40
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d00a      	beq.n	8002b94 <HAL_UART_IRQHandler+0x5e0>
 8002b7e:	23a0      	movs	r3, #160	@ 0xa0
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2240      	movs	r2, #64	@ 0x40
 8002b86:	4013      	ands	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f001 f8c1 	bl	8003d14 <UART_EndTransmit_IT>
    return;
 8002b92:	e02c      	b.n	8002bee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002b94:	23a4      	movs	r3, #164	@ 0xa4
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d00b      	beq.n	8002bba <HAL_UART_IRQHandler+0x606>
 8002ba2:	23a0      	movs	r3, #160	@ 0xa0
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	05db      	lsls	r3, r3, #23
 8002bac:	4013      	ands	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f001 fe16 	bl	80047e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bb8:	e019      	b.n	8002bee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002bba:	23a4      	movs	r3, #164	@ 0xa4
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	045b      	lsls	r3, r3, #17
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d012      	beq.n	8002bee <HAL_UART_IRQHandler+0x63a>
 8002bc8:	23a0      	movs	r3, #160	@ 0xa0
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da0d      	bge.n	8002bee <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f001 fdfd 	bl	80047d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bda:	e008      	b.n	8002bee <HAL_UART_IRQHandler+0x63a>
      return;
 8002bdc:	46c0      	nop			@ (mov r8, r8)
 8002bde:	e006      	b.n	8002bee <HAL_UART_IRQHandler+0x63a>
    return;
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	e004      	b.n	8002bee <HAL_UART_IRQHandler+0x63a>
      return;
 8002be4:	46c0      	nop			@ (mov r8, r8)
 8002be6:	e002      	b.n	8002bee <HAL_UART_IRQHandler+0x63a>
      return;
 8002be8:	46c0      	nop			@ (mov r8, r8)
 8002bea:	e000      	b.n	8002bee <HAL_UART_IRQHandler+0x63a>
    return;
 8002bec:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b02a      	add	sp, #168	@ 0xa8
 8002bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf4:	fffffeff 	.word	0xfffffeff
 8002bf8:	fffffedf 	.word	0xfffffedf
 8002bfc:	effffffe 	.word	0xeffffffe

08002c00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	000a      	movs	r2, r1
 8002c2a:	1cbb      	adds	r3, r7, #2
 8002c2c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b002      	add	sp, #8
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b090      	sub	sp, #64	@ 0x40
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c40:	231a      	movs	r3, #26
 8002c42:	2220      	movs	r2, #32
 8002c44:	189b      	adds	r3, r3, r2
 8002c46:	19db      	adds	r3, r3, r7
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f70 <UART_SetConfig+0x338>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c76:	430b      	orrs	r3, r1
 8002c78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4abc      	ldr	r2, [pc, #752]	@ (8002f74 <UART_SetConfig+0x33c>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	68d9      	ldr	r1, [r3, #12]
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	0003      	movs	r3, r0
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4ab6      	ldr	r2, [pc, #728]	@ (8002f78 <UART_SetConfig+0x340>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <UART_SetConfig+0x80>
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4ab4      	ldr	r2, [pc, #720]	@ (8002f7c <UART_SetConfig+0x344>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4ab0      	ldr	r2, [pc, #704]	@ (8002f80 <UART_SetConfig+0x348>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	0018      	movs	r0, r3
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4aa5      	ldr	r2, [pc, #660]	@ (8002f84 <UART_SetConfig+0x34c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d131      	bne.n	8002d56 <UART_SetConfig+0x11e>
 8002cf2:	4ba5      	ldr	r3, [pc, #660]	@ (8002f88 <UART_SetConfig+0x350>)
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d01d      	beq.n	8002d3a <UART_SetConfig+0x102>
 8002cfe:	d823      	bhi.n	8002d48 <UART_SetConfig+0x110>
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d00c      	beq.n	8002d1e <UART_SetConfig+0xe6>
 8002d04:	d820      	bhi.n	8002d48 <UART_SetConfig+0x110>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <UART_SetConfig+0xd8>
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d00e      	beq.n	8002d2c <UART_SetConfig+0xf4>
 8002d0e:	e01b      	b.n	8002d48 <UART_SetConfig+0x110>
 8002d10:	231b      	movs	r3, #27
 8002d12:	2220      	movs	r2, #32
 8002d14:	189b      	adds	r3, r3, r2
 8002d16:	19db      	adds	r3, r3, r7
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e154      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002d1e:	231b      	movs	r3, #27
 8002d20:	2220      	movs	r2, #32
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	19db      	adds	r3, r3, r7
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e14d      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002d2c:	231b      	movs	r3, #27
 8002d2e:	2220      	movs	r2, #32
 8002d30:	189b      	adds	r3, r3, r2
 8002d32:	19db      	adds	r3, r3, r7
 8002d34:	2204      	movs	r2, #4
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e146      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002d3a:	231b      	movs	r3, #27
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	189b      	adds	r3, r3, r2
 8002d40:	19db      	adds	r3, r3, r7
 8002d42:	2208      	movs	r2, #8
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	e13f      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002d48:	231b      	movs	r3, #27
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	189b      	adds	r3, r3, r2
 8002d4e:	19db      	adds	r3, r3, r7
 8002d50:	2210      	movs	r2, #16
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e138      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a8c      	ldr	r2, [pc, #560]	@ (8002f8c <UART_SetConfig+0x354>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d131      	bne.n	8002dc4 <UART_SetConfig+0x18c>
 8002d60:	4b89      	ldr	r3, [pc, #548]	@ (8002f88 <UART_SetConfig+0x350>)
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	220c      	movs	r2, #12
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	d01d      	beq.n	8002da8 <UART_SetConfig+0x170>
 8002d6c:	d823      	bhi.n	8002db6 <UART_SetConfig+0x17e>
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d00c      	beq.n	8002d8c <UART_SetConfig+0x154>
 8002d72:	d820      	bhi.n	8002db6 <UART_SetConfig+0x17e>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <UART_SetConfig+0x146>
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d00e      	beq.n	8002d9a <UART_SetConfig+0x162>
 8002d7c:	e01b      	b.n	8002db6 <UART_SetConfig+0x17e>
 8002d7e:	231b      	movs	r3, #27
 8002d80:	2220      	movs	r2, #32
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	19db      	adds	r3, r3, r7
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e11d      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002d8c:	231b      	movs	r3, #27
 8002d8e:	2220      	movs	r2, #32
 8002d90:	189b      	adds	r3, r3, r2
 8002d92:	19db      	adds	r3, r3, r7
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	e116      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002d9a:	231b      	movs	r3, #27
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	189b      	adds	r3, r3, r2
 8002da0:	19db      	adds	r3, r3, r7
 8002da2:	2204      	movs	r2, #4
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e10f      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002da8:	231b      	movs	r3, #27
 8002daa:	2220      	movs	r2, #32
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	19db      	adds	r3, r3, r7
 8002db0:	2208      	movs	r2, #8
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e108      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002db6:	231b      	movs	r3, #27
 8002db8:	2220      	movs	r2, #32
 8002dba:	189b      	adds	r3, r3, r2
 8002dbc:	19db      	adds	r3, r3, r7
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e101      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a71      	ldr	r2, [pc, #452]	@ (8002f90 <UART_SetConfig+0x358>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d131      	bne.n	8002e32 <UART_SetConfig+0x1fa>
 8002dce:	4b6e      	ldr	r3, [pc, #440]	@ (8002f88 <UART_SetConfig+0x350>)
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd2:	2230      	movs	r2, #48	@ 0x30
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b30      	cmp	r3, #48	@ 0x30
 8002dd8:	d01d      	beq.n	8002e16 <UART_SetConfig+0x1de>
 8002dda:	d823      	bhi.n	8002e24 <UART_SetConfig+0x1ec>
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d00c      	beq.n	8002dfa <UART_SetConfig+0x1c2>
 8002de0:	d820      	bhi.n	8002e24 <UART_SetConfig+0x1ec>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <UART_SetConfig+0x1b4>
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d00e      	beq.n	8002e08 <UART_SetConfig+0x1d0>
 8002dea:	e01b      	b.n	8002e24 <UART_SetConfig+0x1ec>
 8002dec:	231b      	movs	r3, #27
 8002dee:	2220      	movs	r2, #32
 8002df0:	189b      	adds	r3, r3, r2
 8002df2:	19db      	adds	r3, r3, r7
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	e0e6      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002dfa:	231b      	movs	r3, #27
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	189b      	adds	r3, r3, r2
 8002e00:	19db      	adds	r3, r3, r7
 8002e02:	2202      	movs	r2, #2
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	e0df      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002e08:	231b      	movs	r3, #27
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	189b      	adds	r3, r3, r2
 8002e0e:	19db      	adds	r3, r3, r7
 8002e10:	2204      	movs	r2, #4
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e0d8      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002e16:	231b      	movs	r3, #27
 8002e18:	2220      	movs	r2, #32
 8002e1a:	189b      	adds	r3, r3, r2
 8002e1c:	19db      	adds	r3, r3, r7
 8002e1e:	2208      	movs	r2, #8
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e0d1      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002e24:	231b      	movs	r3, #27
 8002e26:	2220      	movs	r2, #32
 8002e28:	189b      	adds	r3, r3, r2
 8002e2a:	19db      	adds	r3, r3, r7
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e0ca      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a57      	ldr	r2, [pc, #348]	@ (8002f94 <UART_SetConfig+0x35c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d106      	bne.n	8002e4a <UART_SetConfig+0x212>
 8002e3c:	231b      	movs	r3, #27
 8002e3e:	2220      	movs	r2, #32
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	19db      	adds	r3, r3, r7
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e0be      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a52      	ldr	r2, [pc, #328]	@ (8002f98 <UART_SetConfig+0x360>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d106      	bne.n	8002e62 <UART_SetConfig+0x22a>
 8002e54:	231b      	movs	r3, #27
 8002e56:	2220      	movs	r2, #32
 8002e58:	189b      	adds	r3, r3, r2
 8002e5a:	19db      	adds	r3, r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	e0b2      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a4d      	ldr	r2, [pc, #308]	@ (8002f9c <UART_SetConfig+0x364>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d106      	bne.n	8002e7a <UART_SetConfig+0x242>
 8002e6c:	231b      	movs	r3, #27
 8002e6e:	2220      	movs	r2, #32
 8002e70:	189b      	adds	r3, r3, r2
 8002e72:	19db      	adds	r3, r3, r7
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e0a6      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f78 <UART_SetConfig+0x340>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d13e      	bne.n	8002f02 <UART_SetConfig+0x2ca>
 8002e84:	4b40      	ldr	r3, [pc, #256]	@ (8002f88 <UART_SetConfig+0x350>)
 8002e86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e88:	23c0      	movs	r3, #192	@ 0xc0
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	22c0      	movs	r2, #192	@ 0xc0
 8002e90:	0112      	lsls	r2, r2, #4
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d027      	beq.n	8002ee6 <UART_SetConfig+0x2ae>
 8002e96:	22c0      	movs	r2, #192	@ 0xc0
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d82a      	bhi.n	8002ef4 <UART_SetConfig+0x2bc>
 8002e9e:	2280      	movs	r2, #128	@ 0x80
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d011      	beq.n	8002eca <UART_SetConfig+0x292>
 8002ea6:	2280      	movs	r2, #128	@ 0x80
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d822      	bhi.n	8002ef4 <UART_SetConfig+0x2bc>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <UART_SetConfig+0x284>
 8002eb2:	2280      	movs	r2, #128	@ 0x80
 8002eb4:	00d2      	lsls	r2, r2, #3
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <UART_SetConfig+0x2a0>
 8002eba:	e01b      	b.n	8002ef4 <UART_SetConfig+0x2bc>
 8002ebc:	231b      	movs	r3, #27
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	189b      	adds	r3, r3, r2
 8002ec2:	19db      	adds	r3, r3, r7
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e07e      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002eca:	231b      	movs	r3, #27
 8002ecc:	2220      	movs	r2, #32
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e077      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002ed8:	231b      	movs	r3, #27
 8002eda:	2220      	movs	r2, #32
 8002edc:	189b      	adds	r3, r3, r2
 8002ede:	19db      	adds	r3, r3, r7
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e070      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002ee6:	231b      	movs	r3, #27
 8002ee8:	2220      	movs	r2, #32
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	19db      	adds	r3, r3, r7
 8002eee:	2208      	movs	r2, #8
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e069      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002ef4:	231b      	movs	r3, #27
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	189b      	adds	r3, r3, r2
 8002efa:	19db      	adds	r3, r3, r7
 8002efc:	2210      	movs	r2, #16
 8002efe:	701a      	strb	r2, [r3, #0]
 8002f00:	e062      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1d      	ldr	r2, [pc, #116]	@ (8002f7c <UART_SetConfig+0x344>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d157      	bne.n	8002fbc <UART_SetConfig+0x384>
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <UART_SetConfig+0x350>)
 8002f0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f10:	23c0      	movs	r3, #192	@ 0xc0
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	22c0      	movs	r2, #192	@ 0xc0
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d040      	beq.n	8002fa0 <UART_SetConfig+0x368>
 8002f1e:	22c0      	movs	r2, #192	@ 0xc0
 8002f20:	0092      	lsls	r2, r2, #2
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d843      	bhi.n	8002fae <UART_SetConfig+0x376>
 8002f26:	2280      	movs	r2, #128	@ 0x80
 8002f28:	0092      	lsls	r2, r2, #2
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d011      	beq.n	8002f52 <UART_SetConfig+0x31a>
 8002f2e:	2280      	movs	r2, #128	@ 0x80
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d83b      	bhi.n	8002fae <UART_SetConfig+0x376>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <UART_SetConfig+0x30c>
 8002f3a:	2280      	movs	r2, #128	@ 0x80
 8002f3c:	0052      	lsls	r2, r2, #1
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <UART_SetConfig+0x328>
 8002f42:	e034      	b.n	8002fae <UART_SetConfig+0x376>
 8002f44:	231b      	movs	r3, #27
 8002f46:	2220      	movs	r2, #32
 8002f48:	189b      	adds	r3, r3, r2
 8002f4a:	19db      	adds	r3, r3, r7
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e03a      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002f52:	231b      	movs	r3, #27
 8002f54:	2220      	movs	r2, #32
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	19db      	adds	r3, r3, r7
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e033      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002f60:	231b      	movs	r3, #27
 8002f62:	2220      	movs	r2, #32
 8002f64:	189b      	adds	r3, r3, r2
 8002f66:	19db      	adds	r3, r3, r7
 8002f68:	2204      	movs	r2, #4
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	e02c      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	cfff69f3 	.word	0xcfff69f3
 8002f74:	ffffcfff 	.word	0xffffcfff
 8002f78:	40008000 	.word	0x40008000
 8002f7c:	40008400 	.word	0x40008400
 8002f80:	11fff4ff 	.word	0x11fff4ff
 8002f84:	40013800 	.word	0x40013800
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	40004800 	.word	0x40004800
 8002f94:	40004c00 	.word	0x40004c00
 8002f98:	40005000 	.word	0x40005000
 8002f9c:	40013c00 	.word	0x40013c00
 8002fa0:	231b      	movs	r3, #27
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	189b      	adds	r3, r3, r2
 8002fa6:	19db      	adds	r3, r3, r7
 8002fa8:	2208      	movs	r2, #8
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e00c      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002fae:	231b      	movs	r3, #27
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	189b      	adds	r3, r3, r2
 8002fb4:	19db      	adds	r3, r3, r7
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	e005      	b.n	8002fc8 <UART_SetConfig+0x390>
 8002fbc:	231b      	movs	r3, #27
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	189b      	adds	r3, r3, r2
 8002fc2:	19db      	adds	r3, r3, r7
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4ac1      	ldr	r2, [pc, #772]	@ (80032d4 <UART_SetConfig+0x69c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d005      	beq.n	8002fde <UART_SetConfig+0x3a6>
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4ac0      	ldr	r2, [pc, #768]	@ (80032d8 <UART_SetConfig+0x6a0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d000      	beq.n	8002fde <UART_SetConfig+0x3a6>
 8002fdc:	e093      	b.n	8003106 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fde:	231b      	movs	r3, #27
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	189b      	adds	r3, r3, r2
 8002fe4:	19db      	adds	r3, r3, r7
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d015      	beq.n	8003018 <UART_SetConfig+0x3e0>
 8002fec:	dc18      	bgt.n	8003020 <UART_SetConfig+0x3e8>
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d00d      	beq.n	800300e <UART_SetConfig+0x3d6>
 8002ff2:	dc15      	bgt.n	8003020 <UART_SetConfig+0x3e8>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <UART_SetConfig+0x3c6>
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d005      	beq.n	8003008 <UART_SetConfig+0x3d0>
 8002ffc:	e010      	b.n	8003020 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ffe:	f7fe ff23 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8003002:	0003      	movs	r3, r0
 8003004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003006:	e014      	b.n	8003032 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003008:	4bb4      	ldr	r3, [pc, #720]	@ (80032dc <UART_SetConfig+0x6a4>)
 800300a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800300c:	e011      	b.n	8003032 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300e:	f7fe fe8f 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8003012:	0003      	movs	r3, r0
 8003014:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003016:	e00c      	b.n	8003032 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003018:	2380      	movs	r3, #128	@ 0x80
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800301e:	e008      	b.n	8003032 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003024:	231a      	movs	r3, #26
 8003026:	2220      	movs	r2, #32
 8003028:	189b      	adds	r3, r3, r2
 800302a:	19db      	adds	r3, r3, r7
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
        break;
 8003030:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003034:	2b00      	cmp	r3, #0
 8003036:	d100      	bne.n	800303a <UART_SetConfig+0x402>
 8003038:	e135      	b.n	80032a6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800303e:	4ba8      	ldr	r3, [pc, #672]	@ (80032e0 <UART_SetConfig+0x6a8>)
 8003040:	0052      	lsls	r2, r2, #1
 8003042:	5ad3      	ldrh	r3, [r2, r3]
 8003044:	0019      	movs	r1, r3
 8003046:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003048:	f7fd f85c 	bl	8000104 <__udivsi3>
 800304c:	0003      	movs	r3, r0
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	0013      	movs	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	189b      	adds	r3, r3, r2
 800305a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800305c:	429a      	cmp	r2, r3
 800305e:	d305      	bcc.n	800306c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003068:	429a      	cmp	r2, r3
 800306a:	d906      	bls.n	800307a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800306c:	231a      	movs	r3, #26
 800306e:	2220      	movs	r2, #32
 8003070:	189b      	adds	r3, r3, r2
 8003072:	19db      	adds	r3, r3, r7
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e044      	b.n	8003104 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800307a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003086:	4b96      	ldr	r3, [pc, #600]	@ (80032e0 <UART_SetConfig+0x6a8>)
 8003088:	0052      	lsls	r2, r2, #1
 800308a:	5ad3      	ldrh	r3, [r2, r3]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	69b8      	ldr	r0, [r7, #24]
 8003098:	69f9      	ldr	r1, [r7, #28]
 800309a:	f7fd f9a9 	bl	80003f0 <__aeabi_uldivmod>
 800309e:	0002      	movs	r2, r0
 80030a0:	000b      	movs	r3, r1
 80030a2:	0e11      	lsrs	r1, r2, #24
 80030a4:	021d      	lsls	r5, r3, #8
 80030a6:	430d      	orrs	r5, r1
 80030a8:	0214      	lsls	r4, r2, #8
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68b8      	ldr	r0, [r7, #8]
 80030b8:	68f9      	ldr	r1, [r7, #12]
 80030ba:	1900      	adds	r0, r0, r4
 80030bc:	4169      	adcs	r1, r5
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	2300      	movs	r3, #0
 80030c6:	607b      	str	r3, [r7, #4]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f7fd f990 	bl	80003f0 <__aeabi_uldivmod>
 80030d0:	0002      	movs	r2, r0
 80030d2:	000b      	movs	r3, r1
 80030d4:	0013      	movs	r3, r2
 80030d6:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030da:	23c0      	movs	r3, #192	@ 0xc0
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	429a      	cmp	r2, r3
 80030e0:	d309      	bcc.n	80030f6 <UART_SetConfig+0x4be>
 80030e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e4:	2380      	movs	r3, #128	@ 0x80
 80030e6:	035b      	lsls	r3, r3, #13
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d204      	bcs.n	80030f6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	e006      	b.n	8003104 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80030f6:	231a      	movs	r3, #26
 80030f8:	2220      	movs	r2, #32
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	19db      	adds	r3, r3, r7
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003102:	e0d0      	b.n	80032a6 <UART_SetConfig+0x66e>
 8003104:	e0cf      	b.n	80032a6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	429a      	cmp	r2, r3
 8003110:	d000      	beq.n	8003114 <UART_SetConfig+0x4dc>
 8003112:	e070      	b.n	80031f6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003114:	231b      	movs	r3, #27
 8003116:	2220      	movs	r2, #32
 8003118:	189b      	adds	r3, r3, r2
 800311a:	19db      	adds	r3, r3, r7
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b08      	cmp	r3, #8
 8003120:	d015      	beq.n	800314e <UART_SetConfig+0x516>
 8003122:	dc18      	bgt.n	8003156 <UART_SetConfig+0x51e>
 8003124:	2b04      	cmp	r3, #4
 8003126:	d00d      	beq.n	8003144 <UART_SetConfig+0x50c>
 8003128:	dc15      	bgt.n	8003156 <UART_SetConfig+0x51e>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <UART_SetConfig+0x4fc>
 800312e:	2b02      	cmp	r3, #2
 8003130:	d005      	beq.n	800313e <UART_SetConfig+0x506>
 8003132:	e010      	b.n	8003156 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003134:	f7fe fe88 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8003138:	0003      	movs	r3, r0
 800313a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800313c:	e014      	b.n	8003168 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800313e:	4b67      	ldr	r3, [pc, #412]	@ (80032dc <UART_SetConfig+0x6a4>)
 8003140:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003142:	e011      	b.n	8003168 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003144:	f7fe fdf4 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8003148:	0003      	movs	r3, r0
 800314a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800314c:	e00c      	b.n	8003168 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003154:	e008      	b.n	8003168 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800315a:	231a      	movs	r3, #26
 800315c:	2220      	movs	r2, #32
 800315e:	189b      	adds	r3, r3, r2
 8003160:	19db      	adds	r3, r3, r7
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
        break;
 8003166:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316a:	2b00      	cmp	r3, #0
 800316c:	d100      	bne.n	8003170 <UART_SetConfig+0x538>
 800316e:	e09a      	b.n	80032a6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003174:	4b5a      	ldr	r3, [pc, #360]	@ (80032e0 <UART_SetConfig+0x6a8>)
 8003176:	0052      	lsls	r2, r2, #1
 8003178:	5ad3      	ldrh	r3, [r2, r3]
 800317a:	0019      	movs	r1, r3
 800317c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800317e:	f7fc ffc1 	bl	8000104 <__udivsi3>
 8003182:	0003      	movs	r3, r0
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	18d2      	adds	r2, r2, r3
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	0019      	movs	r1, r3
 8003194:	0010      	movs	r0, r2
 8003196:	f7fc ffb5 	bl	8000104 <__udivsi3>
 800319a:	0003      	movs	r3, r0
 800319c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d921      	bls.n	80031e8 <UART_SetConfig+0x5b0>
 80031a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031a6:	2380      	movs	r3, #128	@ 0x80
 80031a8:	025b      	lsls	r3, r3, #9
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d21c      	bcs.n	80031e8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	200e      	movs	r0, #14
 80031b4:	2420      	movs	r4, #32
 80031b6:	1903      	adds	r3, r0, r4
 80031b8:	19db      	adds	r3, r3, r7
 80031ba:	210f      	movs	r1, #15
 80031bc:	438a      	bics	r2, r1
 80031be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2207      	movs	r2, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	b299      	uxth	r1, r3
 80031cc:	1903      	adds	r3, r0, r4
 80031ce:	19db      	adds	r3, r3, r7
 80031d0:	1902      	adds	r2, r0, r4
 80031d2:	19d2      	adds	r2, r2, r7
 80031d4:	8812      	ldrh	r2, [r2, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	1902      	adds	r2, r0, r4
 80031e0:	19d2      	adds	r2, r2, r7
 80031e2:	8812      	ldrh	r2, [r2, #0]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	e05e      	b.n	80032a6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80031e8:	231a      	movs	r3, #26
 80031ea:	2220      	movs	r2, #32
 80031ec:	189b      	adds	r3, r3, r2
 80031ee:	19db      	adds	r3, r3, r7
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e057      	b.n	80032a6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031f6:	231b      	movs	r3, #27
 80031f8:	2220      	movs	r2, #32
 80031fa:	189b      	adds	r3, r3, r2
 80031fc:	19db      	adds	r3, r3, r7
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d015      	beq.n	8003230 <UART_SetConfig+0x5f8>
 8003204:	dc18      	bgt.n	8003238 <UART_SetConfig+0x600>
 8003206:	2b04      	cmp	r3, #4
 8003208:	d00d      	beq.n	8003226 <UART_SetConfig+0x5ee>
 800320a:	dc15      	bgt.n	8003238 <UART_SetConfig+0x600>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <UART_SetConfig+0x5de>
 8003210:	2b02      	cmp	r3, #2
 8003212:	d005      	beq.n	8003220 <UART_SetConfig+0x5e8>
 8003214:	e010      	b.n	8003238 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003216:	f7fe fe17 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 800321a:	0003      	movs	r3, r0
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800321e:	e014      	b.n	800324a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b2e      	ldr	r3, [pc, #184]	@ (80032dc <UART_SetConfig+0x6a4>)
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003224:	e011      	b.n	800324a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe fd83 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 800322a:	0003      	movs	r3, r0
 800322c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800322e:	e00c      	b.n	800324a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003236:	e008      	b.n	800324a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800323c:	231a      	movs	r3, #26
 800323e:	2220      	movs	r2, #32
 8003240:	189b      	adds	r3, r3, r2
 8003242:	19db      	adds	r3, r3, r7
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
        break;
 8003248:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800324a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02a      	beq.n	80032a6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003254:	4b22      	ldr	r3, [pc, #136]	@ (80032e0 <UART_SetConfig+0x6a8>)
 8003256:	0052      	lsls	r2, r2, #1
 8003258:	5ad3      	ldrh	r3, [r2, r3]
 800325a:	0019      	movs	r1, r3
 800325c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800325e:	f7fc ff51 	bl	8000104 <__udivsi3>
 8003262:	0003      	movs	r3, r0
 8003264:	001a      	movs	r2, r3
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	18d2      	adds	r2, r2, r3
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	0019      	movs	r1, r3
 8003274:	0010      	movs	r0, r2
 8003276:	f7fc ff45 	bl	8000104 <__udivsi3>
 800327a:	0003      	movs	r3, r0
 800327c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d90a      	bls.n	800329a <UART_SetConfig+0x662>
 8003284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003286:	2380      	movs	r3, #128	@ 0x80
 8003288:	025b      	lsls	r3, r3, #9
 800328a:	429a      	cmp	r2, r3
 800328c:	d205      	bcs.n	800329a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800328e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003290:	b29a      	uxth	r2, r3
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	e005      	b.n	80032a6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800329a:	231a      	movs	r3, #26
 800329c:	2220      	movs	r2, #32
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	19db      	adds	r3, r3, r7
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	226a      	movs	r2, #106	@ 0x6a
 80032aa:	2101      	movs	r1, #1
 80032ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	2268      	movs	r2, #104	@ 0x68
 80032b2:	2101      	movs	r1, #1
 80032b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	2200      	movs	r2, #0
 80032ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	2200      	movs	r2, #0
 80032c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032c2:	231a      	movs	r3, #26
 80032c4:	2220      	movs	r2, #32
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	781b      	ldrb	r3, [r3, #0]
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b010      	add	sp, #64	@ 0x40
 80032d2:	bdb0      	pop	{r4, r5, r7, pc}
 80032d4:	40008000 	.word	0x40008000
 80032d8:	40008400 	.word	0x40008400
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	08004af8 	.word	0x08004af8

080032e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	2208      	movs	r2, #8
 80032f2:	4013      	ands	r3, r2
 80032f4:	d00b      	beq.n	800330e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003428 <UART_AdvFeatureConfig+0x144>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	2201      	movs	r2, #1
 8003314:	4013      	ands	r3, r2
 8003316:	d00b      	beq.n	8003330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4a43      	ldr	r2, [pc, #268]	@ (800342c <UART_AdvFeatureConfig+0x148>)
 8003320:	4013      	ands	r3, r2
 8003322:	0019      	movs	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	2202      	movs	r2, #2
 8003336:	4013      	ands	r3, r2
 8003338:	d00b      	beq.n	8003352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a3b      	ldr	r2, [pc, #236]	@ (8003430 <UART_AdvFeatureConfig+0x14c>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003356:	2204      	movs	r2, #4
 8003358:	4013      	ands	r3, r2
 800335a:	d00b      	beq.n	8003374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a34      	ldr	r2, [pc, #208]	@ (8003434 <UART_AdvFeatureConfig+0x150>)
 8003364:	4013      	ands	r3, r2
 8003366:	0019      	movs	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	2210      	movs	r2, #16
 800337a:	4013      	ands	r3, r2
 800337c:	d00b      	beq.n	8003396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a2c      	ldr	r2, [pc, #176]	@ (8003438 <UART_AdvFeatureConfig+0x154>)
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	2220      	movs	r2, #32
 800339c:	4013      	ands	r3, r2
 800339e:	d00b      	beq.n	80033b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4a25      	ldr	r2, [pc, #148]	@ (800343c <UART_AdvFeatureConfig+0x158>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	2240      	movs	r2, #64	@ 0x40
 80033be:	4013      	ands	r3, r2
 80033c0:	d01d      	beq.n	80033fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <UART_AdvFeatureConfig+0x15c>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	035b      	lsls	r3, r3, #13
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d10b      	bne.n	80033fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <UART_AdvFeatureConfig+0x160>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003402:	2280      	movs	r2, #128	@ 0x80
 8003404:	4013      	ands	r3, r2
 8003406:	d00b      	beq.n	8003420 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4a0e      	ldr	r2, [pc, #56]	@ (8003448 <UART_AdvFeatureConfig+0x164>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }
}
 8003420:	46c0      	nop			@ (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}
 8003428:	ffff7fff 	.word	0xffff7fff
 800342c:	fffdffff 	.word	0xfffdffff
 8003430:	fffeffff 	.word	0xfffeffff
 8003434:	fffbffff 	.word	0xfffbffff
 8003438:	ffffefff 	.word	0xffffefff
 800343c:	ffffdfff 	.word	0xffffdfff
 8003440:	ffefffff 	.word	0xffefffff
 8003444:	ff9fffff 	.word	0xff9fffff
 8003448:	fff7ffff 	.word	0xfff7ffff

0800344c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b092      	sub	sp, #72	@ 0x48
 8003450:	af02      	add	r7, sp, #8
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2290      	movs	r2, #144	@ 0x90
 8003458:	2100      	movs	r1, #0
 800345a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800345c:	f7fd fc64 	bl	8000d28 <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2208      	movs	r2, #8
 800346c:	4013      	ands	r3, r2
 800346e:	2b08      	cmp	r3, #8
 8003470:	d12d      	bne.n	80034ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003474:	2280      	movs	r2, #128	@ 0x80
 8003476:	0391      	lsls	r1, r2, #14
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4a47      	ldr	r2, [pc, #284]	@ (8003598 <UART_CheckIdleState+0x14c>)
 800347c:	9200      	str	r2, [sp, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	f000 f88e 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d022      	beq.n	80034ce <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003488:	f3ef 8310 	mrs	r3, PRIMASK
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003490:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003492:	2301      	movs	r3, #1
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	f383 8810 	msr	PRIMASK, r3
}
 800349c:	46c0      	nop			@ (mov r8, r8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2180      	movs	r1, #128	@ 0x80
 80034aa:	438a      	bics	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	f383 8810 	msr	PRIMASK, r3
}
 80034b8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2288      	movs	r2, #136	@ 0x88
 80034be:	2120      	movs	r1, #32
 80034c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2284      	movs	r2, #132	@ 0x84
 80034c6:	2100      	movs	r1, #0
 80034c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e060      	b.n	8003590 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2204      	movs	r2, #4
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d146      	bne.n	800356a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034de:	2280      	movs	r2, #128	@ 0x80
 80034e0:	03d1      	lsls	r1, r2, #15
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003598 <UART_CheckIdleState+0x14c>)
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f000 f859 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 80034ee:	1e03      	subs	r3, r0, #0
 80034f0:	d03b      	beq.n	800356a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f2:	f3ef 8310 	mrs	r3, PRIMASK
 80034f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80034f8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80034fc:	2301      	movs	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f383 8810 	msr	PRIMASK, r3
}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4922      	ldr	r1, [pc, #136]	@ (800359c <UART_CheckIdleState+0x150>)
 8003514:	400a      	ands	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f383 8810 	msr	PRIMASK, r3
}
 8003522:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003524:	f3ef 8310 	mrs	r3, PRIMASK
 8003528:	61bb      	str	r3, [r7, #24]
  return(result);
 800352a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352c:	633b      	str	r3, [r7, #48]	@ 0x30
 800352e:	2301      	movs	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f383 8810 	msr	PRIMASK, r3
}
 8003538:	46c0      	nop			@ (mov r8, r8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	438a      	bics	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	228c      	movs	r2, #140	@ 0x8c
 800355a:	2120      	movs	r1, #32
 800355c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2284      	movs	r2, #132	@ 0x84
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e012      	b.n	8003590 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2288      	movs	r2, #136	@ 0x88
 800356e:	2120      	movs	r1, #32
 8003570:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	228c      	movs	r2, #140	@ 0x8c
 8003576:	2120      	movs	r1, #32
 8003578:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2284      	movs	r2, #132	@ 0x84
 800358a:	2100      	movs	r1, #0
 800358c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	b010      	add	sp, #64	@ 0x40
 8003596:	bd80      	pop	{r7, pc}
 8003598:	01ffffff 	.word	0x01ffffff
 800359c:	fffffedf 	.word	0xfffffedf

080035a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b0:	e051      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	3301      	adds	r3, #1
 80035b6:	d04e      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fd fbb6 	bl	8000d28 <HAL_GetTick>
 80035bc:	0002      	movs	r2, r0
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e051      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	d03b      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb6>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b80      	cmp	r3, #128	@ 0x80
 80035e2:	d038      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb6>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b40      	cmp	r3, #64	@ 0x40
 80035e8:	d035      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2208      	movs	r2, #8
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d111      	bne.n	800361c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2208      	movs	r2, #8
 80035fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f960 	bl	80038c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2290      	movs	r2, #144	@ 0x90
 800360c:	2108      	movs	r1, #8
 800360e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2284      	movs	r2, #132	@ 0x84
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e02c      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	401a      	ands	r2, r3
 8003628:	2380      	movs	r3, #128	@ 0x80
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	429a      	cmp	r2, r3
 800362e:	d112      	bne.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2280      	movs	r2, #128	@ 0x80
 8003636:	0112      	lsls	r2, r2, #4
 8003638:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f943 	bl	80038c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2290      	movs	r2, #144	@ 0x90
 8003646:	2120      	movs	r1, #32
 8003648:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2284      	movs	r2, #132	@ 0x84
 800364e:	2100      	movs	r1, #0
 8003650:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e00f      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	425a      	negs	r2, r3
 8003666:	4153      	adcs	r3, r2
 8003668:	b2db      	uxtb	r3, r3
 800366a:	001a      	movs	r2, r3
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d09e      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b004      	add	sp, #16
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b098      	sub	sp, #96	@ 0x60
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	1dbb      	adds	r3, r7, #6
 800368c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1dba      	adds	r2, r7, #6
 8003698:	215c      	movs	r1, #92	@ 0x5c
 800369a:	8812      	ldrh	r2, [r2, #0]
 800369c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1dba      	adds	r2, r7, #6
 80036a2:	215e      	movs	r1, #94	@ 0x5e
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	2380      	movs	r3, #128	@ 0x80
 80036b4:	015b      	lsls	r3, r3, #5
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d10d      	bne.n	80036d6 <UART_Start_Receive_IT+0x56>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d104      	bne.n	80036cc <UART_Start_Receive_IT+0x4c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2260      	movs	r2, #96	@ 0x60
 80036c6:	497b      	ldr	r1, [pc, #492]	@ (80038b4 <UART_Start_Receive_IT+0x234>)
 80036c8:	5299      	strh	r1, [r3, r2]
 80036ca:	e02e      	b.n	800372a <UART_Start_Receive_IT+0xaa>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2260      	movs	r2, #96	@ 0x60
 80036d0:	21ff      	movs	r1, #255	@ 0xff
 80036d2:	5299      	strh	r1, [r3, r2]
 80036d4:	e029      	b.n	800372a <UART_Start_Receive_IT+0xaa>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <UART_Start_Receive_IT+0x7a>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <UART_Start_Receive_IT+0x70>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2260      	movs	r2, #96	@ 0x60
 80036ea:	21ff      	movs	r1, #255	@ 0xff
 80036ec:	5299      	strh	r1, [r3, r2]
 80036ee:	e01c      	b.n	800372a <UART_Start_Receive_IT+0xaa>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2260      	movs	r2, #96	@ 0x60
 80036f4:	217f      	movs	r1, #127	@ 0x7f
 80036f6:	5299      	strh	r1, [r3, r2]
 80036f8:	e017      	b.n	800372a <UART_Start_Receive_IT+0xaa>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	2380      	movs	r3, #128	@ 0x80
 8003700:	055b      	lsls	r3, r3, #21
 8003702:	429a      	cmp	r2, r3
 8003704:	d10d      	bne.n	8003722 <UART_Start_Receive_IT+0xa2>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <UART_Start_Receive_IT+0x98>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2260      	movs	r2, #96	@ 0x60
 8003712:	217f      	movs	r1, #127	@ 0x7f
 8003714:	5299      	strh	r1, [r3, r2]
 8003716:	e008      	b.n	800372a <UART_Start_Receive_IT+0xaa>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2260      	movs	r2, #96	@ 0x60
 800371c:	213f      	movs	r1, #63	@ 0x3f
 800371e:	5299      	strh	r1, [r3, r2]
 8003720:	e003      	b.n	800372a <UART_Start_Receive_IT+0xaa>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2260      	movs	r2, #96	@ 0x60
 8003726:	2100      	movs	r1, #0
 8003728:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2290      	movs	r2, #144	@ 0x90
 800372e:	2100      	movs	r1, #0
 8003730:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	228c      	movs	r2, #140	@ 0x8c
 8003736:	2122      	movs	r1, #34	@ 0x22
 8003738:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373a:	f3ef 8310 	mrs	r3, PRIMASK
 800373e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003744:	2301      	movs	r3, #1
 8003746:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800374a:	f383 8810 	msr	PRIMASK, r3
}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2101      	movs	r1, #1
 800375c:	430a      	orrs	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003770:	2380      	movs	r3, #128	@ 0x80
 8003772:	059b      	lsls	r3, r3, #22
 8003774:	429a      	cmp	r2, r3
 8003776:	d150      	bne.n	800381a <UART_Start_Receive_IT+0x19a>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2268      	movs	r2, #104	@ 0x68
 800377c:	5a9b      	ldrh	r3, [r3, r2]
 800377e:	1dba      	adds	r2, r7, #6
 8003780:	8812      	ldrh	r2, [r2, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d349      	bcc.n	800381a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	015b      	lsls	r3, r3, #5
 800378e:	429a      	cmp	r2, r3
 8003790:	d107      	bne.n	80037a2 <UART_Start_Receive_IT+0x122>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4a46      	ldr	r2, [pc, #280]	@ (80038b8 <UART_Start_Receive_IT+0x238>)
 800379e:	675a      	str	r2, [r3, #116]	@ 0x74
 80037a0:	e002      	b.n	80037a8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a45      	ldr	r2, [pc, #276]	@ (80038bc <UART_Start_Receive_IT+0x23c>)
 80037a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d019      	beq.n	80037e4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b0:	f3ef 8310 	mrs	r3, PRIMASK
 80037b4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80037b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037ba:	2301      	movs	r3, #1
 80037bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c0:	f383 8810 	msr	PRIMASK, r3
}
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2180      	movs	r1, #128	@ 0x80
 80037d2:	0049      	lsls	r1, r1, #1
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037de:	f383 8810 	msr	PRIMASK, r3
}
 80037e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80037ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80037ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80037ee:	2301      	movs	r3, #1
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			@ (mov r8, r8)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2180      	movs	r1, #128	@ 0x80
 8003806:	0549      	lsls	r1, r1, #21
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	e047      	b.n	80038aa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	2380      	movs	r3, #128	@ 0x80
 8003820:	015b      	lsls	r3, r3, #5
 8003822:	429a      	cmp	r2, r3
 8003824:	d107      	bne.n	8003836 <UART_Start_Receive_IT+0x1b6>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a23      	ldr	r2, [pc, #140]	@ (80038c0 <UART_Start_Receive_IT+0x240>)
 8003832:	675a      	str	r2, [r3, #116]	@ 0x74
 8003834:	e002      	b.n	800383c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a22      	ldr	r2, [pc, #136]	@ (80038c4 <UART_Start_Receive_IT+0x244>)
 800383a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d019      	beq.n	8003878 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003844:	f3ef 8310 	mrs	r3, PRIMASK
 8003848:	61fb      	str	r3, [r7, #28]
  return(result);
 800384a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800384c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800384e:	2301      	movs	r3, #1
 8003850:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f383 8810 	msr	PRIMASK, r3
}
 8003858:	46c0      	nop			@ (mov r8, r8)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2190      	movs	r1, #144	@ 0x90
 8003866:	0049      	lsls	r1, r1, #1
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	f383 8810 	msr	PRIMASK, r3
}
 8003876:	e018      	b.n	80038aa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003878:	f3ef 8310 	mrs	r3, PRIMASK
 800387c:	613b      	str	r3, [r7, #16]
  return(result);
 800387e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003880:	653b      	str	r3, [r7, #80]	@ 0x50
 8003882:	2301      	movs	r3, #1
 8003884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f383 8810 	msr	PRIMASK, r3
}
 800388c:	46c0      	nop			@ (mov r8, r8)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2120      	movs	r1, #32
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f383 8810 	msr	PRIMASK, r3
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b018      	add	sp, #96	@ 0x60
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	000001ff 	.word	0x000001ff
 80038b8:	08004461 	.word	0x08004461
 80038bc:	08004115 	.word	0x08004115
 80038c0:	08003f41 	.word	0x08003f41
 80038c4:	08003d6d 	.word	0x08003d6d

080038c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08e      	sub	sp, #56	@ 0x38
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d0:	f3ef 8310 	mrs	r3, PRIMASK
 80038d4:	617b      	str	r3, [r7, #20]
  return(result);
 80038d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038da:	2301      	movs	r3, #1
 80038dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			@ (mov r8, r8)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4926      	ldr	r1, [pc, #152]	@ (800398c <UART_EndRxTransfer+0xc4>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f383 8810 	msr	PRIMASK, r3
}
 8003900:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003902:	f3ef 8310 	mrs	r3, PRIMASK
 8003906:	623b      	str	r3, [r7, #32]
  return(result);
 8003908:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800390a:	633b      	str	r3, [r7, #48]	@ 0x30
 800390c:	2301      	movs	r3, #1
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	491b      	ldr	r1, [pc, #108]	@ (8003990 <UART_EndRxTransfer+0xc8>)
 8003924:	400a      	ands	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d118      	bne.n	800396e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393c:	f3ef 8310 	mrs	r3, PRIMASK
 8003940:	60bb      	str	r3, [r7, #8]
  return(result);
 8003942:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003946:	2301      	movs	r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f383 8810 	msr	PRIMASK, r3
}
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2110      	movs	r1, #16
 800395e:	438a      	bics	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f383 8810 	msr	PRIMASK, r3
}
 800396c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	228c      	movs	r2, #140	@ 0x8c
 8003972:	2120      	movs	r1, #32
 8003974:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003982:	46c0      	nop			@ (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	b00e      	add	sp, #56	@ 0x38
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	fffffedf 	.word	0xfffffedf
 8003990:	effffffe 	.word	0xeffffffe

08003994 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	225e      	movs	r2, #94	@ 0x5e
 80039a6:	2100      	movs	r1, #0
 80039a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2256      	movs	r2, #86	@ 0x56
 80039ae:	2100      	movs	r1, #0
 80039b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff f92b 	bl	8002c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b08a      	sub	sp, #40	@ 0x28
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2288      	movs	r2, #136	@ 0x88
 80039ce:	589b      	ldr	r3, [r3, r2]
 80039d0:	2b21      	cmp	r3, #33	@ 0x21
 80039d2:	d14c      	bne.n	8003a6e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2256      	movs	r2, #86	@ 0x56
 80039d8:	5a9b      	ldrh	r3, [r3, r2]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d132      	bne.n	8003a46 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e0:	f3ef 8310 	mrs	r3, PRIMASK
 80039e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80039e6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ea:	2301      	movs	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f383 8810 	msr	PRIMASK, r3
}
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2180      	movs	r1, #128	@ 0x80
 8003a02:	438a      	bics	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a12:	f3ef 8310 	mrs	r3, PRIMASK
 8003a16:	617b      	str	r3, [r7, #20]
  return(result);
 8003a18:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f383 8810 	msr	PRIMASK, r3
}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2140      	movs	r1, #64	@ 0x40
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003a44:	e013      	b.n	8003a6e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2256      	movs	r2, #86	@ 0x56
 8003a60:	5a9b      	ldrh	r3, [r3, r2]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b299      	uxth	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2256      	movs	r2, #86	@ 0x56
 8003a6c:	5299      	strh	r1, [r3, r2]
}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b00a      	add	sp, #40	@ 0x28
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b08c      	sub	sp, #48	@ 0x30
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2288      	movs	r2, #136	@ 0x88
 8003a82:	589b      	ldr	r3, [r3, r2]
 8003a84:	2b21      	cmp	r3, #33	@ 0x21
 8003a86:	d151      	bne.n	8003b2c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2256      	movs	r2, #86	@ 0x56
 8003a8c:	5a9b      	ldrh	r3, [r3, r2]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d132      	bne.n	8003afa <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a94:	f3ef 8310 	mrs	r3, PRIMASK
 8003a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2180      	movs	r1, #128	@ 0x80
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	61bb      	str	r3, [r7, #24]
  return(result);
 8003acc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2140      	movs	r1, #64	@ 0x40
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003af8:	e018      	b.n	8003b2c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	001a      	movs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	05d2      	lsls	r2, r2, #23
 8003b0c:	0dd2      	lsrs	r2, r2, #23
 8003b0e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b14:	1c9a      	adds	r2, r3, #2
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2256      	movs	r2, #86	@ 0x56
 8003b1e:	5a9b      	ldrh	r3, [r3, r2]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b299      	uxth	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2256      	movs	r2, #86	@ 0x56
 8003b2a:	5299      	strh	r1, [r3, r2]
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b00c      	add	sp, #48	@ 0x30
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	@ 0x30
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2288      	movs	r2, #136	@ 0x88
 8003b40:	589b      	ldr	r3, [r3, r2]
 8003b42:	2b21      	cmp	r3, #33	@ 0x21
 8003b44:	d165      	bne.n	8003c12 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003b46:	232e      	movs	r3, #46	@ 0x2e
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	216a      	movs	r1, #106	@ 0x6a
 8003b4e:	5a52      	ldrh	r2, [r2, r1]
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	e059      	b.n	8003c08 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2256      	movs	r2, #86	@ 0x56
 8003b58:	5a9b      	ldrh	r3, [r3, r2]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d133      	bne.n	8003bc8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b60:	f3ef 8310 	mrs	r3, PRIMASK
 8003b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b66:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f383 8810 	msr	PRIMASK, r3
}
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4926      	ldr	r1, [pc, #152]	@ (8003c1c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f383 8810 	msr	PRIMASK, r3
}
 8003b90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b92:	f3ef 8310 	mrs	r3, PRIMASK
 8003b96:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b98:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f383 8810 	msr	PRIMASK, r3
}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2140      	movs	r1, #64	@ 0x40
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	f383 8810 	msr	PRIMASK, r3
}
 8003bc2:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8003bc4:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003bc6:	e024      	b.n	8003c12 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	2280      	movs	r2, #128	@ 0x80
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2256      	movs	r2, #86	@ 0x56
 8003bee:	5a9b      	ldrh	r3, [r3, r2]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b299      	uxth	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2256      	movs	r2, #86	@ 0x56
 8003bfa:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003bfc:	212e      	movs	r1, #46	@ 0x2e
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	881a      	ldrh	r2, [r3, #0]
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	3a01      	subs	r2, #1
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	232e      	movs	r3, #46	@ 0x2e
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1a0      	bne.n	8003b54 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b00c      	add	sp, #48	@ 0x30
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	ff7fffff 	.word	0xff7fffff

08003c20 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	@ 0x30
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2288      	movs	r2, #136	@ 0x88
 8003c2c:	589b      	ldr	r3, [r3, r2]
 8003c2e:	2b21      	cmp	r3, #33	@ 0x21
 8003c30:	d16a      	bne.n	8003d08 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003c32:	232e      	movs	r3, #46	@ 0x2e
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	216a      	movs	r1, #106	@ 0x6a
 8003c3a:	5a52      	ldrh	r2, [r2, r1]
 8003c3c:	801a      	strh	r2, [r3, #0]
 8003c3e:	e05e      	b.n	8003cfe <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2256      	movs	r2, #86	@ 0x56
 8003c44:	5a9b      	ldrh	r3, [r3, r2]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d133      	bne.n	8003cb4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c50:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c52:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c56:	2301      	movs	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			@ (mov r8, r8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4928      	ldr	r1, [pc, #160]	@ (8003d10 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c82:	617b      	str	r3, [r7, #20]
  return(result);
 8003c84:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	2301      	movs	r3, #1
 8003c8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2140      	movs	r1, #64	@ 0x40
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f383 8810 	msr	PRIMASK, r3
}
 8003cae:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8003cb0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003cb2:	e029      	b.n	8003d08 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2280      	movs	r2, #128	@ 0x80
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	001a      	movs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	05d2      	lsls	r2, r2, #23
 8003cd2:	0dd2      	lsrs	r2, r2, #23
 8003cd4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cda:	1c9a      	adds	r2, r3, #2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2256      	movs	r2, #86	@ 0x56
 8003ce4:	5a9b      	ldrh	r3, [r3, r2]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b299      	uxth	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2256      	movs	r2, #86	@ 0x56
 8003cf0:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003cf2:	212e      	movs	r1, #46	@ 0x2e
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	881a      	ldrh	r2, [r3, #0]
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	232e      	movs	r3, #46	@ 0x2e
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d19b      	bne.n	8003c40 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003d08:	46c0      	nop			@ (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b00c      	add	sp, #48	@ 0x30
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	ff7fffff 	.word	0xff7fffff

08003d14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d22:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	2301      	movs	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f383 8810 	msr	PRIMASK, r3
}
 8003d30:	46c0      	nop			@ (mov r8, r8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2140      	movs	r1, #64	@ 0x40
 8003d3e:	438a      	bics	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f383 8810 	msr	PRIMASK, r3
}
 8003d4c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2288      	movs	r2, #136	@ 0x88
 8003d52:	2120      	movs	r1, #32
 8003d54:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fe ff4e 	bl	8002c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b006      	add	sp, #24
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b094      	sub	sp, #80	@ 0x50
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d74:	204e      	movs	r0, #78	@ 0x4e
 8003d76:	183b      	adds	r3, r7, r0
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	2160      	movs	r1, #96	@ 0x60
 8003d7c:	5a52      	ldrh	r2, [r2, r1]
 8003d7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	228c      	movs	r2, #140	@ 0x8c
 8003d84:	589b      	ldr	r3, [r3, r2]
 8003d86:	2b22      	cmp	r3, #34	@ 0x22
 8003d88:	d000      	beq.n	8003d8c <UART_RxISR_8BIT+0x20>
 8003d8a:	e0c4      	b.n	8003f16 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d92:	214c      	movs	r1, #76	@ 0x4c
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	183b      	adds	r3, r7, r0
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b2d9      	uxtb	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da8:	400a      	ands	r2, r1
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	225e      	movs	r2, #94	@ 0x5e
 8003dbc:	5a9b      	ldrh	r3, [r3, r2]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b299      	uxth	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	225e      	movs	r2, #94	@ 0x5e
 8003dc8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	225e      	movs	r2, #94	@ 0x5e
 8003dce:	5a9b      	ldrh	r3, [r3, r2]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d000      	beq.n	8003dd8 <UART_RxISR_8BIT+0x6c>
 8003dd6:	e0a6      	b.n	8003f26 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003de2:	2301      	movs	r3, #1
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de8:	f383 8810 	msr	PRIMASK, r3
}
 8003dec:	46c0      	nop			@ (mov r8, r8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	494d      	ldr	r1, [pc, #308]	@ (8003f30 <UART_RxISR_8BIT+0x1c4>)
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	f383 8810 	msr	PRIMASK, r3
}
 8003e08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e14:	2301      	movs	r3, #1
 8003e16:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1a:	f383 8810 	msr	PRIMASK, r3
}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e32:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	228c      	movs	r2, #140	@ 0x8c
 8003e40:	2120      	movs	r1, #32
 8003e42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a37      	ldr	r2, [pc, #220]	@ (8003f34 <UART_RxISR_8BIT+0x1c8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d024      	beq.n	8003ea4 <UART_RxISR_8BIT+0x138>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a36      	ldr	r2, [pc, #216]	@ (8003f38 <UART_RxISR_8BIT+0x1cc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d01f      	beq.n	8003ea4 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	2380      	movs	r3, #128	@ 0x80
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e72:	f3ef 8310 	mrs	r3, PRIMASK
 8003e76:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e78:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f383 8810 	msr	PRIMASK, r3
}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	492a      	ldr	r1, [pc, #168]	@ (8003f3c <UART_RxISR_8BIT+0x1d0>)
 8003e94:	400a      	ands	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d12f      	bne.n	8003f0c <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eb8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f383 8810 	msr	PRIMASK, r3
}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2110      	movs	r1, #16
 8003ed4:	438a      	bics	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f383 8810 	msr	PRIMASK, r3
}
 8003ee2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	2210      	movs	r2, #16
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d103      	bne.n	8003efa <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	225c      	movs	r2, #92	@ 0x5c
 8003efe:	5a9a      	ldrh	r2, [r3, r2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	0011      	movs	r1, r2
 8003f04:	0018      	movs	r0, r3
 8003f06:	f7fe fe8b 	bl	8002c20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f0a:	e00c      	b.n	8003f26 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7fc fbe8 	bl	80006e4 <HAL_UART_RxCpltCallback>
}
 8003f14:	e007      	b.n	8003f26 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699a      	ldr	r2, [r3, #24]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2108      	movs	r1, #8
 8003f22:	430a      	orrs	r2, r1
 8003f24:	619a      	str	r2, [r3, #24]
}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b014      	add	sp, #80	@ 0x50
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	fffffedf 	.word	0xfffffedf
 8003f34:	40008000 	.word	0x40008000
 8003f38:	40008400 	.word	0x40008400
 8003f3c:	fbffffff 	.word	0xfbffffff

08003f40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b094      	sub	sp, #80	@ 0x50
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f48:	204e      	movs	r0, #78	@ 0x4e
 8003f4a:	183b      	adds	r3, r7, r0
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	2160      	movs	r1, #96	@ 0x60
 8003f50:	5a52      	ldrh	r2, [r2, r1]
 8003f52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	228c      	movs	r2, #140	@ 0x8c
 8003f58:	589b      	ldr	r3, [r3, r2]
 8003f5a:	2b22      	cmp	r3, #34	@ 0x22
 8003f5c:	d000      	beq.n	8003f60 <UART_RxISR_16BIT+0x20>
 8003f5e:	e0c4      	b.n	80040ea <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f66:	214c      	movs	r1, #76	@ 0x4c
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f70:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	183a      	adds	r2, r7, r0
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	8812      	ldrh	r2, [r2, #0]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	225e      	movs	r2, #94	@ 0x5e
 8003f90:	5a9b      	ldrh	r3, [r3, r2]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b299      	uxth	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	225e      	movs	r2, #94	@ 0x5e
 8003f9c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	225e      	movs	r2, #94	@ 0x5e
 8003fa2:	5a9b      	ldrh	r3, [r3, r2]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d000      	beq.n	8003fac <UART_RxISR_16BIT+0x6c>
 8003faa:	e0a6      	b.n	80040fa <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fac:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb0:	623b      	str	r3, [r7, #32]
  return(result);
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	f383 8810 	msr	PRIMASK, r3
}
 8003fc0:	46c0      	nop			@ (mov r8, r8)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	494d      	ldr	r1, [pc, #308]	@ (8004104 <UART_RxISR_16BIT+0x1c4>)
 8003fce:	400a      	ands	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	f383 8810 	msr	PRIMASK, r3
}
 8003fdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fde:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fe8:	2301      	movs	r3, #1
 8003fea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	f383 8810 	msr	PRIMASK, r3
}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2101      	movs	r1, #1
 8004000:	438a      	bics	r2, r1
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004006:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400a:	f383 8810 	msr	PRIMASK, r3
}
 800400e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	228c      	movs	r2, #140	@ 0x8c
 8004014:	2120      	movs	r1, #32
 8004016:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a37      	ldr	r2, [pc, #220]	@ (8004108 <UART_RxISR_16BIT+0x1c8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d024      	beq.n	8004078 <UART_RxISR_16BIT+0x138>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a36      	ldr	r2, [pc, #216]	@ (800410c <UART_RxISR_16BIT+0x1cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01f      	beq.n	8004078 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	2380      	movs	r3, #128	@ 0x80
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	4013      	ands	r3, r2
 8004044:	d018      	beq.n	8004078 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004046:	f3ef 8310 	mrs	r3, PRIMASK
 800404a:	617b      	str	r3, [r7, #20]
  return(result);
 800404c:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800404e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004050:	2301      	movs	r3, #1
 8004052:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	492a      	ldr	r1, [pc, #168]	@ (8004110 <UART_RxISR_16BIT+0x1d0>)
 8004068:	400a      	ands	r2, r1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800406e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f383 8810 	msr	PRIMASK, r3
}
 8004076:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d12f      	bne.n	80040e0 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004086:	f3ef 8310 	mrs	r3, PRIMASK
 800408a:	60bb      	str	r3, [r7, #8]
  return(result);
 800408c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004090:	2301      	movs	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f383 8810 	msr	PRIMASK, r3
}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2110      	movs	r1, #16
 80040a8:	438a      	bics	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f383 8810 	msr	PRIMASK, r3
}
 80040b6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	2210      	movs	r2, #16
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b10      	cmp	r3, #16
 80040c4:	d103      	bne.n	80040ce <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2210      	movs	r2, #16
 80040cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	225c      	movs	r2, #92	@ 0x5c
 80040d2:	5a9a      	ldrh	r2, [r3, r2]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	0011      	movs	r1, r2
 80040d8:	0018      	movs	r0, r3
 80040da:	f7fe fda1 	bl	8002c20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040de:	e00c      	b.n	80040fa <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f7fc fafe 	bl	80006e4 <HAL_UART_RxCpltCallback>
}
 80040e8:	e007      	b.n	80040fa <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699a      	ldr	r2, [r3, #24]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2108      	movs	r1, #8
 80040f6:	430a      	orrs	r2, r1
 80040f8:	619a      	str	r2, [r3, #24]
}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b014      	add	sp, #80	@ 0x50
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	fffffedf 	.word	0xfffffedf
 8004108:	40008000 	.word	0x40008000
 800410c:	40008400 	.word	0x40008400
 8004110:	fbffffff 	.word	0xfbffffff

08004114 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b0a0      	sub	sp, #128	@ 0x80
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800411c:	237a      	movs	r3, #122	@ 0x7a
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	2160      	movs	r1, #96	@ 0x60
 8004124:	5a52      	ldrh	r2, [r2, r1]
 8004126:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	228c      	movs	r2, #140	@ 0x8c
 8004144:	589b      	ldr	r3, [r3, r2]
 8004146:	2b22      	cmp	r3, #34	@ 0x22
 8004148:	d000      	beq.n	800414c <UART_RxISR_8BIT_FIFOEN+0x38>
 800414a:	e16f      	b.n	800442c <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800414c:	236e      	movs	r3, #110	@ 0x6e
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	2168      	movs	r1, #104	@ 0x68
 8004154:	5a52      	ldrh	r2, [r2, r1]
 8004156:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004158:	e116      	b.n	8004388 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004160:	216c      	movs	r1, #108	@ 0x6c
 8004162:	187b      	adds	r3, r7, r1
 8004164:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004166:	187b      	adds	r3, r7, r1
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	237a      	movs	r3, #122	@ 0x7a
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b2d9      	uxtb	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004178:	400a      	ands	r2, r1
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	225e      	movs	r2, #94	@ 0x5e
 800418c:	5a9b      	ldrh	r3, [r3, r2]
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b299      	uxth	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	225e      	movs	r2, #94	@ 0x5e
 8004198:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041a4:	2207      	movs	r2, #7
 80041a6:	4013      	ands	r3, r2
 80041a8:	d049      	beq.n	800423e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041ac:	2201      	movs	r2, #1
 80041ae:	4013      	ands	r3, r2
 80041b0:	d010      	beq.n	80041d4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80041b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80041b4:	2380      	movs	r3, #128	@ 0x80
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4013      	ands	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2290      	movs	r2, #144	@ 0x90
 80041c8:	589b      	ldr	r3, [r3, r2]
 80041ca:	2201      	movs	r2, #1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2190      	movs	r1, #144	@ 0x90
 80041d2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041d6:	2202      	movs	r2, #2
 80041d8:	4013      	ands	r3, r2
 80041da:	d00f      	beq.n	80041fc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80041dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041de:	2201      	movs	r2, #1
 80041e0:	4013      	ands	r3, r2
 80041e2:	d00b      	beq.n	80041fc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2202      	movs	r2, #2
 80041ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2290      	movs	r2, #144	@ 0x90
 80041f0:	589b      	ldr	r3, [r3, r2]
 80041f2:	2204      	movs	r2, #4
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2190      	movs	r1, #144	@ 0x90
 80041fa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041fe:	2204      	movs	r2, #4
 8004200:	4013      	ands	r3, r2
 8004202:	d00f      	beq.n	8004224 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004204:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004206:	2201      	movs	r2, #1
 8004208:	4013      	ands	r3, r2
 800420a:	d00b      	beq.n	8004224 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2204      	movs	r2, #4
 8004212:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2290      	movs	r2, #144	@ 0x90
 8004218:	589b      	ldr	r3, [r3, r2]
 800421a:	2202      	movs	r2, #2
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2190      	movs	r1, #144	@ 0x90
 8004222:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2290      	movs	r2, #144	@ 0x90
 8004228:	589b      	ldr	r3, [r3, r2]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	0018      	movs	r0, r3
 8004232:	f7fe fced 	bl	8002c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2290      	movs	r2, #144	@ 0x90
 800423a:	2100      	movs	r1, #0
 800423c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	225e      	movs	r2, #94	@ 0x5e
 8004242:	5a9b      	ldrh	r3, [r3, r2]
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d000      	beq.n	800424c <UART_RxISR_8BIT_FIFOEN+0x138>
 800424a:	e09d      	b.n	8004388 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800424c:	f3ef 8310 	mrs	r3, PRIMASK
 8004250:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004256:	2301      	movs	r3, #1
 8004258:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800425c:	f383 8810 	msr	PRIMASK, r3
}
 8004260:	46c0      	nop			@ (mov r8, r8)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4975      	ldr	r1, [pc, #468]	@ (8004444 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800426e:	400a      	ands	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004274:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004278:	f383 8810 	msr	PRIMASK, r3
}
 800427c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427e:	f3ef 8310 	mrs	r3, PRIMASK
 8004282:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004286:	667b      	str	r3, [r7, #100]	@ 0x64
 8004288:	2301      	movs	r3, #1
 800428a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800428e:	f383 8810 	msr	PRIMASK, r3
}
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	496a      	ldr	r1, [pc, #424]	@ (8004448 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80042a0:	400a      	ands	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042aa:	f383 8810 	msr	PRIMASK, r3
}
 80042ae:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	228c      	movs	r2, #140	@ 0x8c
 80042b4:	2120      	movs	r1, #32
 80042b6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a60      	ldr	r2, [pc, #384]	@ (800444c <UART_RxISR_8BIT_FIFOEN+0x338>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d024      	beq.n	8004318 <UART_RxISR_8BIT_FIFOEN+0x204>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a5f      	ldr	r2, [pc, #380]	@ (8004450 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d01f      	beq.n	8004318 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	4013      	ands	r3, r2
 80042e4:	d018      	beq.n	8004318 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80042ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80042f0:	2301      	movs	r3, #1
 80042f2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4953      	ldr	r1, [pc, #332]	@ (8004454 <UART_RxISR_8BIT_FIFOEN+0x340>)
 8004308:	400a      	ands	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	f383 8810 	msr	PRIMASK, r3
}
 8004316:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d12f      	bne.n	8004380 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004326:	f3ef 8310 	mrs	r3, PRIMASK
 800432a:	623b      	str	r3, [r7, #32]
  return(result);
 800432c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004330:	2301      	movs	r3, #1
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	f383 8810 	msr	PRIMASK, r3
}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2110      	movs	r1, #16
 8004348:	438a      	bics	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800434e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004352:	f383 8810 	msr	PRIMASK, r3
}
 8004356:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	2210      	movs	r2, #16
 8004360:	4013      	ands	r3, r2
 8004362:	2b10      	cmp	r3, #16
 8004364:	d103      	bne.n	800436e <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2210      	movs	r2, #16
 800436c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	225c      	movs	r2, #92	@ 0x5c
 8004372:	5a9a      	ldrh	r2, [r3, r2]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	0011      	movs	r1, r2
 8004378:	0018      	movs	r0, r3
 800437a:	f7fe fc51 	bl	8002c20 <HAL_UARTEx_RxEventCallback>
 800437e:	e003      	b.n	8004388 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0018      	movs	r0, r3
 8004384:	f7fc f9ae 	bl	80006e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004388:	236e      	movs	r3, #110	@ 0x6e
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <UART_RxISR_8BIT_FIFOEN+0x288>
 8004392:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004394:	2220      	movs	r2, #32
 8004396:	4013      	ands	r3, r2
 8004398:	d000      	beq.n	800439c <UART_RxISR_8BIT_FIFOEN+0x288>
 800439a:	e6de      	b.n	800415a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800439c:	205a      	movs	r0, #90	@ 0x5a
 800439e:	183b      	adds	r3, r7, r0
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	215e      	movs	r1, #94	@ 0x5e
 80043a4:	5a52      	ldrh	r2, [r2, r1]
 80043a6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80043a8:	0001      	movs	r1, r0
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d044      	beq.n	800443c <UART_RxISR_8BIT_FIFOEN+0x328>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2268      	movs	r2, #104	@ 0x68
 80043b6:	5a9b      	ldrh	r3, [r3, r2]
 80043b8:	187a      	adds	r2, r7, r1
 80043ba:	8812      	ldrh	r2, [r2, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d23d      	bcs.n	800443c <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ca:	2301      	movs	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			@ (mov r8, r8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	491d      	ldr	r1, [pc, #116]	@ (8004458 <UART_RxISR_8BIT_FIFOEN+0x344>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a19      	ldr	r2, [pc, #100]	@ (800445c <UART_RxISR_8BIT_FIFOEN+0x348>)
 80043f6:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f8:	f3ef 8310 	mrs	r3, PRIMASK
 80043fc:	617b      	str	r3, [r7, #20]
  return(result);
 80043fe:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004400:	653b      	str	r3, [r7, #80]	@ 0x50
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f383 8810 	msr	PRIMASK, r3
}
 800440c:	46c0      	nop			@ (mov r8, r8)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2120      	movs	r1, #32
 800441a:	430a      	orrs	r2, r1
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f383 8810 	msr	PRIMASK, r3
}
 8004428:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800442a:	e007      	b.n	800443c <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2108      	movs	r1, #8
 8004438:	430a      	orrs	r2, r1
 800443a:	619a      	str	r2, [r3, #24]
}
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b020      	add	sp, #128	@ 0x80
 8004442:	bd80      	pop	{r7, pc}
 8004444:	fffffeff 	.word	0xfffffeff
 8004448:	effffffe 	.word	0xeffffffe
 800444c:	40008000 	.word	0x40008000
 8004450:	40008400 	.word	0x40008400
 8004454:	fbffffff 	.word	0xfbffffff
 8004458:	efffffff 	.word	0xefffffff
 800445c:	08003d6d 	.word	0x08003d6d

08004460 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b0a2      	sub	sp, #136	@ 0x88
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004468:	2382      	movs	r3, #130	@ 0x82
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	2160      	movs	r1, #96	@ 0x60
 8004470:	5a52      	ldrh	r2, [r2, r1]
 8004472:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	2284      	movs	r2, #132	@ 0x84
 800447c:	18ba      	adds	r2, r7, r2
 800447e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	228c      	movs	r2, #140	@ 0x8c
 8004494:	589b      	ldr	r3, [r3, r2]
 8004496:	2b22      	cmp	r3, #34	@ 0x22
 8004498:	d000      	beq.n	800449c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800449a:	e179      	b.n	8004790 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800449c:	2376      	movs	r3, #118	@ 0x76
 800449e:	18fb      	adds	r3, r7, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	2168      	movs	r1, #104	@ 0x68
 80044a4:	5a52      	ldrh	r2, [r2, r1]
 80044a6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044a8:	e11e      	b.n	80046e8 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044b0:	2174      	movs	r1, #116	@ 0x74
 80044b2:	187b      	adds	r3, r7, r1
 80044b4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	2282      	movs	r2, #130	@ 0x82
 80044c0:	18ba      	adds	r2, r7, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	8812      	ldrh	r2, [r2, #0]
 80044c6:	4013      	ands	r3, r2
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	225e      	movs	r2, #94	@ 0x5e
 80044dc:	5a9b      	ldrh	r3, [r3, r2]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b299      	uxth	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	225e      	movs	r2, #94	@ 0x5e
 80044e8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	2184      	movs	r1, #132	@ 0x84
 80044f2:	187a      	adds	r2, r7, r1
 80044f4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2207      	movs	r2, #7
 80044fc:	4013      	ands	r3, r2
 80044fe:	d04e      	beq.n	800459e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004500:	187b      	adds	r3, r7, r1
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2201      	movs	r2, #1
 8004506:	4013      	ands	r3, r2
 8004508:	d010      	beq.n	800452c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800450a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	4013      	ands	r3, r2
 8004512:	d00b      	beq.n	800452c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2201      	movs	r2, #1
 800451a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2290      	movs	r2, #144	@ 0x90
 8004520:	589b      	ldr	r3, [r3, r2]
 8004522:	2201      	movs	r2, #1
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2190      	movs	r1, #144	@ 0x90
 800452a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800452c:	2384      	movs	r3, #132	@ 0x84
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2202      	movs	r2, #2
 8004534:	4013      	ands	r3, r2
 8004536:	d00f      	beq.n	8004558 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800453a:	2201      	movs	r2, #1
 800453c:	4013      	ands	r3, r2
 800453e:	d00b      	beq.n	8004558 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2202      	movs	r2, #2
 8004546:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2290      	movs	r2, #144	@ 0x90
 800454c:	589b      	ldr	r3, [r3, r2]
 800454e:	2204      	movs	r2, #4
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2190      	movs	r1, #144	@ 0x90
 8004556:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004558:	2384      	movs	r3, #132	@ 0x84
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2204      	movs	r2, #4
 8004560:	4013      	ands	r3, r2
 8004562:	d00f      	beq.n	8004584 <UART_RxISR_16BIT_FIFOEN+0x124>
 8004564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004566:	2201      	movs	r2, #1
 8004568:	4013      	ands	r3, r2
 800456a:	d00b      	beq.n	8004584 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2204      	movs	r2, #4
 8004572:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2290      	movs	r2, #144	@ 0x90
 8004578:	589b      	ldr	r3, [r3, r2]
 800457a:	2202      	movs	r2, #2
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2190      	movs	r1, #144	@ 0x90
 8004582:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2290      	movs	r2, #144	@ 0x90
 8004588:	589b      	ldr	r3, [r3, r2]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	0018      	movs	r0, r3
 8004592:	f7fe fb3d 	bl	8002c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2290      	movs	r2, #144	@ 0x90
 800459a:	2100      	movs	r1, #0
 800459c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	225e      	movs	r2, #94	@ 0x5e
 80045a2:	5a9b      	ldrh	r3, [r3, r2]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d000      	beq.n	80045ac <UART_RxISR_16BIT_FIFOEN+0x14c>
 80045aa:	e09d      	b.n	80046e8 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ac:	f3ef 8310 	mrs	r3, PRIMASK
 80045b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80045b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045b6:	2301      	movs	r3, #1
 80045b8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			@ (mov r8, r8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4976      	ldr	r1, [pc, #472]	@ (80047a8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80045ce:	400a      	ands	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045d4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d8:	f383 8810 	msr	PRIMASK, r3
}
 80045dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045de:	f3ef 8310 	mrs	r3, PRIMASK
 80045e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80045e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045e8:	2301      	movs	r3, #1
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ee:	f383 8810 	msr	PRIMASK, r3
}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	496b      	ldr	r1, [pc, #428]	@ (80047ac <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8004600:	400a      	ands	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004606:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800460a:	f383 8810 	msr	PRIMASK, r3
}
 800460e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	228c      	movs	r2, #140	@ 0x8c
 8004614:	2120      	movs	r1, #32
 8004616:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a61      	ldr	r2, [pc, #388]	@ (80047b0 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d024      	beq.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x218>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a60      	ldr	r2, [pc, #384]	@ (80047b4 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01f      	beq.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	4013      	ands	r3, r2
 8004644:	d018      	beq.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800464e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004650:	2301      	movs	r3, #1
 8004652:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4954      	ldr	r1, [pc, #336]	@ (80047b8 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8004668:	400a      	ands	r2, r1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800466e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004672:	f383 8810 	msr	PRIMASK, r3
}
 8004676:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d12f      	bne.n	80046e0 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004686:	f3ef 8310 	mrs	r3, PRIMASK
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004690:	2301      	movs	r3, #1
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004696:	f383 8810 	msr	PRIMASK, r3
}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2110      	movs	r1, #16
 80046a8:	438a      	bics	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	2210      	movs	r2, #16
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d103      	bne.n	80046ce <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2210      	movs	r2, #16
 80046cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	225c      	movs	r2, #92	@ 0x5c
 80046d2:	5a9a      	ldrh	r2, [r3, r2]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	0011      	movs	r1, r2
 80046d8:	0018      	movs	r0, r3
 80046da:	f7fe faa1 	bl	8002c20 <HAL_UARTEx_RxEventCallback>
 80046de:	e003      	b.n	80046e8 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f7fb fffe 	bl	80006e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80046e8:	2376      	movs	r3, #118	@ 0x76
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d006      	beq.n	8004700 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80046f2:	2384      	movs	r3, #132	@ 0x84
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2220      	movs	r2, #32
 80046fa:	4013      	ands	r3, r2
 80046fc:	d000      	beq.n	8004700 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80046fe:	e6d4      	b.n	80044aa <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004700:	205e      	movs	r0, #94	@ 0x5e
 8004702:	183b      	adds	r3, r7, r0
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	215e      	movs	r1, #94	@ 0x5e
 8004708:	5a52      	ldrh	r2, [r2, r1]
 800470a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800470c:	0001      	movs	r1, r0
 800470e:	187b      	adds	r3, r7, r1
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d044      	beq.n	80047a0 <UART_RxISR_16BIT_FIFOEN+0x340>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2268      	movs	r2, #104	@ 0x68
 800471a:	5a9b      	ldrh	r3, [r3, r2]
 800471c:	187a      	adds	r2, r7, r1
 800471e:	8812      	ldrh	r2, [r2, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d23d      	bcs.n	80047a0 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	60fb      	str	r3, [r7, #12]
  return(result);
 800472a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800472c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800472e:	2301      	movs	r3, #1
 8004730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			@ (mov r8, r8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	491d      	ldr	r1, [pc, #116]	@ (80047bc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8004746:	400a      	ands	r2, r1
 8004748:	609a      	str	r2, [r3, #8]
 800474a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800474c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a19      	ldr	r2, [pc, #100]	@ (80047c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800475a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475c:	f3ef 8310 	mrs	r3, PRIMASK
 8004760:	61bb      	str	r3, [r7, #24]
  return(result);
 8004762:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004764:	657b      	str	r3, [r7, #84]	@ 0x54
 8004766:	2301      	movs	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			@ (mov r8, r8)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2120      	movs	r1, #32
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004784:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	f383 8810 	msr	PRIMASK, r3
}
 800478c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800478e:	e007      	b.n	80047a0 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2108      	movs	r1, #8
 800479c:	430a      	orrs	r2, r1
 800479e:	619a      	str	r2, [r3, #24]
}
 80047a0:	46c0      	nop			@ (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b022      	add	sp, #136	@ 0x88
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	fffffeff 	.word	0xfffffeff
 80047ac:	effffffe 	.word	0xeffffffe
 80047b0:	40008000 	.word	0x40008000
 80047b4:	40008400 	.word	0x40008400
 80047b8:	fbffffff 	.word	0xfbffffff
 80047bc:	efffffff 	.word	0xefffffff
 80047c0:	08003f41 	.word	0x08003f41

080047c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047cc:	46c0      	nop			@ (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b002      	add	sp, #8
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80047dc:	46c0      	nop			@ (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80047ec:	46c0      	nop			@ (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b002      	add	sp, #8
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2284      	movs	r2, #132	@ 0x84
 8004800:	5c9b      	ldrb	r3, [r3, r2]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_UARTEx_DisableFifoMode+0x16>
 8004806:	2302      	movs	r3, #2
 8004808:	e027      	b.n	800485a <HAL_UARTEx_DisableFifoMode+0x66>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2284      	movs	r2, #132	@ 0x84
 800480e:	2101      	movs	r1, #1
 8004810:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2288      	movs	r2, #136	@ 0x88
 8004816:	2124      	movs	r1, #36	@ 0x24
 8004818:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2101      	movs	r1, #1
 800482e:	438a      	bics	r2, r1
 8004830:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a0b      	ldr	r2, [pc, #44]	@ (8004864 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004836:	4013      	ands	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2288      	movs	r2, #136	@ 0x88
 800484c:	2120      	movs	r1, #32
 800484e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2284      	movs	r2, #132	@ 0x84
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	0018      	movs	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	b004      	add	sp, #16
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	dfffffff 	.word	0xdfffffff

08004868 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2284      	movs	r2, #132	@ 0x84
 8004876:	5c9b      	ldrb	r3, [r3, r2]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800487c:	2302      	movs	r3, #2
 800487e:	e02e      	b.n	80048de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2284      	movs	r2, #132	@ 0x84
 8004884:	2101      	movs	r1, #1
 8004886:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2288      	movs	r2, #136	@ 0x88
 800488c:	2124      	movs	r1, #36	@ 0x24
 800488e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2101      	movs	r1, #1
 80048a4:	438a      	bics	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	08d9      	lsrs	r1, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 f854 	bl	800496c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2288      	movs	r2, #136	@ 0x88
 80048d0:	2120      	movs	r1, #32
 80048d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2284      	movs	r2, #132	@ 0x84
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b004      	add	sp, #16
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2284      	movs	r2, #132	@ 0x84
 80048f6:	5c9b      	ldrb	r3, [r3, r2]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e02f      	b.n	8004960 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2284      	movs	r2, #132	@ 0x84
 8004904:	2101      	movs	r1, #1
 8004906:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2288      	movs	r2, #136	@ 0x88
 800490c:	2124      	movs	r1, #36	@ 0x24
 800490e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2101      	movs	r1, #1
 8004924:	438a      	bics	r2, r1
 8004926:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	4a0e      	ldr	r2, [pc, #56]	@ (8004968 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004930:	4013      	ands	r3, r2
 8004932:	0019      	movs	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f000 f813 	bl	800496c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2288      	movs	r2, #136	@ 0x88
 8004952:	2120      	movs	r1, #32
 8004954:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2284      	movs	r2, #132	@ 0x84
 800495a:	2100      	movs	r1, #0
 800495c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b004      	add	sp, #16
 8004966:	bd80      	pop	{r7, pc}
 8004968:	f1ffffff 	.word	0xf1ffffff

0800496c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800496c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004978:	2b00      	cmp	r3, #0
 800497a:	d108      	bne.n	800498e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	226a      	movs	r2, #106	@ 0x6a
 8004980:	2101      	movs	r1, #1
 8004982:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2268      	movs	r2, #104	@ 0x68
 8004988:	2101      	movs	r1, #1
 800498a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800498c:	e043      	b.n	8004a16 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800498e:	260f      	movs	r6, #15
 8004990:	19bb      	adds	r3, r7, r6
 8004992:	2208      	movs	r2, #8
 8004994:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004996:	200e      	movs	r0, #14
 8004998:	183b      	adds	r3, r7, r0
 800499a:	2208      	movs	r2, #8
 800499c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	0e5b      	lsrs	r3, r3, #25
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	240d      	movs	r4, #13
 80049aa:	193b      	adds	r3, r7, r4
 80049ac:	2107      	movs	r1, #7
 80049ae:	400a      	ands	r2, r1
 80049b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	0f5b      	lsrs	r3, r3, #29
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	250c      	movs	r5, #12
 80049be:	197b      	adds	r3, r7, r5
 80049c0:	2107      	movs	r1, #7
 80049c2:	400a      	ands	r2, r1
 80049c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049c6:	183b      	adds	r3, r7, r0
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	197a      	adds	r2, r7, r5
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	4914      	ldr	r1, [pc, #80]	@ (8004a20 <UARTEx_SetNbDataToProcess+0xb4>)
 80049d0:	5c8a      	ldrb	r2, [r1, r2]
 80049d2:	435a      	muls	r2, r3
 80049d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80049d6:	197b      	adds	r3, r7, r5
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	4a12      	ldr	r2, [pc, #72]	@ (8004a24 <UARTEx_SetNbDataToProcess+0xb8>)
 80049dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049de:	0019      	movs	r1, r3
 80049e0:	f7fb fc1a 	bl	8000218 <__divsi3>
 80049e4:	0003      	movs	r3, r0
 80049e6:	b299      	uxth	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	226a      	movs	r2, #106	@ 0x6a
 80049ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049ee:	19bb      	adds	r3, r7, r6
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	193a      	adds	r2, r7, r4
 80049f4:	7812      	ldrb	r2, [r2, #0]
 80049f6:	490a      	ldr	r1, [pc, #40]	@ (8004a20 <UARTEx_SetNbDataToProcess+0xb4>)
 80049f8:	5c8a      	ldrb	r2, [r1, r2]
 80049fa:	435a      	muls	r2, r3
 80049fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80049fe:	193b      	adds	r3, r7, r4
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	4a08      	ldr	r2, [pc, #32]	@ (8004a24 <UARTEx_SetNbDataToProcess+0xb8>)
 8004a04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a06:	0019      	movs	r1, r3
 8004a08:	f7fb fc06 	bl	8000218 <__divsi3>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	b299      	uxth	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2268      	movs	r2, #104	@ 0x68
 8004a14:	5299      	strh	r1, [r3, r2]
}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b005      	add	sp, #20
 8004a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	08004b10 	.word	0x08004b10
 8004a24:	08004b18 	.word	0x08004b18

08004a28 <memset>:
 8004a28:	0003      	movs	r3, r0
 8004a2a:	1882      	adds	r2, r0, r2
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <memset+0xa>
 8004a30:	4770      	bx	lr
 8004a32:	7019      	strb	r1, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	e7f9      	b.n	8004a2c <memset+0x4>

08004a38 <__libc_init_array>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	4c0c      	ldr	r4, [pc, #48]	@ (8004a70 <__libc_init_array+0x38>)
 8004a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a74 <__libc_init_array+0x3c>)
 8004a40:	1b64      	subs	r4, r4, r5
 8004a42:	10a4      	asrs	r4, r4, #2
 8004a44:	42a6      	cmp	r6, r4
 8004a46:	d109      	bne.n	8004a5c <__libc_init_array+0x24>
 8004a48:	2600      	movs	r6, #0
 8004a4a:	f000 f819 	bl	8004a80 <_init>
 8004a4e:	4c0a      	ldr	r4, [pc, #40]	@ (8004a78 <__libc_init_array+0x40>)
 8004a50:	4d0a      	ldr	r5, [pc, #40]	@ (8004a7c <__libc_init_array+0x44>)
 8004a52:	1b64      	subs	r4, r4, r5
 8004a54:	10a4      	asrs	r4, r4, #2
 8004a56:	42a6      	cmp	r6, r4
 8004a58:	d105      	bne.n	8004a66 <__libc_init_array+0x2e>
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	00b3      	lsls	r3, r6, #2
 8004a5e:	58eb      	ldr	r3, [r5, r3]
 8004a60:	4798      	blx	r3
 8004a62:	3601      	adds	r6, #1
 8004a64:	e7ee      	b.n	8004a44 <__libc_init_array+0xc>
 8004a66:	00b3      	lsls	r3, r6, #2
 8004a68:	58eb      	ldr	r3, [r5, r3]
 8004a6a:	4798      	blx	r3
 8004a6c:	3601      	adds	r6, #1
 8004a6e:	e7f2      	b.n	8004a56 <__libc_init_array+0x1e>
 8004a70:	08004b28 	.word	0x08004b28
 8004a74:	08004b28 	.word	0x08004b28
 8004a78:	08004b2c 	.word	0x08004b2c
 8004a7c:	08004b28 	.word	0x08004b28

08004a80 <_init>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr

08004a8c <_fini>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr
