
TEST-1-UART_Putty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047fc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004940  08004940  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004940  08004940  00005940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004948  08004948  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004948  08004948  00005948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800494c  0800494c  0000594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004950  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000001c  0800496c  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  0800496c  000060d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3fd  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f54  00000000  00000000  00012441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00014398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000752  00000000  00000000  00014d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad6c  00000000  00000000  00015472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d03a  00000000  00000000  000301de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad460  00000000  00000000  0003d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002090  00000000  00000000  000ea6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ec74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080048a0 	.word	0x080048a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	080048a0 	.word	0x080048a0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 f90b 	bl	8004848 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b2a      	ldr	r3, [pc, #168]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <MX_GPIO_Init+0xc0>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fd92 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2280      	movs	r2, #128	@ 0x80
 800068c:	0192      	lsls	r2, r2, #6
 800068e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2288      	movs	r2, #136	@ 0x88
 8000694:	0352      	lsls	r2, r2, #13
 8000696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 80006a2:	0019      	movs	r1, r3
 80006a4:	0010      	movs	r0, r2
 80006a6:	f000 fc15 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006aa:	0021      	movs	r1, r4
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2220      	movs	r2, #32
 80006b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006c4:	187a      	adds	r2, r7, r1
 80006c6:	23a0      	movs	r3, #160	@ 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fc01 	bl	8000ed4 <HAL_GPIO_Init>

}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b009      	add	sp, #36	@ 0x24
 80006d8:	bd90      	pop	{r4, r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	40021000 	.word	0x40021000
 80006e0:	50000800 	.word	0x50000800

080006e4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a09      	ldr	r2, [pc, #36]	@ (8000718 <HAL_UART_RxCpltCallback+0x34>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d10b      	bne.n	800070e <HAL_UART_RxCpltCallback+0x2a>
	{
		//answer to host
		HAL_UART_Transmit_IT(&huart2,tx_buff,sizeof(tx_buff));
 80006f6:	4909      	ldr	r1, [pc, #36]	@ (800071c <HAL_UART_RxCpltCallback+0x38>)
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <HAL_UART_RxCpltCallback+0x3c>)
 80006fa:	220d      	movs	r2, #13
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fd5b 	bl	80021b8 <HAL_UART_Transmit_IT>
		// reset receive int
		HAL_UART_Receive_IT(&huart2,rx_buff,sizeof(rx_buff));
 8000702:	4908      	ldr	r1, [pc, #32]	@ (8000724 <HAL_UART_RxCpltCallback+0x40>)
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <HAL_UART_RxCpltCallback+0x3c>)
 8000706:	2204      	movs	r2, #4
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fdfd 	bl	8002308 <HAL_UART_Receive_IT>
	}
}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	40004400 	.word	0x40004400
 800071c:	20000000 	.word	0x20000000
 8000720:	2000003c 	.word	0x2000003c
 8000724:	20000038 	.word	0x20000038

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 f9a6 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f810 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f7ff ff72 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000738:	f000 f8c0 	bl	80008bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,rx_buff,sizeof(rx_buff));//receive int enable
 800073c:	4903      	ldr	r1, [pc, #12]	@ (800074c <main+0x24>)
 800073e:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <main+0x28>)
 8000740:	2204      	movs	r2, #4
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fde0 	bl	8002308 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	e7fd      	b.n	8000748 <main+0x20>
 800074c:	20000038 	.word	0x20000038
 8000750:	2000003c 	.word	0x2000003c

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b095      	sub	sp, #84	@ 0x54
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	2414      	movs	r4, #20
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	233c      	movs	r3, #60	@ 0x3c
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f004 f86f 	bl	8004848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	0018      	movs	r0, r3
 800076e:	2310      	movs	r3, #16
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f004 f868 	bl	8004848 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2380      	movs	r3, #128	@ 0x80
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fd33 	bl	80011e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2280      	movs	r2, #128	@ 0x80
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000790:	0021      	movs	r1, r4
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2240      	movs	r2, #64	@ 0x40
 800079c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2202      	movs	r2, #2
 80007a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2202      	movs	r2, #2
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2208      	movs	r2, #8
 80007b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2280      	movs	r2, #128	@ 0x80
 80007ba:	0292      	lsls	r2, r2, #10
 80007bc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	0492      	lsls	r2, r2, #18
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	0592      	lsls	r2, r2, #22
 80007cc:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fd55 	bl	8001280 <HAL_RCC_OscConfig>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007da:	f000 f819 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2207      	movs	r2, #7
 80007e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2202      	movs	r2, #2
 80007e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2102      	movs	r1, #2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 f8a0 	bl	8001940 <HAL_RCC_ClockConfig>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000804:	f000 f804 	bl	8000810 <Error_Handler>
  }
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b015      	add	sp, #84	@ 0x54
 800080e:	bd90      	pop	{r4, r7, pc}

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	e7fd      	b.n	8000818 <Error_Handler+0x8>

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <HAL_MspInit+0x44>)
 8000824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <HAL_MspInit+0x44>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	641a      	str	r2, [r3, #64]	@ 0x40
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <HAL_MspInit+0x44>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <HAL_MspInit+0x44>)
 800083c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <HAL_MspInit+0x44>)
 8000840:	2180      	movs	r1, #128	@ 0x80
 8000842:	0549      	lsls	r1, r1, #21
 8000844:	430a      	orrs	r2, r1
 8000846:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <HAL_MspInit+0x44>)
 800084a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800084c:	2380      	movs	r3, #128	@ 0x80
 800084e:	055b      	lsls	r3, r3, #21
 8000850:	4013      	ands	r3, r2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f960 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <USART2_LPUART2_IRQHandler+0x14>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fd98 	bl	80023d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	2000003c 	.word	0x2000003c

080008b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008c2:	4a24      	ldr	r2, [pc, #144]	@ (8000954 <MX_USART2_UART_Init+0x98>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c6:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008c8:	22e1      	movs	r2, #225	@ 0xe1
 80008ca:	0252      	lsls	r2, r2, #9
 80008cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 8000906:	0018      	movs	r0, r3
 8000908:	f001 fc00 	bl	800210c <HAL_UART_Init>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000910:	f7ff ff7e 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000914:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 8000916:	2100      	movs	r1, #0
 8000918:	0018      	movs	r0, r3
 800091a:	f003 feb5 	bl	8004688 <HAL_UARTEx_SetTxFifoThreshold>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000922:	f7ff ff75 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000926:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 8000928:	2100      	movs	r1, #0
 800092a:	0018      	movs	r0, r3
 800092c:	f003 feec 	bl	8004708 <HAL_UARTEx_SetRxFifoThreshold>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000934:	f7ff ff6c 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 800093a:	0018      	movs	r0, r3
 800093c:	f003 fe6a 	bl	8004614 <HAL_UARTEx_DisableFifoMode>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000944:	f7ff ff64 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	2000003c 	.word	0x2000003c
 8000954:	40004400 	.word	0x40004400

08000958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b09d      	sub	sp, #116	@ 0x74
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	235c      	movs	r3, #92	@ 0x5c
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	0018      	movs	r0, r3
 8000966:	2314      	movs	r3, #20
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f003 ff6c 	bl	8004848 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	2410      	movs	r4, #16
 8000972:	193b      	adds	r3, r7, r4
 8000974:	0018      	movs	r0, r3
 8000976:	234c      	movs	r3, #76	@ 0x4c
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f003 ff64 	bl	8004848 <memset>
  if(uartHandle->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a26      	ldr	r2, [pc, #152]	@ (8000a20 <HAL_UART_MspInit+0xc8>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d146      	bne.n	8000a18 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2202      	movs	r2, #2
 800098e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000996:	193b      	adds	r3, r7, r4
 8000998:	0018      	movs	r0, r3
 800099a:	f001 f97b 	bl	8001c94 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009a2:	f7ff ff35 	bl	8000810 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <HAL_UART_MspInit+0xcc>)
 80009a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <HAL_UART_MspInit+0xcc>)
 80009ac:	2180      	movs	r1, #128	@ 0x80
 80009ae:	0289      	lsls	r1, r1, #10
 80009b0:	430a      	orrs	r2, r1
 80009b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <HAL_UART_MspInit+0xcc>)
 80009b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	029b      	lsls	r3, r3, #10
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_UART_MspInit+0xcc>)
 80009c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <HAL_UART_MspInit+0xcc>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	430a      	orrs	r2, r1
 80009cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_UART_MspInit+0xcc>)
 80009d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009d2:	2201      	movs	r2, #1
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80009da:	215c      	movs	r1, #92	@ 0x5c
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	220c      	movs	r2, #12
 80009e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2202      	movs	r2, #2
 80009e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2201      	movs	r2, #1
 80009f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	187a      	adds	r2, r7, r1
 80009fc:	23a0      	movs	r3, #160	@ 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 fa66 	bl	8000ed4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	201c      	movs	r0, #28
 8000a0e:	f000 f967 	bl	8000ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000a12:	201c      	movs	r0, #28
 8000a14:	f000 f979 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b01d      	add	sp, #116	@ 0x74
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000

08000a28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a28:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a2c:	f7ff ff40 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	@ (8000a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <LoopForever+0xe>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	@ (8000a74 <LoopForever+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a56:	f003 feff 	bl	8004858 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a5a:	f7ff fe65 	bl	8000728 <main>

08000a5e <LoopForever>:

LoopForever:
  b LoopForever
 8000a5e:	e7fe      	b.n	8000a5e <LoopForever>
  ldr   r0, =_estack
 8000a60:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a6c:	08004950 	.word	0x08004950
  ldr r2, =_sbss
 8000a70:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a74:	200000d4 	.word	0x200000d4

08000a78 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC1_COMP_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HAL_Init+0x3c>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_Init+0x3c>)
 8000a8e:	2180      	movs	r1, #128	@ 0x80
 8000a90:	0049      	lsls	r1, r1, #1
 8000a92:	430a      	orrs	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f810 	bl	8000abc <HAL_InitTick>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e001      	b.n	8000aac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff feb8 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
}
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000acc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <HAL_InitTick+0x88>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d02b      	beq.n	8000b2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_InitTick+0x8c>)
 8000ad6:	681c      	ldr	r4, [r3, #0]
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <HAL_InitTick+0x88>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	0019      	movs	r1, r3
 8000ade:	23fa      	movs	r3, #250	@ 0xfa
 8000ae0:	0098      	lsls	r0, r3, #2
 8000ae2:	f7ff fb0f 	bl	8000104 <__udivsi3>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	0019      	movs	r1, r3
 8000aea:	0020      	movs	r0, r4
 8000aec:	f7ff fb0a 	bl	8000104 <__udivsi3>
 8000af0:	0003      	movs	r3, r0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f919 	bl	8000d2a <HAL_SYSTICK_Config>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d112      	bne.n	8000b22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d80a      	bhi.n	8000b18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	2301      	movs	r3, #1
 8000b06:	425b      	negs	r3, r3
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f8e8 	bl	8000ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <HAL_InitTick+0x90>)
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e00d      	b.n	8000b34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e008      	b.n	8000b34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b22:	230f      	movs	r3, #15
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	e003      	b.n	8000b34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b005      	add	sp, #20
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	20000018 	.word	0x20000018
 8000b48:	20000010 	.word	0x20000010
 8000b4c:	20000014 	.word	0x20000014

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	18d2      	adds	r2, r2, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <HAL_IncTick+0x20>)
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	20000018 	.word	0x20000018
 8000b70:	200000d0 	.word	0x200000d0

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	@ (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	200000d0 	.word	0x200000d0

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	0002      	movs	r2, r0
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b9a:	d809      	bhi.n	8000bb0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	231f      	movs	r3, #31
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <__NVIC_EnableIRQ+0x30>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4091      	lsls	r1, r2
 8000bac:	000a      	movs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bd0:	d828      	bhi.n	8000c24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c90 <__NVIC_SetPriority+0xd4>)
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	33c0      	adds	r3, #192	@ 0xc0
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	589b      	ldr	r3, [r3, r2]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	@ 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	@ 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	481f      	ldr	r0, [pc, #124]	@ (8000c90 <__NVIC_SetPriority+0xd4>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	33c0      	adds	r3, #192	@ 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c22:	e031      	b.n	8000c88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	400b      	ands	r3, r1
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3306      	adds	r3, #6
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1dfa      	adds	r2, r7, #7
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	0011      	movs	r1, r2
 8000c44:	2203      	movs	r2, #3
 8000c46:	400a      	ands	r2, r1
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	21ff      	movs	r1, #255	@ 0xff
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	43d2      	mvns	r2, r2
 8000c52:	401a      	ands	r2, r3
 8000c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	22ff      	movs	r2, #255	@ 0xff
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	2303      	movs	r3, #3
 8000c66:	4003      	ands	r3, r0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	001c      	movs	r4, r3
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	3306      	adds	r3, #6
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	18c3      	adds	r3, r0, r3
 8000c84:	3304      	adds	r3, #4
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1e5a      	subs	r2, r3, #1
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	045b      	lsls	r3, r3, #17
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d301      	bcc.n	8000cb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cac:	2301      	movs	r3, #1
 8000cae:	e010      	b.n	8000cd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <SysTick_Config+0x44>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff ff7c 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SysTick_Config+0x44>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SysTick_Config+0x44>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	210f      	movs	r1, #15
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	1c02      	adds	r2, r0, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	0002      	movs	r2, r0
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff33 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ffaf 	bl	8000c98 <SysTick_Config>
 8000d3a:	0003      	movs	r3, r0
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e04f      	b.n	8000df6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2225      	movs	r2, #37	@ 0x25
 8000d5a:	5c9b      	ldrb	r3, [r3, r2]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d008      	beq.n	8000d74 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2204      	movs	r2, #4
 8000d66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2224      	movs	r2, #36	@ 0x24
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e040      	b.n	8000df6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	210e      	movs	r1, #14
 8000d80:	438a      	bics	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d8e:	491c      	ldr	r1, [pc, #112]	@ (8000e00 <HAL_DMA_Abort+0xbc>)
 8000d90:	400a      	ands	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	438a      	bics	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da8:	221c      	movs	r2, #28
 8000daa:	401a      	ands	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	2101      	movs	r1, #1
 8000db2:	4091      	lsls	r1, r2
 8000db4:	000a      	movs	r2, r1
 8000db6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000dc0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00c      	beq.n	8000de4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dd4:	490a      	ldr	r1, [pc, #40]	@ (8000e00 <HAL_DMA_Abort+0xbc>)
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000de2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2225      	movs	r2, #37	@ 0x25
 8000de8:	2101      	movs	r1, #1
 8000dea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2224      	movs	r2, #36	@ 0x24
 8000df0:	2100      	movs	r1, #0
 8000df2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	fffffeff 	.word	0xfffffeff

08000e04 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2225      	movs	r2, #37	@ 0x25
 8000e18:	5c9b      	ldrb	r3, [r3, r2]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d006      	beq.n	8000e2e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2204      	movs	r2, #4
 8000e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	e048      	b.n	8000ec0 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	210e      	movs	r1, #14
 8000e3a:	438a      	bics	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	438a      	bics	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e58:	491d      	ldr	r1, [pc, #116]	@ (8000ed0 <HAL_DMA_Abort_IT+0xcc>)
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	221c      	movs	r2, #28
 8000e64:	401a      	ands	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e7a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d00c      	beq.n	8000e9e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e8e:	4910      	ldr	r1, [pc, #64]	@ (8000ed0 <HAL_DMA_Abort_IT+0xcc>)
 8000e90:	400a      	ands	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e9c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2225      	movs	r2, #37	@ 0x25
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2224      	movs	r2, #36	@ 0x24
 8000eaa:	2100      	movs	r1, #0
 8000eac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d004      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	0010      	movs	r0, r2
 8000ebe:	4798      	blx	r3
    }
  }
  return status;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	fffffeff 	.word	0xfffffeff

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e14d      	b.n	8001180 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <HAL_GPIO_Init+0x28>
 8000efa:	e13e      	b.n	800117a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x40>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	2201      	movs	r2, #1
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	58d3      	ldr	r3, [r2, r3]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2207      	movs	r2, #7
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2107      	movs	r1, #7
 8000fea:	400b      	ands	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	401a      	ands	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	23c0      	movs	r3, #192	@ 0xc0
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_GPIO_Init+0x174>
 8001046:	e098      	b.n	800117a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001048:	4a53      	ldr	r2, [pc, #332]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3318      	adds	r3, #24
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	589b      	ldr	r3, [r3, r2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2203      	movs	r2, #3
 800105a:	4013      	ands	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	220f      	movs	r2, #15
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	23a0      	movs	r3, #160	@ 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	429a      	cmp	r2, r3
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x1d6>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a48      	ldr	r2, [pc, #288]	@ (800119c <HAL_GPIO_Init+0x2c8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x1d2>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a47      	ldr	r2, [pc, #284]	@ (80011a0 <HAL_GPIO_Init+0x2cc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x1ce>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a46      	ldr	r2, [pc, #280]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x1ca>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a45      	ldr	r2, [pc, #276]	@ (80011a8 <HAL_GPIO_Init+0x2d4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x1c6>
 8001096:	2304      	movs	r3, #4
 8001098:	e008      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 800109a:	2305      	movs	r3, #5
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 800109e:	2303      	movs	r3, #3
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 80010aa:	2300      	movs	r3, #0
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	2103      	movs	r1, #3
 80010b0:	400a      	ands	r2, r1
 80010b2:	00d2      	lsls	r2, r2, #3
 80010b4:	4093      	lsls	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010bc:	4936      	ldr	r1, [pc, #216]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3318      	adds	r3, #24
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ca:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	2380      	movs	r3, #128	@ 0x80
 80010e0:	035b      	lsls	r3, r3, #13
 80010e2:	4013      	ands	r3, r2
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43da      	mvns	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	039b      	lsls	r3, r3, #14
 800110c:	4013      	ands	r3, r2
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800111e:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 8001120:	2384      	movs	r3, #132	@ 0x84
 8001122:	58d3      	ldr	r3, [r2, r3]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001144:	4914      	ldr	r1, [pc, #80]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 8001146:	2284      	movs	r2, #132	@ 0x84
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800114c:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 800114e:	2380      	movs	r3, #128	@ 0x80
 8001150:	58d3      	ldr	r3, [r2, r3]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	2380      	movs	r3, #128	@ 0x80
 8001164:	025b      	lsls	r3, r3, #9
 8001166:	4013      	ands	r3, r2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001172:	4909      	ldr	r1, [pc, #36]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	40da      	lsrs	r2, r3
 8001188:	1e13      	subs	r3, r2, #0
 800118a:	d000      	beq.n	800118e <HAL_GPIO_Init+0x2ba>
 800118c:	e6aa      	b.n	8000ee4 <HAL_GPIO_Init+0x10>
  }
}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b006      	add	sp, #24
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021800 	.word	0x40021800
 800119c:	50000400 	.word	0x50000400
 80011a0:	50000800 	.word	0x50000800
 80011a4:	50000c00 	.word	0x50000c00
 80011a8:	50001000 	.word	0x50001000

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	0008      	movs	r0, r1
 80011b6:	0011      	movs	r1, r2
 80011b8:	1cbb      	adds	r3, r7, #2
 80011ba:	1c02      	adds	r2, r0, #0
 80011bc:	801a      	strh	r2, [r3, #0]
 80011be:	1c7b      	adds	r3, r7, #1
 80011c0:	1c0a      	adds	r2, r1, #0
 80011c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c4:	1c7b      	adds	r3, r7, #1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011cc:	1cbb      	adds	r3, r7, #2
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d4:	e003      	b.n	80011de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d6:	1cbb      	adds	r3, r7, #2
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	@ (800125c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	0019      	movs	r1, r3
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	2380      	movs	r3, #128	@ 0x80
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	429a      	cmp	r2, r3
 800120a:	d11f      	bne.n	800124c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	0013      	movs	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	189b      	adds	r3, r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4912      	ldr	r1, [pc, #72]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800121a:	0018      	movs	r0, r3
 800121c:	f7fe ff72 	bl	8000104 <__udivsi3>
 8001220:	0003      	movs	r3, r0
 8001222:	3301      	adds	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001226:	e008      	b.n	800123a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3b01      	subs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e001      	b.n	800123a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e009      	b.n	800124e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	401a      	ands	r2, r3
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	429a      	cmp	r2, r3
 800124a:	d0ed      	beq.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b004      	add	sp, #16
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	40007000 	.word	0x40007000
 800125c:	fffff9ff 	.word	0xfffff9ff
 8001260:	20000010 	.word	0x20000010
 8001264:	000f4240 	.word	0x000f4240

08001268 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <LL_RCC_GetAPB1Prescaler+0x14>)
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	23e0      	movs	r3, #224	@ 0xe0
 8001272:	01db      	lsls	r3, r3, #7
 8001274:	4013      	ands	r3, r2
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	f000 fb50 	bl	8001934 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	4013      	ands	r3, r2
 800129c:	d100      	bne.n	80012a0 <HAL_RCC_OscConfig+0x20>
 800129e:	e07c      	b.n	800139a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a0:	4bc3      	ldr	r3, [pc, #780]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2238      	movs	r2, #56	@ 0x38
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012aa:	4bc1      	ldr	r3, [pc, #772]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2203      	movs	r2, #3
 80012b0:	4013      	ands	r3, r2
 80012b2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	d102      	bne.n	80012c0 <HAL_RCC_OscConfig+0x40>
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d002      	beq.n	80012c6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d10b      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	4bba      	ldr	r3, [pc, #744]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	029b      	lsls	r3, r3, #10
 80012ce:	4013      	ands	r3, r2
 80012d0:	d062      	beq.n	8001398 <HAL_RCC_OscConfig+0x118>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d15e      	bne.n	8001398 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e32a      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	2380      	movs	r3, #128	@ 0x80
 80012e4:	025b      	lsls	r3, r3, #9
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_OscConfig+0x7a>
 80012ea:	4bb1      	ldr	r3, [pc, #708]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4bb0      	ldr	r3, [pc, #704]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	0249      	lsls	r1, r1, #9
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e020      	b.n	800133c <HAL_RCC_OscConfig+0xbc>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	23a0      	movs	r3, #160	@ 0xa0
 8001300:	02db      	lsls	r3, r3, #11
 8001302:	429a      	cmp	r2, r3
 8001304:	d10e      	bne.n	8001324 <HAL_RCC_OscConfig+0xa4>
 8001306:	4baa      	ldr	r3, [pc, #680]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4ba9      	ldr	r3, [pc, #676]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	02c9      	lsls	r1, r1, #11
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	4ba6      	ldr	r3, [pc, #664]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4ba5      	ldr	r3, [pc, #660]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 800131a:	2180      	movs	r1, #128	@ 0x80
 800131c:	0249      	lsls	r1, r1, #9
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xbc>
 8001324:	4ba2      	ldr	r3, [pc, #648]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4ba1      	ldr	r3, [pc, #644]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 800132a:	49a2      	ldr	r1, [pc, #648]	@ (80015b4 <HAL_RCC_OscConfig+0x334>)
 800132c:	400a      	ands	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	4b9f      	ldr	r3, [pc, #636]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b9e      	ldr	r3, [pc, #632]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001336:	49a0      	ldr	r1, [pc, #640]	@ (80015b8 <HAL_RCC_OscConfig+0x338>)
 8001338:	400a      	ands	r2, r1
 800133a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d014      	beq.n	800136e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fc16 	bl	8000b74 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134e:	f7ff fc11 	bl	8000b74 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b64      	cmp	r3, #100	@ 0x64
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e2e9      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001360:	4b93      	ldr	r3, [pc, #588]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	4013      	ands	r3, r2
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0xce>
 800136c:	e015      	b.n	800139a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff fc01 	bl	8000b74 <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fbfc 	bl	8000b74 <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	@ 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e2d4      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138a:	4b89      	ldr	r3, [pc, #548]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	029b      	lsls	r3, r3, #10
 8001392:	4013      	ands	r3, r2
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0xf8>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d100      	bne.n	80013a6 <HAL_RCC_OscConfig+0x126>
 80013a4:	e099      	b.n	80014da <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a6:	4b82      	ldr	r3, [pc, #520]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2238      	movs	r2, #56	@ 0x38
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b0:	4b7f      	ldr	r3, [pc, #508]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2203      	movs	r2, #3
 80013b6:	4013      	ands	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b10      	cmp	r3, #16
 80013be:	d102      	bne.n	80013c6 <HAL_RCC_OscConfig+0x146>
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d135      	bne.n	8001438 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013cc:	4b78      	ldr	r3, [pc, #480]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x164>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e2a7      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b72      	ldr	r3, [pc, #456]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a74      	ldr	r2, [pc, #464]	@ (80015bc <HAL_RCC_OscConfig+0x33c>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	0019      	movs	r1, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	021a      	lsls	r2, r3, #8
 80013f4:	4b6e      	ldr	r3, [pc, #440]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013f6:	430a      	orrs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d112      	bne.n	8001426 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001400:	4b6b      	ldr	r3, [pc, #428]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a6e      	ldr	r2, [pc, #440]	@ (80015c0 <HAL_RCC_OscConfig+0x340>)
 8001406:	4013      	ands	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	4b68      	ldr	r3, [pc, #416]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001414:	4b66      	ldr	r3, [pc, #408]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0adb      	lsrs	r3, r3, #11
 800141a:	2207      	movs	r2, #7
 800141c:	4013      	ands	r3, r2
 800141e:	4a69      	ldr	r2, [pc, #420]	@ (80015c4 <HAL_RCC_OscConfig+0x344>)
 8001420:	40da      	lsrs	r2, r3
 8001422:	4b69      	ldr	r3, [pc, #420]	@ (80015c8 <HAL_RCC_OscConfig+0x348>)
 8001424:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001426:	4b69      	ldr	r3, [pc, #420]	@ (80015cc <HAL_RCC_OscConfig+0x34c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff fb46 	bl	8000abc <HAL_InitTick>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d051      	beq.n	80014d8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e27d      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d030      	beq.n	80014a2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001440:	4b5b      	ldr	r3, [pc, #364]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a5e      	ldr	r2, [pc, #376]	@ (80015c0 <HAL_RCC_OscConfig+0x340>)
 8001446:	4013      	ands	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	4b58      	ldr	r3, [pc, #352]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001454:	4b56      	ldr	r3, [pc, #344]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b55      	ldr	r3, [pc, #340]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	0049      	lsls	r1, r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fb87 	bl	8000b74 <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fb82 	bl	8000b74 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e25a      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800147e:	4b4c      	ldr	r3, [pc, #304]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4013      	ands	r3, r2
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b49      	ldr	r3, [pc, #292]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a4b      	ldr	r2, [pc, #300]	@ (80015bc <HAL_RCC_OscConfig+0x33c>)
 8001490:	4013      	ands	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	021a      	lsls	r2, r3, #8
 800149a:	4b45      	ldr	r3, [pc, #276]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	e01b      	b.n	80014da <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014a2:	4b43      	ldr	r3, [pc, #268]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b42      	ldr	r3, [pc, #264]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014a8:	4949      	ldr	r1, [pc, #292]	@ (80015d0 <HAL_RCC_OscConfig+0x350>)
 80014aa:	400a      	ands	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb61 	bl	8000b74 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fb5c 	bl	8000b74 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e234      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ca:	4b39      	ldr	r3, [pc, #228]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4013      	ands	r3, r2
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x238>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2208      	movs	r2, #8
 80014e0:	4013      	ands	r3, r2
 80014e2:	d047      	beq.n	8001574 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014e4:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2238      	movs	r2, #56	@ 0x38
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b18      	cmp	r3, #24
 80014ee:	d10a      	bne.n	8001506 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014f0:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f4:	2202      	movs	r2, #2
 80014f6:	4013      	ands	r3, r2
 80014f8:	d03c      	beq.n	8001574 <HAL_RCC_OscConfig+0x2f4>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d138      	bne.n	8001574 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e216      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d019      	beq.n	8001542 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001510:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001512:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001514:	2101      	movs	r1, #1
 8001516:	430a      	orrs	r2, r1
 8001518:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fb2b 	bl	8000b74 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff fb26 	bl	8000b74 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1fe      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001536:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d0f1      	beq.n	8001524 <HAL_RCC_OscConfig+0x2a4>
 8001540:	e018      	b.n	8001574 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001544:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001548:	2101      	movs	r1, #1
 800154a:	438a      	bics	r2, r1
 800154c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fb11 	bl	8000b74 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fb0c 	bl	8000b74 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1e4      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d1f1      	bne.n	8001558 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2204      	movs	r2, #4
 800157a:	4013      	ands	r3, r2
 800157c:	d100      	bne.n	8001580 <HAL_RCC_OscConfig+0x300>
 800157e:	e0c7      	b.n	8001710 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001580:	231f      	movs	r3, #31
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2238      	movs	r2, #56	@ 0x38
 800158e:	4013      	ands	r3, r2
 8001590:	2b20      	cmp	r3, #32
 8001592:	d11f      	bne.n	80015d4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001598:	2202      	movs	r2, #2
 800159a:	4013      	ands	r3, r2
 800159c:	d100      	bne.n	80015a0 <HAL_RCC_OscConfig+0x320>
 800159e:	e0b7      	b.n	8001710 <HAL_RCC_OscConfig+0x490>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d000      	beq.n	80015aa <HAL_RCC_OscConfig+0x32a>
 80015a8:	e0b2      	b.n	8001710 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e1c2      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	fffeffff 	.word	0xfffeffff
 80015b8:	fffbffff 	.word	0xfffbffff
 80015bc:	ffff80ff 	.word	0xffff80ff
 80015c0:	ffffc7ff 	.word	0xffffc7ff
 80015c4:	00f42400 	.word	0x00f42400
 80015c8:	20000010 	.word	0x20000010
 80015cc:	20000014 	.word	0x20000014
 80015d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015d4:	4bb5      	ldr	r3, [pc, #724]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80015d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	055b      	lsls	r3, r3, #21
 80015dc:	4013      	ands	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x364>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x366>
 80015e4:	2300      	movs	r3, #0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d011      	beq.n	800160e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4bb0      	ldr	r3, [pc, #704]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80015ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015ee:	4baf      	ldr	r3, [pc, #700]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80015f0:	2180      	movs	r1, #128	@ 0x80
 80015f2:	0549      	lsls	r1, r1, #21
 80015f4:	430a      	orrs	r2, r1
 80015f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015f8:	4bac      	ldr	r3, [pc, #688]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80015fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015fc:	2380      	movs	r3, #128	@ 0x80
 80015fe:	055b      	lsls	r3, r3, #21
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001606:	231f      	movs	r3, #31
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160e:	4ba8      	ldr	r3, [pc, #672]	@ (80018b0 <HAL_RCC_OscConfig+0x630>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	@ 0x80
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4013      	ands	r3, r2
 8001618:	d11a      	bne.n	8001650 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800161a:	4ba5      	ldr	r3, [pc, #660]	@ (80018b0 <HAL_RCC_OscConfig+0x630>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4ba4      	ldr	r3, [pc, #656]	@ (80018b0 <HAL_RCC_OscConfig+0x630>)
 8001620:	2180      	movs	r1, #128	@ 0x80
 8001622:	0049      	lsls	r1, r1, #1
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001628:	f7ff faa4 	bl	8000b74 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001632:	f7ff fa9f 	bl	8000b74 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e177      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001644:	4b9a      	ldr	r3, [pc, #616]	@ (80018b0 <HAL_RCC_OscConfig+0x630>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4013      	ands	r3, r2
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x3e6>
 8001658:	4b94      	ldr	r3, [pc, #592]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800165a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800165c:	4b93      	ldr	r3, [pc, #588]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800165e:	2101      	movs	r1, #1
 8001660:	430a      	orrs	r2, r1
 8001662:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001664:	e01c      	b.n	80016a0 <HAL_RCC_OscConfig+0x420>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x408>
 800166e:	4b8f      	ldr	r3, [pc, #572]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001670:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001672:	4b8e      	ldr	r3, [pc, #568]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001674:	2104      	movs	r1, #4
 8001676:	430a      	orrs	r2, r1
 8001678:	65da      	str	r2, [r3, #92]	@ 0x5c
 800167a:	4b8c      	ldr	r3, [pc, #560]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800167c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800167e:	4b8b      	ldr	r3, [pc, #556]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001680:	2101      	movs	r1, #1
 8001682:	430a      	orrs	r2, r1
 8001684:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0x420>
 8001688:	4b88      	ldr	r3, [pc, #544]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800168a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800168c:	4b87      	ldr	r3, [pc, #540]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800168e:	2101      	movs	r1, #1
 8001690:	438a      	bics	r2, r1
 8001692:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001694:	4b85      	ldr	r3, [pc, #532]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001696:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001698:	4b84      	ldr	r3, [pc, #528]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800169a:	2104      	movs	r1, #4
 800169c:	438a      	bics	r2, r1
 800169e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d014      	beq.n	80016d2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa64 	bl	8000b74 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b0:	e009      	b.n	80016c6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fa5f 	bl	8000b74 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	4a7d      	ldr	r2, [pc, #500]	@ (80018b4 <HAL_RCC_OscConfig+0x634>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e136      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c6:	4b79      	ldr	r3, [pc, #484]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80016c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ca:	2202      	movs	r2, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x432>
 80016d0:	e013      	b.n	80016fa <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa4f 	bl	8000b74 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016da:	e009      	b.n	80016f0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa4a 	bl	8000b74 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	4a73      	ldr	r2, [pc, #460]	@ (80018b4 <HAL_RCC_OscConfig+0x634>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e121      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f0:	4b6e      	ldr	r3, [pc, #440]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80016f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f4:	2202      	movs	r2, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016fa:	231f      	movs	r3, #31
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001704:	4b69      	ldr	r3, [pc, #420]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001706:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001708:	4b68      	ldr	r3, [pc, #416]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800170a:	496b      	ldr	r1, [pc, #428]	@ (80018b8 <HAL_RCC_OscConfig+0x638>)
 800170c:	400a      	ands	r2, r1
 800170e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2220      	movs	r2, #32
 8001716:	4013      	ands	r3, r2
 8001718:	d039      	beq.n	800178e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01b      	beq.n	800175a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001722:	4b62      	ldr	r3, [pc, #392]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4b61      	ldr	r3, [pc, #388]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	03c9      	lsls	r1, r1, #15
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fa20 	bl	8000b74 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173a:	f7ff fa1b 	bl	8000b74 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e0f3      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800174c:	4b57      	ldr	r3, [pc, #348]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	041b      	lsls	r3, r3, #16
 8001754:	4013      	ands	r3, r2
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x4ba>
 8001758:	e019      	b.n	800178e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800175a:	4b54      	ldr	r3, [pc, #336]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b53      	ldr	r3, [pc, #332]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001760:	4956      	ldr	r1, [pc, #344]	@ (80018bc <HAL_RCC_OscConfig+0x63c>)
 8001762:	400a      	ands	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff fa05 	bl	8000b74 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001770:	f7ff fa00 	bl	8000b74 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0d8      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001782:	4b4a      	ldr	r3, [pc, #296]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	@ 0x80
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	4013      	ands	r3, r2
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d100      	bne.n	8001798 <HAL_RCC_OscConfig+0x518>
 8001796:	e0cc      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001798:	4b44      	ldr	r3, [pc, #272]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2238      	movs	r2, #56	@ 0x38
 800179e:	4013      	ands	r3, r2
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d100      	bne.n	80017a6 <HAL_RCC_OscConfig+0x526>
 80017a4:	e07b      	b.n	800189e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d156      	bne.n	800185c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b3f      	ldr	r3, [pc, #252]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b3e      	ldr	r3, [pc, #248]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80017b4:	4942      	ldr	r1, [pc, #264]	@ (80018c0 <HAL_RCC_OscConfig+0x640>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff f9db 	bl	8000b74 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f9d6 	bl	8000b74 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e0ae      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d6:	4b35      	ldr	r3, [pc, #212]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	049b      	lsls	r3, r3, #18
 80017de:	4013      	ands	r3, r2
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e2:	4b32      	ldr	r3, [pc, #200]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4a37      	ldr	r2, [pc, #220]	@ (80018c4 <HAL_RCC_OscConfig+0x644>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180e:	431a      	orrs	r2, r3
 8001810:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001812:	430a      	orrs	r2, r1
 8001814:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001816:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	0449      	lsls	r1, r1, #17
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001824:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800182a:	2180      	movs	r1, #128	@ 0x80
 800182c:	0549      	lsls	r1, r1, #21
 800182e:	430a      	orrs	r2, r1
 8001830:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff f99f 	bl	8000b74 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f99a 	bl	8000b74 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e072      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	@ 0x80
 8001854:	049b      	lsls	r3, r3, #18
 8001856:	4013      	ands	r3, r2
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x5bc>
 800185a:	e06a      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001862:	4917      	ldr	r1, [pc, #92]	@ (80018c0 <HAL_RCC_OscConfig+0x640>)
 8001864:	400a      	ands	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff f984 	bl	8000b74 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f97f 	bl	8000b74 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e057      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	049b      	lsls	r3, r3, #18
 800188c:	4013      	ands	r3, r2
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_RCC_OscConfig+0x62c>)
 8001896:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <HAL_RCC_OscConfig+0x648>)
 8001898:	400a      	ands	r2, r1
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	e049      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e044      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40007000 	.word	0x40007000
 80018b4:	00001388 	.word	0x00001388
 80018b8:	efffffff 	.word	0xefffffff
 80018bc:	ffbfffff 	.word	0xffbfffff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	11c1808c 	.word	0x11c1808c
 80018c8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_RCC_OscConfig+0x6bc>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2203      	movs	r2, #3
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	429a      	cmp	r2, r3
 80018de:	d126      	bne.n	800192e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2270      	movs	r2, #112	@ 0x70
 80018e4:	401a      	ands	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d11f      	bne.n	800192e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	23fe      	movs	r3, #254	@ 0xfe
 80018f2:	01db      	lsls	r3, r3, #7
 80018f4:	401a      	ands	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d116      	bne.n	800192e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	23f8      	movs	r3, #248	@ 0xf8
 8001904:	039b      	lsls	r3, r3, #14
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d10e      	bne.n	800192e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	23e0      	movs	r3, #224	@ 0xe0
 8001914:	051b      	lsls	r3, r3, #20
 8001916:	401a      	ands	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	0f5b      	lsrs	r3, r3, #29
 8001924:	075a      	lsls	r2, r3, #29
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b008      	add	sp, #32
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0e9      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b76      	ldr	r3, [pc, #472]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2207      	movs	r2, #7
 800195a:	4013      	ands	r3, r2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d91e      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b73      	ldr	r3, [pc, #460]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2207      	movs	r2, #7
 8001968:	4393      	bics	r3, r2
 800196a:	0019      	movs	r1, r3
 800196c:	4b70      	ldr	r3, [pc, #448]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001974:	f7ff f8fe 	bl	8000b74 <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800197c:	e009      	b.n	8001992 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197e:	f7ff f8f9 	bl	8000b74 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	4a6a      	ldr	r2, [pc, #424]	@ (8001b34 <HAL_RCC_ClockConfig+0x1f4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0ca      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001992:	4b67      	ldr	r3, [pc, #412]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2207      	movs	r2, #7
 8001998:	4013      	ands	r3, r2
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d1ee      	bne.n	800197e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	d006      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019b4:	4b60      	ldr	r3, [pc, #384]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019ba:	21e0      	movs	r1, #224	@ 0xe0
 80019bc:	01c9      	lsls	r1, r1, #7
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	4a5d      	ldr	r2, [pc, #372]	@ (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	4b59      	ldr	r3, [pc, #356]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	430a      	orrs	r2, r1
 80019d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	4013      	ands	r3, r2
 80019de:	d057      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e8:	4b53      	ldr	r3, [pc, #332]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	029b      	lsls	r3, r3, #10
 80019f0:	4013      	ands	r3, r2
 80019f2:	d12b      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e097      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a00:	4b4d      	ldr	r3, [pc, #308]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	049b      	lsls	r3, r3, #18
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d11f      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e08b      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a18:	4b47      	ldr	r3, [pc, #284]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4013      	ands	r3, r2
 8001a22:	d113      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e07f      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a30:	4b41      	ldr	r3, [pc, #260]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d108      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e074      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e06d      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2207      	movs	r2, #7
 8001a52:	4393      	bics	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4b37      	ldr	r3, [pc, #220]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a60:	f7ff f888 	bl	8000b74 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a68:	e009      	b.n	8001a7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6a:	f7ff f883 	bl	8000b74 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	4a2f      	ldr	r2, [pc, #188]	@ (8001b34 <HAL_RCC_ClockConfig+0x1f4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e054      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2238      	movs	r2, #56	@ 0x38
 8001a84:	401a      	ands	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1ec      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2207      	movs	r2, #7
 8001a96:	4013      	ands	r3, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d21e      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f860 	bl	8000b74 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7ff f85b 	bl	8000b74 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <HAL_RCC_ClockConfig+0x1f4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e02c      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ace:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1ee      	bne.n	8001aba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae6:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4a15      	ldr	r2, [pc, #84]	@ (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001afa:	f000 f829 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001afe:	0001      	movs	r1, r0
 8001b00:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	220f      	movs	r2, #15
 8001b08:	401a      	ands	r2, r3
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_RCC_ClockConfig+0x204>)
 8001b0c:	0092      	lsls	r2, r2, #2
 8001b0e:	58d3      	ldr	r3, [r2, r3]
 8001b10:	221f      	movs	r2, #31
 8001b12:	4013      	ands	r3, r2
 8001b14:	000a      	movs	r2, r1
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_RCC_ClockConfig+0x208>)
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_RCC_ClockConfig+0x20c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7fe ffcb 	bl	8000abc <HAL_InitTick>
 8001b26:	0003      	movs	r3, r0
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40022000 	.word	0x40022000
 8001b34:	00001388 	.word	0x00001388
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	fffff0ff 	.word	0xfffff0ff
 8001b40:	ffff8fff 	.word	0xffff8fff
 8001b44:	080048b8 	.word	0x080048b8
 8001b48:	20000010 	.word	0x20000010
 8001b4c:	20000014 	.word	0x20000014

08001b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b56:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2238      	movs	r2, #56	@ 0x38
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d10f      	bne.n	8001b80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b60:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0adb      	lsrs	r3, r3, #11
 8001b66:	2207      	movs	r2, #7
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	4835      	ldr	r0, [pc, #212]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b76:	f7fe fac5 	bl	8000104 <__udivsi3>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	e05d      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b80:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2238      	movs	r2, #56	@ 0x38
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b8c:	4b30      	ldr	r3, [pc, #192]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	e054      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b92:	4b2d      	ldr	r3, [pc, #180]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2238      	movs	r2, #56	@ 0x38
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d138      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	2207      	movs	r2, #7
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d10d      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	4824      	ldr	r0, [pc, #144]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bc0:	f7fe faa0 	bl	8000104 <__udivsi3>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	227f      	movs	r2, #127	@ 0x7f
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	434b      	muls	r3, r1
 8001bd4:	617b      	str	r3, [r7, #20]
        break;
 8001bd6:	e00d      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	481c      	ldr	r0, [pc, #112]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bdc:	f7fe fa92 	bl	8000104 <__udivsi3>
 8001be0:	0003      	movs	r3, r0
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b18      	ldr	r3, [pc, #96]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	227f      	movs	r2, #127	@ 0x7f
 8001bec:	4013      	ands	r3, r2
 8001bee:	434b      	muls	r3, r1
 8001bf0:	617b      	str	r3, [r7, #20]
        break;
 8001bf2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0f5b      	lsrs	r3, r3, #29
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	3301      	adds	r3, #1
 8001c00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7fe fa7d 	bl	8000104 <__udivsi3>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e015      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c10:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2238      	movs	r2, #56	@ 0x38
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d103      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c1c:	2380      	movs	r3, #128	@ 0x80
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2238      	movs	r2, #56	@ 0x38
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b18      	cmp	r3, #24
 8001c2e:	d103      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c30:	23fa      	movs	r3, #250	@ 0xfa
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	e001      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c3c:	693b      	ldr	r3, [r7, #16]
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b006      	add	sp, #24
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			@ (mov r8, r8)
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	007a1200 	.word	0x007a1200

08001c54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c58:	4b02      	ldr	r3, [pc, #8]	@ (8001c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	20000010 	.word	0x20000010

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c6c:	f7ff fff2 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c70:	0004      	movs	r4, r0
 8001c72:	f7ff faf9 	bl	8001268 <LL_RCC_GetAPB1Prescaler>
 8001c76:	0003      	movs	r3, r0
 8001c78:	0b1a      	lsrs	r2, r3, #12
 8001c7a:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	58d3      	ldr	r3, [r2, r3]
 8001c80:	221f      	movs	r2, #31
 8001c82:	4013      	ands	r3, r2
 8001c84:	40dc      	lsrs	r4, r3
 8001c86:	0023      	movs	r3, r4
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	080048f8 	.word	0x080048f8

08001c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c9c:	2313      	movs	r3, #19
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ca4:	2312      	movs	r3, #18
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	@ 0x80
 8001cb2:	029b      	lsls	r3, r3, #10
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d100      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001cb8:	e0ad      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2011      	movs	r0, #17
 8001cbc:	183b      	adds	r3, r7, r0
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc2:	4b47      	ldr	r3, [pc, #284]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cc6:	2380      	movs	r3, #128	@ 0x80
 8001cc8:	055b      	lsls	r3, r3, #21
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d110      	bne.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b44      	ldr	r3, [pc, #272]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cd2:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cd4:	2180      	movs	r1, #128	@ 0x80
 8001cd6:	0549      	lsls	r1, r1, #21
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cdc:	4b40      	ldr	r3, [pc, #256]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	055b      	lsls	r3, r3, #21
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cea:	183b      	adds	r3, r7, r0
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cf6:	2180      	movs	r1, #128	@ 0x80
 8001cf8:	0049      	lsls	r1, r1, #1
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cfe:	f7fe ff39 	bl	8000b74 <HAL_GetTick>
 8001d02:	0003      	movs	r3, r0
 8001d04:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d06:	e00b      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d08:	f7fe ff34 	bl	8000b74 <HAL_GetTick>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d904      	bls.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d16:	2313      	movs	r3, #19
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	701a      	strb	r2, [r3, #0]
        break;
 8001d1e:	e005      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d20:	4b30      	ldr	r3, [pc, #192]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0ed      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d2c:	2313      	movs	r3, #19
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d15e      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d36:	4b2a      	ldr	r3, [pc, #168]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d3a:	23c0      	movs	r3, #192	@ 0xc0
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d019      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d014      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d52:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d56:	4a24      	ldr	r2, [pc, #144]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d5c:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d60:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d62:	2180      	movs	r1, #128	@ 0x80
 8001d64:	0249      	lsls	r1, r1, #9
 8001d66:	430a      	orrs	r2, r1
 8001d68:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d70:	491e      	ldr	r1, [pc, #120]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	d016      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7fe fef6 	bl	8000b74 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8c:	e00c      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe fef1 	bl	8000b74 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4a15      	ldr	r2, [pc, #84]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d904      	bls.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d9e:	2313      	movs	r3, #19
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	2203      	movs	r2, #3
 8001da4:	701a      	strb	r2, [r3, #0]
            break;
 8001da6:	e004      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da8:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d0ed      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001db2:	2313      	movs	r3, #19
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10a      	bne.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc0:	4a09      	ldr	r2, [pc, #36]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dca:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dd0:	e016      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dd2:	2312      	movs	r3, #18
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2213      	movs	r2, #19
 8001dd8:	18ba      	adds	r2, r7, r2
 8001dda:	7812      	ldrb	r2, [r2, #0]
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e00f      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40007000 	.word	0x40007000
 8001de8:	fffffcff 	.word	0xfffffcff
 8001dec:	fffeffff 	.word	0xfffeffff
 8001df0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df4:	2312      	movs	r3, #18
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2213      	movs	r2, #19
 8001dfa:	18ba      	adds	r2, r7, r2
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e00:	2311      	movs	r3, #17
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4bb6      	ldr	r3, [pc, #728]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e0e:	4bb5      	ldr	r3, [pc, #724]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e10:	49b5      	ldr	r1, [pc, #724]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e20:	4bb0      	ldr	r3, [pc, #704]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	2203      	movs	r2, #3
 8001e26:	4393      	bics	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4bad      	ldr	r3, [pc, #692]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e3e:	4ba9      	ldr	r3, [pc, #676]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e42:	220c      	movs	r2, #12
 8001e44:	4393      	bics	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4ba5      	ldr	r3, [pc, #660]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2204      	movs	r2, #4
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e60:	2230      	movs	r2, #48	@ 0x30
 8001e62:	4393      	bics	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	4b9e      	ldr	r3, [pc, #632]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2210      	movs	r2, #16
 8001e76:	4013      	ands	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e7a:	4b9a      	ldr	r3, [pc, #616]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7e:	4a9b      	ldr	r2, [pc, #620]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	4b96      	ldr	r3, [pc, #600]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	015b      	lsls	r3, r3, #5
 8001e96:	4013      	ands	r3, r2
 8001e98:	d009      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001e9a:	4b92      	ldr	r3, [pc, #584]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9e:	4a94      	ldr	r2, [pc, #592]	@ (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	4b8e      	ldr	r3, [pc, #568]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eba:	4b8a      	ldr	r3, [pc, #552]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	4a8d      	ldr	r2, [pc, #564]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ec8:	4b86      	ldr	r3, [pc, #536]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	@ 0x80
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d009      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001eda:	4b82      	ldr	r3, [pc, #520]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	4a86      	ldr	r2, [pc, #536]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef8:	4b7a      	ldr	r3, [pc, #488]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efc:	4a7f      	ldr	r2, [pc, #508]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	4b77      	ldr	r3, [pc, #476]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2240      	movs	r2, #64	@ 0x40
 8001f12:	4013      	ands	r3, r2
 8001f14:	d009      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f16:	4b73      	ldr	r3, [pc, #460]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1a:	4a79      	ldr	r2, [pc, #484]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	4b6f      	ldr	r3, [pc, #444]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f26:	430a      	orrs	r2, r1
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	@ 0x80
 8001f30:	01db      	lsls	r3, r3, #7
 8001f32:	4013      	ands	r3, r2
 8001f34:	d015      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f36:	4b6b      	ldr	r3, [pc, #428]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	0899      	lsrs	r1, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f42:	4b68      	ldr	r3, [pc, #416]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	05db      	lsls	r3, r3, #23
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d106      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f54:	4b63      	ldr	r3, [pc, #396]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4b62      	ldr	r3, [pc, #392]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5a:	2180      	movs	r1, #128	@ 0x80
 8001f5c:	0249      	lsls	r1, r1, #9
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	031b      	lsls	r3, r3, #12
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	2240      	movs	r2, #64	@ 0x40
 8001f74:	4393      	bics	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f7c:	4b59      	ldr	r3, [pc, #356]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	039b      	lsls	r3, r3, #14
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d016      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f8e:	4b55      	ldr	r3, [pc, #340]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f92:	4a5c      	ldr	r2, [pc, #368]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f9c:	4b51      	ldr	r3, [pc, #324]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	03db      	lsls	r3, r3, #15
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d106      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fae:	4b4d      	ldr	r3, [pc, #308]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	0449      	lsls	r1, r1, #17
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	03db      	lsls	r3, r3, #15
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d016      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001fc8:	4b46      	ldr	r3, [pc, #280]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	4a4e      	ldr	r2, [pc, #312]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fd6:	4b43      	ldr	r3, [pc, #268]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	045b      	lsls	r3, r3, #17
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	4b3d      	ldr	r3, [pc, #244]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	0449      	lsls	r1, r1, #17
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4013      	ands	r3, r2
 8002000:	d014      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002002:	4b38      	ldr	r3, [pc, #224]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002006:	2203      	movs	r2, #3
 8002008:	4393      	bics	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1a      	ldr	r2, [r3, #32]
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002012:	430a      	orrs	r2, r1
 8002014:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d106      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800201e:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b30      	ldr	r3, [pc, #192]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002024:	2180      	movs	r1, #128	@ 0x80
 8002026:	0249      	lsls	r1, r1, #9
 8002028:	430a      	orrs	r2, r1
 800202a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	019b      	lsls	r3, r3, #6
 8002034:	4013      	ands	r3, r2
 8002036:	d014      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002038:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203c:	220c      	movs	r2, #12
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002046:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002048:	430a      	orrs	r2, r1
 800204a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	2b04      	cmp	r3, #4
 8002052:	d106      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002054:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800205a:	2180      	movs	r1, #128	@ 0x80
 800205c:	0249      	lsls	r1, r1, #9
 800205e:	430a      	orrs	r2, r1
 8002060:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	@ 0x80
 8002068:	045b      	lsls	r3, r3, #17
 800206a:	4013      	ands	r3, r2
 800206c:	d016      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800206e:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	4a22      	ldr	r2, [pc, #136]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002074:	4013      	ands	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800207e:	430a      	orrs	r2, r1
 8002080:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002086:	2380      	movs	r3, #128	@ 0x80
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	429a      	cmp	r2, r3
 800208c:	d106      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	0449      	lsls	r1, r1, #17
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	@ 0x80
 80020a2:	049b      	lsls	r3, r3, #18
 80020a4:	4013      	ands	r3, r2
 80020a6:	d016      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	4a10      	ldr	r2, [pc, #64]	@ (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80020c0:	2380      	movs	r3, #128	@ 0x80
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ce:	2180      	movs	r1, #128	@ 0x80
 80020d0:	0449      	lsls	r1, r1, #17
 80020d2:	430a      	orrs	r2, r1
 80020d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80020d6:	2312      	movs	r3, #18
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	781b      	ldrb	r3, [r3, #0]
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	efffffff 	.word	0xefffffff
 80020ec:	fffff3ff 	.word	0xfffff3ff
 80020f0:	fffffcff 	.word	0xfffffcff
 80020f4:	fff3ffff 	.word	0xfff3ffff
 80020f8:	ffcfffff 	.word	0xffcfffff
 80020fc:	ffffcfff 	.word	0xffffcfff
 8002100:	ffff3fff 	.word	0xffff3fff
 8002104:	ffbfffff 	.word	0xffbfffff
 8002108:	feffffff 	.word	0xfeffffff

0800210c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e046      	b.n	80021ac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2288      	movs	r2, #136	@ 0x88
 8002122:	589b      	ldr	r3, [r3, r2]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2284      	movs	r2, #132	@ 0x84
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f7fe fc10 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2288      	movs	r2, #136	@ 0x88
 800213c:	2124      	movs	r1, #36	@ 0x24
 800213e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2101      	movs	r1, #1
 800214c:	438a      	bics	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0018      	movs	r0, r3
 800215c:	f000 ffd2 	bl	8003104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 fc78 	bl	8002a58 <UART_SetConfig>
 8002168:	0003      	movs	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e01c      	b.n	80021ac <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	490d      	ldr	r1, [pc, #52]	@ (80021b4 <HAL_UART_Init+0xa8>)
 800217e:	400a      	ands	r2, r1
 8002180:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	212a      	movs	r1, #42	@ 0x2a
 800218e:	438a      	bics	r2, r1
 8002190:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f001 f861 	bl	800326c <UART_CheckIdleState>
 80021aa:	0003      	movs	r3, r0
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	ffffb7ff 	.word	0xffffb7ff

080021b8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	1dbb      	adds	r3, r7, #6
 80021c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2288      	movs	r2, #136	@ 0x88
 80021ca:	589b      	ldr	r3, [r3, r2]
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d000      	beq.n	80021d2 <HAL_UART_Transmit_IT+0x1a>
 80021d0:	e08d      	b.n	80022ee <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_UART_Transmit_IT+0x28>
 80021d8:	1dbb      	adds	r3, r7, #6
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e085      	b.n	80022f0 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	015b      	lsls	r3, r3, #5
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d109      	bne.n	8002204 <HAL_UART_Transmit_IT+0x4c>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2201      	movs	r2, #1
 80021fc:	4013      	ands	r3, r2
 80021fe:	d001      	beq.n	8002204 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e075      	b.n	80022f0 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1dba      	adds	r2, r7, #6
 800220e:	2154      	movs	r1, #84	@ 0x54
 8002210:	8812      	ldrh	r2, [r2, #0]
 8002212:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1dba      	adds	r2, r7, #6
 8002218:	2156      	movs	r1, #86	@ 0x56
 800221a:	8812      	ldrh	r2, [r2, #0]
 800221c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2290      	movs	r2, #144	@ 0x90
 8002228:	2100      	movs	r1, #0
 800222a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2288      	movs	r2, #136	@ 0x88
 8002230:	2121      	movs	r1, #33	@ 0x21
 8002232:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	059b      	lsls	r3, r3, #22
 800223c:	429a      	cmp	r2, r3
 800223e:	d12a      	bne.n	8002296 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	015b      	lsls	r3, r3, #5
 8002248:	429a      	cmp	r2, r3
 800224a:	d107      	bne.n	800225c <HAL_UART_Transmit_IT+0xa4>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d103      	bne.n	800225c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a28      	ldr	r2, [pc, #160]	@ (80022f8 <HAL_UART_Transmit_IT+0x140>)
 8002258:	679a      	str	r2, [r3, #120]	@ 0x78
 800225a:	e002      	b.n	8002262 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a27      	ldr	r2, [pc, #156]	@ (80022fc <HAL_UART_Transmit_IT+0x144>)
 8002260:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002262:	f3ef 8310 	mrs	r3, PRIMASK
 8002266:	61fb      	str	r3, [r7, #28]
  return(result);
 8002268:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800226a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800226c:	2301      	movs	r3, #1
 800226e:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	f383 8810 	msr	PRIMASK, r3
}
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2180      	movs	r1, #128	@ 0x80
 8002284:	0409      	lsls	r1, r1, #16
 8002286:	430a      	orrs	r2, r1
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	f383 8810 	msr	PRIMASK, r3
}
 8002294:	e029      	b.n	80022ea <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	015b      	lsls	r3, r3, #5
 800229e:	429a      	cmp	r2, r3
 80022a0:	d107      	bne.n	80022b2 <HAL_UART_Transmit_IT+0xfa>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <HAL_UART_Transmit_IT+0x148>)
 80022ae:	679a      	str	r2, [r3, #120]	@ 0x78
 80022b0:	e002      	b.n	80022b8 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a13      	ldr	r2, [pc, #76]	@ (8002304 <HAL_UART_Transmit_IT+0x14c>)
 80022b6:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b8:	f3ef 8310 	mrs	r3, PRIMASK
 80022bc:	613b      	str	r3, [r7, #16]
  return(result);
 80022be:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022c2:	2301      	movs	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f383 8810 	msr	PRIMASK, r3
}
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2180      	movs	r1, #128	@ 0x80
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f383 8810 	msr	PRIMASK, r3
}
 80022e8:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
  }
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b00c      	add	sp, #48	@ 0x30
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	08003a41 	.word	0x08003a41
 80022fc:	08003955 	.word	0x08003955
 8002300:	08003897 	.word	0x08003897
 8002304:	080037e3 	.word	0x080037e3

08002308 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	1dbb      	adds	r3, r7, #6
 8002314:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	228c      	movs	r2, #140	@ 0x8c
 800231a:	589b      	ldr	r3, [r3, r2]
 800231c:	2b20      	cmp	r3, #32
 800231e:	d14f      	bne.n	80023c0 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_UART_Receive_IT+0x26>
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e047      	b.n	80023c2 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	2380      	movs	r3, #128	@ 0x80
 8002338:	015b      	lsls	r3, r3, #5
 800233a:	429a      	cmp	r2, r3
 800233c:	d109      	bne.n	8002352 <HAL_UART_Receive_IT+0x4a>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2201      	movs	r2, #1
 800234a:	4013      	ands	r3, r2
 800234c:	d001      	beq.n	8002352 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e037      	b.n	80023c2 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <HAL_UART_Receive_IT+0xc4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d025      	beq.n	80023ae <HAL_UART_Receive_IT+0xa6>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <HAL_UART_Receive_IT+0xc8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d020      	beq.n	80023ae <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	4013      	ands	r3, r2
 8002378:	d019      	beq.n	80023ae <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800237a:	f3ef 8310 	mrs	r3, PRIMASK
 800237e:	613b      	str	r3, [r7, #16]
  return(result);
 8002380:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	2301      	movs	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f383 8810 	msr	PRIMASK, r3
}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2180      	movs	r1, #128	@ 0x80
 800239c:	04c9      	lsls	r1, r1, #19
 800239e:	430a      	orrs	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f383 8810 	msr	PRIMASK, r3
}
 80023ac:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023ae:	1dbb      	adds	r3, r7, #6
 80023b0:	881a      	ldrh	r2, [r3, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f001 f872 	bl	80034a0 <UART_Start_Receive_IT>
 80023bc:	0003      	movs	r3, r0
 80023be:	e000      	b.n	80023c2 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b008      	add	sp, #32
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	40008000 	.word	0x40008000
 80023d0:	40008400 	.word	0x40008400

080023d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b0aa      	sub	sp, #168	@ 0xa8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	22a4      	movs	r2, #164	@ 0xa4
 80023e4:	18b9      	adds	r1, r7, r2
 80023e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	20a0      	movs	r0, #160	@ 0xa0
 80023f0:	1839      	adds	r1, r7, r0
 80023f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	249c      	movs	r4, #156	@ 0x9c
 80023fc:	1939      	adds	r1, r7, r4
 80023fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002400:	0011      	movs	r1, r2
 8002402:	18bb      	adds	r3, r7, r2
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4aa2      	ldr	r2, [pc, #648]	@ (8002690 <HAL_UART_IRQHandler+0x2bc>)
 8002408:	4013      	ands	r3, r2
 800240a:	2298      	movs	r2, #152	@ 0x98
 800240c:	18bd      	adds	r5, r7, r2
 800240e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002410:	18bb      	adds	r3, r7, r2
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d11a      	bne.n	800244e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002418:	187b      	adds	r3, r7, r1
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2220      	movs	r2, #32
 800241e:	4013      	ands	r3, r2
 8002420:	d015      	beq.n	800244e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002422:	183b      	adds	r3, r7, r0
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2220      	movs	r2, #32
 8002428:	4013      	ands	r3, r2
 800242a:	d105      	bne.n	8002438 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800242c:	193b      	adds	r3, r7, r4
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	055b      	lsls	r3, r3, #21
 8002434:	4013      	ands	r3, r2
 8002436:	d00a      	beq.n	800244e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243c:	2b00      	cmp	r3, #0
 800243e:	d100      	bne.n	8002442 <HAL_UART_IRQHandler+0x6e>
 8002440:	e2dc      	b.n	80029fc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	0010      	movs	r0, r2
 800244a:	4798      	blx	r3
      }
      return;
 800244c:	e2d6      	b.n	80029fc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800244e:	2398      	movs	r3, #152	@ 0x98
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d100      	bne.n	800245a <HAL_UART_IRQHandler+0x86>
 8002458:	e122      	b.n	80026a0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800245a:	239c      	movs	r3, #156	@ 0x9c
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a8c      	ldr	r2, [pc, #560]	@ (8002694 <HAL_UART_IRQHandler+0x2c0>)
 8002462:	4013      	ands	r3, r2
 8002464:	d106      	bne.n	8002474 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002466:	23a0      	movs	r3, #160	@ 0xa0
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a8a      	ldr	r2, [pc, #552]	@ (8002698 <HAL_UART_IRQHandler+0x2c4>)
 800246e:	4013      	ands	r3, r2
 8002470:	d100      	bne.n	8002474 <HAL_UART_IRQHandler+0xa0>
 8002472:	e115      	b.n	80026a0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002474:	23a4      	movs	r3, #164	@ 0xa4
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d012      	beq.n	80024a6 <HAL_UART_IRQHandler+0xd2>
 8002480:	23a0      	movs	r3, #160	@ 0xa0
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	@ 0x80
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d00b      	beq.n	80024a6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2290      	movs	r2, #144	@ 0x90
 800249a:	589b      	ldr	r3, [r3, r2]
 800249c:	2201      	movs	r2, #1
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2190      	movs	r1, #144	@ 0x90
 80024a4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024a6:	23a4      	movs	r3, #164	@ 0xa4
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2202      	movs	r2, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	d011      	beq.n	80024d6 <HAL_UART_IRQHandler+0x102>
 80024b2:	239c      	movs	r3, #156	@ 0x9c
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	d00b      	beq.n	80024d6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2202      	movs	r2, #2
 80024c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2290      	movs	r2, #144	@ 0x90
 80024ca:	589b      	ldr	r3, [r3, r2]
 80024cc:	2204      	movs	r2, #4
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2190      	movs	r1, #144	@ 0x90
 80024d4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024d6:	23a4      	movs	r3, #164	@ 0xa4
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2204      	movs	r2, #4
 80024de:	4013      	ands	r3, r2
 80024e0:	d011      	beq.n	8002506 <HAL_UART_IRQHandler+0x132>
 80024e2:	239c      	movs	r3, #156	@ 0x9c
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	d00b      	beq.n	8002506 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2204      	movs	r2, #4
 80024f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2290      	movs	r2, #144	@ 0x90
 80024fa:	589b      	ldr	r3, [r3, r2]
 80024fc:	2202      	movs	r2, #2
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2190      	movs	r1, #144	@ 0x90
 8002504:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002506:	23a4      	movs	r3, #164	@ 0xa4
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2208      	movs	r2, #8
 800250e:	4013      	ands	r3, r2
 8002510:	d017      	beq.n	8002542 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002512:	23a0      	movs	r3, #160	@ 0xa0
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2220      	movs	r2, #32
 800251a:	4013      	ands	r3, r2
 800251c:	d105      	bne.n	800252a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800251e:	239c      	movs	r3, #156	@ 0x9c
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5b      	ldr	r2, [pc, #364]	@ (8002694 <HAL_UART_IRQHandler+0x2c0>)
 8002526:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002528:	d00b      	beq.n	8002542 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2208      	movs	r2, #8
 8002530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2290      	movs	r2, #144	@ 0x90
 8002536:	589b      	ldr	r3, [r3, r2]
 8002538:	2208      	movs	r2, #8
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2190      	movs	r1, #144	@ 0x90
 8002540:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002542:	23a4      	movs	r3, #164	@ 0xa4
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	@ 0x80
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4013      	ands	r3, r2
 800254e:	d013      	beq.n	8002578 <HAL_UART_IRQHandler+0x1a4>
 8002550:	23a0      	movs	r3, #160	@ 0xa0
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	04db      	lsls	r3, r3, #19
 800255a:	4013      	ands	r3, r2
 800255c:	d00c      	beq.n	8002578 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2280      	movs	r2, #128	@ 0x80
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2290      	movs	r2, #144	@ 0x90
 800256c:	589b      	ldr	r3, [r3, r2]
 800256e:	2220      	movs	r2, #32
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2190      	movs	r1, #144	@ 0x90
 8002576:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2290      	movs	r2, #144	@ 0x90
 800257c:	589b      	ldr	r3, [r3, r2]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d100      	bne.n	8002584 <HAL_UART_IRQHandler+0x1b0>
 8002582:	e23d      	b.n	8002a00 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002584:	23a4      	movs	r3, #164	@ 0xa4
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2220      	movs	r2, #32
 800258c:	4013      	ands	r3, r2
 800258e:	d015      	beq.n	80025bc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002590:	23a0      	movs	r3, #160	@ 0xa0
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2220      	movs	r2, #32
 8002598:	4013      	ands	r3, r2
 800259a:	d106      	bne.n	80025aa <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800259c:	239c      	movs	r3, #156	@ 0x9c
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	055b      	lsls	r3, r3, #21
 80025a6:	4013      	ands	r3, r2
 80025a8:	d008      	beq.n	80025bc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	0010      	movs	r0, r2
 80025ba:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2290      	movs	r2, #144	@ 0x90
 80025c0:	589b      	ldr	r3, [r3, r2]
 80025c2:	2194      	movs	r1, #148	@ 0x94
 80025c4:	187a      	adds	r2, r7, r1
 80025c6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2240      	movs	r2, #64	@ 0x40
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b40      	cmp	r3, #64	@ 0x40
 80025d4:	d004      	beq.n	80025e0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2228      	movs	r2, #40	@ 0x28
 80025dc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025de:	d04c      	beq.n	800267a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f001 f880 	bl	80036e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b40      	cmp	r3, #64	@ 0x40
 80025f4:	d13c      	bne.n	8002670 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f6:	f3ef 8310 	mrs	r3, PRIMASK
 80025fa:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80025fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025fe:	2090      	movs	r0, #144	@ 0x90
 8002600:	183a      	adds	r2, r7, r0
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	2301      	movs	r3, #1
 8002606:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800260a:	f383 8810 	msr	PRIMASK, r3
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2140      	movs	r1, #64	@ 0x40
 800261c:	438a      	bics	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	183b      	adds	r3, r7, r0
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002626:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002628:	f383 8810 	msr	PRIMASK, r3
}
 800262c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2280      	movs	r2, #128	@ 0x80
 8002632:	589b      	ldr	r3, [r3, r2]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d016      	beq.n	8002666 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2280      	movs	r2, #128	@ 0x80
 800263c:	589b      	ldr	r3, [r3, r2]
 800263e:	4a17      	ldr	r2, [pc, #92]	@ (800269c <HAL_UART_IRQHandler+0x2c8>)
 8002640:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2280      	movs	r2, #128	@ 0x80
 8002646:	589b      	ldr	r3, [r3, r2]
 8002648:	0018      	movs	r0, r3
 800264a:	f7fe fbdb 	bl	8000e04 <HAL_DMA_Abort_IT>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d01c      	beq.n	800268c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2280      	movs	r2, #128	@ 0x80
 8002656:	589b      	ldr	r3, [r3, r2]
 8002658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	2180      	movs	r1, #128	@ 0x80
 800265e:	5852      	ldr	r2, [r2, r1]
 8002660:	0010      	movs	r0, r2
 8002662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002664:	e012      	b.n	800268c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 f9e1 	bl	8002a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266e:	e00d      	b.n	800268c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 f9dc 	bl	8002a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002678:	e008      	b.n	800268c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f000 f9d7 	bl	8002a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2290      	movs	r2, #144	@ 0x90
 8002686:	2100      	movs	r1, #0
 8002688:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800268a:	e1b9      	b.n	8002a00 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268c:	46c0      	nop			@ (mov r8, r8)
    return;
 800268e:	e1b7      	b.n	8002a00 <HAL_UART_IRQHandler+0x62c>
 8002690:	0000080f 	.word	0x0000080f
 8002694:	10000001 	.word	0x10000001
 8002698:	04000120 	.word	0x04000120
 800269c:	080037b5 	.word	0x080037b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d000      	beq.n	80026aa <HAL_UART_IRQHandler+0x2d6>
 80026a8:	e13e      	b.n	8002928 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80026aa:	23a4      	movs	r3, #164	@ 0xa4
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2210      	movs	r2, #16
 80026b2:	4013      	ands	r3, r2
 80026b4:	d100      	bne.n	80026b8 <HAL_UART_IRQHandler+0x2e4>
 80026b6:	e137      	b.n	8002928 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80026b8:	23a0      	movs	r3, #160	@ 0xa0
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2210      	movs	r2, #16
 80026c0:	4013      	ands	r3, r2
 80026c2:	d100      	bne.n	80026c6 <HAL_UART_IRQHandler+0x2f2>
 80026c4:	e130      	b.n	8002928 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2210      	movs	r2, #16
 80026cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2240      	movs	r2, #64	@ 0x40
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b40      	cmp	r3, #64	@ 0x40
 80026da:	d000      	beq.n	80026de <HAL_UART_IRQHandler+0x30a>
 80026dc:	e0a4      	b.n	8002828 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	589b      	ldr	r3, [r3, r2]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	217e      	movs	r1, #126	@ 0x7e
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d100      	bne.n	80026f8 <HAL_UART_IRQHandler+0x324>
 80026f6:	e185      	b.n	8002a04 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	225c      	movs	r2, #92	@ 0x5c
 80026fc:	5a9b      	ldrh	r3, [r3, r2]
 80026fe:	187a      	adds	r2, r7, r1
 8002700:	8812      	ldrh	r2, [r2, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d300      	bcc.n	8002708 <HAL_UART_IRQHandler+0x334>
 8002706:	e17d      	b.n	8002a04 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	187a      	adds	r2, r7, r1
 800270c:	215e      	movs	r1, #94	@ 0x5e
 800270e:	8812      	ldrh	r2, [r2, #0]
 8002710:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2280      	movs	r2, #128	@ 0x80
 8002716:	589b      	ldr	r3, [r3, r2]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2220      	movs	r2, #32
 800271e:	4013      	ands	r3, r2
 8002720:	d170      	bne.n	8002804 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002722:	f3ef 8310 	mrs	r3, PRIMASK
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800272a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800272c:	2301      	movs	r3, #1
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	f383 8810 	msr	PRIMASK, r3
}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	49b4      	ldr	r1, [pc, #720]	@ (8002a14 <HAL_UART_IRQHandler+0x640>)
 8002744:	400a      	ands	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800274a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274e:	f383 8810 	msr	PRIMASK, r3
}
 8002752:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002754:	f3ef 8310 	mrs	r3, PRIMASK
 8002758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800275a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275c:	677b      	str	r3, [r7, #116]	@ 0x74
 800275e:	2301      	movs	r3, #1
 8002760:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002764:	f383 8810 	msr	PRIMASK, r3
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2101      	movs	r1, #1
 8002776:	438a      	bics	r2, r1
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800277c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002786:	f3ef 8310 	mrs	r3, PRIMASK
 800278a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800278c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800278e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002790:	2301      	movs	r3, #1
 8002792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002796:	f383 8810 	msr	PRIMASK, r3
}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2140      	movs	r1, #64	@ 0x40
 80027a8:	438a      	bics	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027ae:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	228c      	movs	r2, #140	@ 0x8c
 80027bc:	2120      	movs	r1, #32
 80027be:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c6:	f3ef 8310 	mrs	r3, PRIMASK
 80027ca:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80027cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027d0:	2301      	movs	r3, #1
 80027d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d6:	f383 8810 	msr	PRIMASK, r3
}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2110      	movs	r1, #16
 80027e8:	438a      	bics	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f2:	f383 8810 	msr	PRIMASK, r3
}
 80027f6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	589b      	ldr	r3, [r3, r2]
 80027fe:	0018      	movs	r0, r3
 8002800:	f7fe faa0 	bl	8000d44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	225c      	movs	r2, #92	@ 0x5c
 800280e:	5a9a      	ldrh	r2, [r3, r2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	215e      	movs	r1, #94	@ 0x5e
 8002814:	5a5b      	ldrh	r3, [r3, r1]
 8002816:	b29b      	uxth	r3, r3
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	b29a      	uxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0011      	movs	r1, r2
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f90d 	bl	8002a40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002826:	e0ed      	b.n	8002a04 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	225c      	movs	r2, #92	@ 0x5c
 800282c:	5a99      	ldrh	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	225e      	movs	r2, #94	@ 0x5e
 8002832:	5a9b      	ldrh	r3, [r3, r2]
 8002834:	b29a      	uxth	r2, r3
 8002836:	208e      	movs	r0, #142	@ 0x8e
 8002838:	183b      	adds	r3, r7, r0
 800283a:	1a8a      	subs	r2, r1, r2
 800283c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	225e      	movs	r2, #94	@ 0x5e
 8002842:	5a9b      	ldrh	r3, [r3, r2]
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d100      	bne.n	800284c <HAL_UART_IRQHandler+0x478>
 800284a:	e0dd      	b.n	8002a08 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800284c:	183b      	adds	r3, r7, r0
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d100      	bne.n	8002856 <HAL_UART_IRQHandler+0x482>
 8002854:	e0d8      	b.n	8002a08 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002856:	f3ef 8310 	mrs	r3, PRIMASK
 800285a:	60fb      	str	r3, [r7, #12]
  return(result);
 800285c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800285e:	2488      	movs	r4, #136	@ 0x88
 8002860:	193a      	adds	r2, r7, r4
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	2301      	movs	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f383 8810 	msr	PRIMASK, r3
}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4967      	ldr	r1, [pc, #412]	@ (8002a18 <HAL_UART_IRQHandler+0x644>)
 800287c:	400a      	ands	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	193b      	adds	r3, r7, r4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f383 8810 	msr	PRIMASK, r3
}
 800288c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288e:	f3ef 8310 	mrs	r3, PRIMASK
 8002892:	61bb      	str	r3, [r7, #24]
  return(result);
 8002894:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002896:	2484      	movs	r4, #132	@ 0x84
 8002898:	193a      	adds	r2, r7, r4
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	2301      	movs	r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f383 8810 	msr	PRIMASK, r3
}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	495a      	ldr	r1, [pc, #360]	@ (8002a1c <HAL_UART_IRQHandler+0x648>)
 80028b4:	400a      	ands	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	193b      	adds	r3, r7, r4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f383 8810 	msr	PRIMASK, r3
}
 80028c4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	228c      	movs	r2, #140	@ 0x8c
 80028ca:	2120      	movs	r1, #32
 80028cc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028da:	f3ef 8310 	mrs	r3, PRIMASK
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e2:	2480      	movs	r4, #128	@ 0x80
 80028e4:	193a      	adds	r2, r7, r4
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	2301      	movs	r3, #1
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ee:	f383 8810 	msr	PRIMASK, r3
}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2110      	movs	r1, #16
 8002900:	438a      	bics	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	193b      	adds	r3, r7, r4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	f383 8810 	msr	PRIMASK, r3
}
 8002910:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002918:	183b      	adds	r3, r7, r0
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0011      	movs	r1, r2
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f88d 	bl	8002a40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002926:	e06f      	b.n	8002a08 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002928:	23a4      	movs	r3, #164	@ 0xa4
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	035b      	lsls	r3, r3, #13
 8002932:	4013      	ands	r3, r2
 8002934:	d010      	beq.n	8002958 <HAL_UART_IRQHandler+0x584>
 8002936:	239c      	movs	r3, #156	@ 0x9c
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	03db      	lsls	r3, r3, #15
 8002940:	4013      	ands	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2280      	movs	r2, #128	@ 0x80
 800294a:	0352      	lsls	r2, r2, #13
 800294c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0018      	movs	r0, r3
 8002952:	f001 fe47 	bl	80045e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002956:	e05a      	b.n	8002a0e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002958:	23a4      	movs	r3, #164	@ 0xa4
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2280      	movs	r2, #128	@ 0x80
 8002960:	4013      	ands	r3, r2
 8002962:	d016      	beq.n	8002992 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002964:	23a0      	movs	r3, #160	@ 0xa0
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2280      	movs	r2, #128	@ 0x80
 800296c:	4013      	ands	r3, r2
 800296e:	d106      	bne.n	800297e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002970:	239c      	movs	r3, #156	@ 0x9c
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	4013      	ands	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002982:	2b00      	cmp	r3, #0
 8002984:	d042      	beq.n	8002a0c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	0010      	movs	r0, r2
 800298e:	4798      	blx	r3
    }
    return;
 8002990:	e03c      	b.n	8002a0c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002992:	23a4      	movs	r3, #164	@ 0xa4
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2240      	movs	r2, #64	@ 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	d00a      	beq.n	80029b4 <HAL_UART_IRQHandler+0x5e0>
 800299e:	23a0      	movs	r3, #160	@ 0xa0
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2240      	movs	r2, #64	@ 0x40
 80029a6:	4013      	ands	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f001 f8c1 	bl	8003b34 <UART_EndTransmit_IT>
    return;
 80029b2:	e02c      	b.n	8002a0e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80029b4:	23a4      	movs	r3, #164	@ 0xa4
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	4013      	ands	r3, r2
 80029c0:	d00b      	beq.n	80029da <HAL_UART_IRQHandler+0x606>
 80029c2:	23a0      	movs	r3, #160	@ 0xa0
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	05db      	lsls	r3, r3, #23
 80029cc:	4013      	ands	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f001 fe16 	bl	8004604 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029d8:	e019      	b.n	8002a0e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029da:	23a4      	movs	r3, #164	@ 0xa4
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	045b      	lsls	r3, r3, #17
 80029e4:	4013      	ands	r3, r2
 80029e6:	d012      	beq.n	8002a0e <HAL_UART_IRQHandler+0x63a>
 80029e8:	23a0      	movs	r3, #160	@ 0xa0
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	da0d      	bge.n	8002a0e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f001 fdfd 	bl	80045f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029fa:	e008      	b.n	8002a0e <HAL_UART_IRQHandler+0x63a>
      return;
 80029fc:	46c0      	nop			@ (mov r8, r8)
 80029fe:	e006      	b.n	8002a0e <HAL_UART_IRQHandler+0x63a>
    return;
 8002a00:	46c0      	nop			@ (mov r8, r8)
 8002a02:	e004      	b.n	8002a0e <HAL_UART_IRQHandler+0x63a>
      return;
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	e002      	b.n	8002a0e <HAL_UART_IRQHandler+0x63a>
      return;
 8002a08:	46c0      	nop			@ (mov r8, r8)
 8002a0a:	e000      	b.n	8002a0e <HAL_UART_IRQHandler+0x63a>
    return;
 8002a0c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b02a      	add	sp, #168	@ 0xa8
 8002a12:	bdb0      	pop	{r4, r5, r7, pc}
 8002a14:	fffffeff 	.word	0xfffffeff
 8002a18:	fffffedf 	.word	0xfffffedf
 8002a1c:	effffffe 	.word	0xeffffffe

08002a20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a28:	46c0      	nop			@ (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a38:	46c0      	nop			@ (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b002      	add	sp, #8
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	000a      	movs	r2, r1
 8002a4a:	1cbb      	adds	r3, r7, #2
 8002a4c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b002      	add	sp, #8
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b090      	sub	sp, #64	@ 0x40
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a60:	231a      	movs	r3, #26
 8002a62:	2220      	movs	r2, #32
 8002a64:	189b      	adds	r3, r3, r2
 8002a66:	19db      	adds	r3, r3, r7
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4ac1      	ldr	r2, [pc, #772]	@ (8002d90 <UART_SetConfig+0x338>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a96:	430b      	orrs	r3, r1
 8002a98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4abc      	ldr	r2, [pc, #752]	@ (8002d94 <UART_SetConfig+0x33c>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	68d9      	ldr	r1, [r3, #12]
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	0003      	movs	r3, r0
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4ab6      	ldr	r2, [pc, #728]	@ (8002d98 <UART_SetConfig+0x340>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <UART_SetConfig+0x80>
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4ab4      	ldr	r2, [pc, #720]	@ (8002d9c <UART_SetConfig+0x344>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4ab0      	ldr	r2, [pc, #704]	@ (8002da0 <UART_SetConfig+0x348>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aea:	430b      	orrs	r3, r1
 8002aec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	220f      	movs	r2, #15
 8002af6:	4393      	bics	r3, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	0003      	movs	r3, r0
 8002b04:	430b      	orrs	r3, r1
 8002b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4aa5      	ldr	r2, [pc, #660]	@ (8002da4 <UART_SetConfig+0x34c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d131      	bne.n	8002b76 <UART_SetConfig+0x11e>
 8002b12:	4ba5      	ldr	r3, [pc, #660]	@ (8002da8 <UART_SetConfig+0x350>)
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	2203      	movs	r2, #3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d01d      	beq.n	8002b5a <UART_SetConfig+0x102>
 8002b1e:	d823      	bhi.n	8002b68 <UART_SetConfig+0x110>
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d00c      	beq.n	8002b3e <UART_SetConfig+0xe6>
 8002b24:	d820      	bhi.n	8002b68 <UART_SetConfig+0x110>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <UART_SetConfig+0xd8>
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00e      	beq.n	8002b4c <UART_SetConfig+0xf4>
 8002b2e:	e01b      	b.n	8002b68 <UART_SetConfig+0x110>
 8002b30:	231b      	movs	r3, #27
 8002b32:	2220      	movs	r2, #32
 8002b34:	189b      	adds	r3, r3, r2
 8002b36:	19db      	adds	r3, r3, r7
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e154      	b.n	8002de8 <UART_SetConfig+0x390>
 8002b3e:	231b      	movs	r3, #27
 8002b40:	2220      	movs	r2, #32
 8002b42:	189b      	adds	r3, r3, r2
 8002b44:	19db      	adds	r3, r3, r7
 8002b46:	2202      	movs	r2, #2
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e14d      	b.n	8002de8 <UART_SetConfig+0x390>
 8002b4c:	231b      	movs	r3, #27
 8002b4e:	2220      	movs	r2, #32
 8002b50:	189b      	adds	r3, r3, r2
 8002b52:	19db      	adds	r3, r3, r7
 8002b54:	2204      	movs	r2, #4
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e146      	b.n	8002de8 <UART_SetConfig+0x390>
 8002b5a:	231b      	movs	r3, #27
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	19db      	adds	r3, r3, r7
 8002b62:	2208      	movs	r2, #8
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e13f      	b.n	8002de8 <UART_SetConfig+0x390>
 8002b68:	231b      	movs	r3, #27
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	189b      	adds	r3, r3, r2
 8002b6e:	19db      	adds	r3, r3, r7
 8002b70:	2210      	movs	r2, #16
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e138      	b.n	8002de8 <UART_SetConfig+0x390>
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a8c      	ldr	r2, [pc, #560]	@ (8002dac <UART_SetConfig+0x354>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d131      	bne.n	8002be4 <UART_SetConfig+0x18c>
 8002b80:	4b89      	ldr	r3, [pc, #548]	@ (8002da8 <UART_SetConfig+0x350>)
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	220c      	movs	r2, #12
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	d01d      	beq.n	8002bc8 <UART_SetConfig+0x170>
 8002b8c:	d823      	bhi.n	8002bd6 <UART_SetConfig+0x17e>
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d00c      	beq.n	8002bac <UART_SetConfig+0x154>
 8002b92:	d820      	bhi.n	8002bd6 <UART_SetConfig+0x17e>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <UART_SetConfig+0x146>
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d00e      	beq.n	8002bba <UART_SetConfig+0x162>
 8002b9c:	e01b      	b.n	8002bd6 <UART_SetConfig+0x17e>
 8002b9e:	231b      	movs	r3, #27
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	19db      	adds	r3, r3, r7
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e11d      	b.n	8002de8 <UART_SetConfig+0x390>
 8002bac:	231b      	movs	r3, #27
 8002bae:	2220      	movs	r2, #32
 8002bb0:	189b      	adds	r3, r3, r2
 8002bb2:	19db      	adds	r3, r3, r7
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e116      	b.n	8002de8 <UART_SetConfig+0x390>
 8002bba:	231b      	movs	r3, #27
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	189b      	adds	r3, r3, r2
 8002bc0:	19db      	adds	r3, r3, r7
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e10f      	b.n	8002de8 <UART_SetConfig+0x390>
 8002bc8:	231b      	movs	r3, #27
 8002bca:	2220      	movs	r2, #32
 8002bcc:	189b      	adds	r3, r3, r2
 8002bce:	19db      	adds	r3, r3, r7
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	e108      	b.n	8002de8 <UART_SetConfig+0x390>
 8002bd6:	231b      	movs	r3, #27
 8002bd8:	2220      	movs	r2, #32
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	19db      	adds	r3, r3, r7
 8002bde:	2210      	movs	r2, #16
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e101      	b.n	8002de8 <UART_SetConfig+0x390>
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a71      	ldr	r2, [pc, #452]	@ (8002db0 <UART_SetConfig+0x358>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d131      	bne.n	8002c52 <UART_SetConfig+0x1fa>
 8002bee:	4b6e      	ldr	r3, [pc, #440]	@ (8002da8 <UART_SetConfig+0x350>)
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	2230      	movs	r2, #48	@ 0x30
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b30      	cmp	r3, #48	@ 0x30
 8002bf8:	d01d      	beq.n	8002c36 <UART_SetConfig+0x1de>
 8002bfa:	d823      	bhi.n	8002c44 <UART_SetConfig+0x1ec>
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d00c      	beq.n	8002c1a <UART_SetConfig+0x1c2>
 8002c00:	d820      	bhi.n	8002c44 <UART_SetConfig+0x1ec>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <UART_SetConfig+0x1b4>
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d00e      	beq.n	8002c28 <UART_SetConfig+0x1d0>
 8002c0a:	e01b      	b.n	8002c44 <UART_SetConfig+0x1ec>
 8002c0c:	231b      	movs	r3, #27
 8002c0e:	2220      	movs	r2, #32
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	19db      	adds	r3, r3, r7
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e0e6      	b.n	8002de8 <UART_SetConfig+0x390>
 8002c1a:	231b      	movs	r3, #27
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	19db      	adds	r3, r3, r7
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e0df      	b.n	8002de8 <UART_SetConfig+0x390>
 8002c28:	231b      	movs	r3, #27
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	189b      	adds	r3, r3, r2
 8002c2e:	19db      	adds	r3, r3, r7
 8002c30:	2204      	movs	r2, #4
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e0d8      	b.n	8002de8 <UART_SetConfig+0x390>
 8002c36:	231b      	movs	r3, #27
 8002c38:	2220      	movs	r2, #32
 8002c3a:	189b      	adds	r3, r3, r2
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	2208      	movs	r2, #8
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e0d1      	b.n	8002de8 <UART_SetConfig+0x390>
 8002c44:	231b      	movs	r3, #27
 8002c46:	2220      	movs	r2, #32
 8002c48:	189b      	adds	r3, r3, r2
 8002c4a:	19db      	adds	r3, r3, r7
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e0ca      	b.n	8002de8 <UART_SetConfig+0x390>
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a57      	ldr	r2, [pc, #348]	@ (8002db4 <UART_SetConfig+0x35c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d106      	bne.n	8002c6a <UART_SetConfig+0x212>
 8002c5c:	231b      	movs	r3, #27
 8002c5e:	2220      	movs	r2, #32
 8002c60:	189b      	adds	r3, r3, r2
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e0be      	b.n	8002de8 <UART_SetConfig+0x390>
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a52      	ldr	r2, [pc, #328]	@ (8002db8 <UART_SetConfig+0x360>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d106      	bne.n	8002c82 <UART_SetConfig+0x22a>
 8002c74:	231b      	movs	r3, #27
 8002c76:	2220      	movs	r2, #32
 8002c78:	189b      	adds	r3, r3, r2
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e0b2      	b.n	8002de8 <UART_SetConfig+0x390>
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a4d      	ldr	r2, [pc, #308]	@ (8002dbc <UART_SetConfig+0x364>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d106      	bne.n	8002c9a <UART_SetConfig+0x242>
 8002c8c:	231b      	movs	r3, #27
 8002c8e:	2220      	movs	r2, #32
 8002c90:	189b      	adds	r3, r3, r2
 8002c92:	19db      	adds	r3, r3, r7
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e0a6      	b.n	8002de8 <UART_SetConfig+0x390>
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d98 <UART_SetConfig+0x340>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d13e      	bne.n	8002d22 <UART_SetConfig+0x2ca>
 8002ca4:	4b40      	ldr	r3, [pc, #256]	@ (8002da8 <UART_SetConfig+0x350>)
 8002ca6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ca8:	23c0      	movs	r3, #192	@ 0xc0
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	22c0      	movs	r2, #192	@ 0xc0
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d027      	beq.n	8002d06 <UART_SetConfig+0x2ae>
 8002cb6:	22c0      	movs	r2, #192	@ 0xc0
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d82a      	bhi.n	8002d14 <UART_SetConfig+0x2bc>
 8002cbe:	2280      	movs	r2, #128	@ 0x80
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d011      	beq.n	8002cea <UART_SetConfig+0x292>
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d822      	bhi.n	8002d14 <UART_SetConfig+0x2bc>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <UART_SetConfig+0x284>
 8002cd2:	2280      	movs	r2, #128	@ 0x80
 8002cd4:	00d2      	lsls	r2, r2, #3
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <UART_SetConfig+0x2a0>
 8002cda:	e01b      	b.n	8002d14 <UART_SetConfig+0x2bc>
 8002cdc:	231b      	movs	r3, #27
 8002cde:	2220      	movs	r2, #32
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	19db      	adds	r3, r3, r7
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e07e      	b.n	8002de8 <UART_SetConfig+0x390>
 8002cea:	231b      	movs	r3, #27
 8002cec:	2220      	movs	r2, #32
 8002cee:	189b      	adds	r3, r3, r2
 8002cf0:	19db      	adds	r3, r3, r7
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e077      	b.n	8002de8 <UART_SetConfig+0x390>
 8002cf8:	231b      	movs	r3, #27
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	19db      	adds	r3, r3, r7
 8002d00:	2204      	movs	r2, #4
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e070      	b.n	8002de8 <UART_SetConfig+0x390>
 8002d06:	231b      	movs	r3, #27
 8002d08:	2220      	movs	r2, #32
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	19db      	adds	r3, r3, r7
 8002d0e:	2208      	movs	r2, #8
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e069      	b.n	8002de8 <UART_SetConfig+0x390>
 8002d14:	231b      	movs	r3, #27
 8002d16:	2220      	movs	r2, #32
 8002d18:	189b      	adds	r3, r3, r2
 8002d1a:	19db      	adds	r3, r3, r7
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e062      	b.n	8002de8 <UART_SetConfig+0x390>
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <UART_SetConfig+0x344>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d157      	bne.n	8002ddc <UART_SetConfig+0x384>
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <UART_SetConfig+0x350>)
 8002d2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d30:	23c0      	movs	r3, #192	@ 0xc0
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4013      	ands	r3, r2
 8002d36:	22c0      	movs	r2, #192	@ 0xc0
 8002d38:	0092      	lsls	r2, r2, #2
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d040      	beq.n	8002dc0 <UART_SetConfig+0x368>
 8002d3e:	22c0      	movs	r2, #192	@ 0xc0
 8002d40:	0092      	lsls	r2, r2, #2
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d843      	bhi.n	8002dce <UART_SetConfig+0x376>
 8002d46:	2280      	movs	r2, #128	@ 0x80
 8002d48:	0092      	lsls	r2, r2, #2
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d011      	beq.n	8002d72 <UART_SetConfig+0x31a>
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	0092      	lsls	r2, r2, #2
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d83b      	bhi.n	8002dce <UART_SetConfig+0x376>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <UART_SetConfig+0x30c>
 8002d5a:	2280      	movs	r2, #128	@ 0x80
 8002d5c:	0052      	lsls	r2, r2, #1
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <UART_SetConfig+0x328>
 8002d62:	e034      	b.n	8002dce <UART_SetConfig+0x376>
 8002d64:	231b      	movs	r3, #27
 8002d66:	2220      	movs	r2, #32
 8002d68:	189b      	adds	r3, r3, r2
 8002d6a:	19db      	adds	r3, r3, r7
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e03a      	b.n	8002de8 <UART_SetConfig+0x390>
 8002d72:	231b      	movs	r3, #27
 8002d74:	2220      	movs	r2, #32
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	19db      	adds	r3, r3, r7
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e033      	b.n	8002de8 <UART_SetConfig+0x390>
 8002d80:	231b      	movs	r3, #27
 8002d82:	2220      	movs	r2, #32
 8002d84:	189b      	adds	r3, r3, r2
 8002d86:	19db      	adds	r3, r3, r7
 8002d88:	2204      	movs	r2, #4
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e02c      	b.n	8002de8 <UART_SetConfig+0x390>
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	cfff69f3 	.word	0xcfff69f3
 8002d94:	ffffcfff 	.word	0xffffcfff
 8002d98:	40008000 	.word	0x40008000
 8002d9c:	40008400 	.word	0x40008400
 8002da0:	11fff4ff 	.word	0x11fff4ff
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40004400 	.word	0x40004400
 8002db0:	40004800 	.word	0x40004800
 8002db4:	40004c00 	.word	0x40004c00
 8002db8:	40005000 	.word	0x40005000
 8002dbc:	40013c00 	.word	0x40013c00
 8002dc0:	231b      	movs	r3, #27
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	189b      	adds	r3, r3, r2
 8002dc6:	19db      	adds	r3, r3, r7
 8002dc8:	2208      	movs	r2, #8
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e00c      	b.n	8002de8 <UART_SetConfig+0x390>
 8002dce:	231b      	movs	r3, #27
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	19db      	adds	r3, r3, r7
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e005      	b.n	8002de8 <UART_SetConfig+0x390>
 8002ddc:	231b      	movs	r3, #27
 8002dde:	2220      	movs	r2, #32
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	19db      	adds	r3, r3, r7
 8002de4:	2210      	movs	r2, #16
 8002de6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4ac1      	ldr	r2, [pc, #772]	@ (80030f4 <UART_SetConfig+0x69c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d005      	beq.n	8002dfe <UART_SetConfig+0x3a6>
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4ac0      	ldr	r2, [pc, #768]	@ (80030f8 <UART_SetConfig+0x6a0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d000      	beq.n	8002dfe <UART_SetConfig+0x3a6>
 8002dfc:	e093      	b.n	8002f26 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dfe:	231b      	movs	r3, #27
 8002e00:	2220      	movs	r2, #32
 8002e02:	189b      	adds	r3, r3, r2
 8002e04:	19db      	adds	r3, r3, r7
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d015      	beq.n	8002e38 <UART_SetConfig+0x3e0>
 8002e0c:	dc18      	bgt.n	8002e40 <UART_SetConfig+0x3e8>
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d00d      	beq.n	8002e2e <UART_SetConfig+0x3d6>
 8002e12:	dc15      	bgt.n	8002e40 <UART_SetConfig+0x3e8>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <UART_SetConfig+0x3c6>
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d005      	beq.n	8002e28 <UART_SetConfig+0x3d0>
 8002e1c:	e010      	b.n	8002e40 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e1e:	f7fe ff23 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002e22:	0003      	movs	r3, r0
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e26:	e014      	b.n	8002e52 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e28:	4bb4      	ldr	r3, [pc, #720]	@ (80030fc <UART_SetConfig+0x6a4>)
 8002e2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e2c:	e011      	b.n	8002e52 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2e:	f7fe fe8f 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8002e32:	0003      	movs	r3, r0
 8002e34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e36:	e00c      	b.n	8002e52 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e3e:	e008      	b.n	8002e52 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002e44:	231a      	movs	r3, #26
 8002e46:	2220      	movs	r2, #32
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	19db      	adds	r3, r3, r7
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
        break;
 8002e50:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d100      	bne.n	8002e5a <UART_SetConfig+0x402>
 8002e58:	e135      	b.n	80030c6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e5e:	4ba8      	ldr	r3, [pc, #672]	@ (8003100 <UART_SetConfig+0x6a8>)
 8002e60:	0052      	lsls	r2, r2, #1
 8002e62:	5ad3      	ldrh	r3, [r2, r3]
 8002e64:	0019      	movs	r1, r3
 8002e66:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e68:	f7fd f94c 	bl	8000104 <__udivsi3>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	0013      	movs	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	189b      	adds	r3, r3, r2
 8002e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d305      	bcc.n	8002e8c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d906      	bls.n	8002e9a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002e8c:	231a      	movs	r3, #26
 8002e8e:	2220      	movs	r2, #32
 8002e90:	189b      	adds	r3, r3, r2
 8002e92:	19db      	adds	r3, r3, r7
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e044      	b.n	8002f24 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea6:	4b96      	ldr	r3, [pc, #600]	@ (8003100 <UART_SetConfig+0x6a8>)
 8002ea8:	0052      	lsls	r2, r2, #1
 8002eaa:	5ad3      	ldrh	r3, [r2, r3]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	69b8      	ldr	r0, [r7, #24]
 8002eb8:	69f9      	ldr	r1, [r7, #28]
 8002eba:	f7fd fa99 	bl	80003f0 <__aeabi_uldivmod>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	000b      	movs	r3, r1
 8002ec2:	0e11      	lsrs	r1, r2, #24
 8002ec4:	021d      	lsls	r5, r3, #8
 8002ec6:	430d      	orrs	r5, r1
 8002ec8:	0214      	lsls	r4, r2, #8
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68b8      	ldr	r0, [r7, #8]
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	1900      	adds	r0, r0, r4
 8002edc:	4169      	adcs	r1, r5
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f7fd fa80 	bl	80003f0 <__aeabi_uldivmod>
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	000b      	movs	r3, r1
 8002ef4:	0013      	movs	r3, r2
 8002ef6:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002efa:	23c0      	movs	r3, #192	@ 0xc0
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d309      	bcc.n	8002f16 <UART_SetConfig+0x4be>
 8002f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	035b      	lsls	r3, r3, #13
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d204      	bcs.n	8002f16 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	e006      	b.n	8002f24 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002f16:	231a      	movs	r3, #26
 8002f18:	2220      	movs	r2, #32
 8002f1a:	189b      	adds	r3, r3, r2
 8002f1c:	19db      	adds	r3, r3, r7
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002f22:	e0d0      	b.n	80030c6 <UART_SetConfig+0x66e>
 8002f24:	e0cf      	b.n	80030c6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d000      	beq.n	8002f34 <UART_SetConfig+0x4dc>
 8002f32:	e070      	b.n	8003016 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002f34:	231b      	movs	r3, #27
 8002f36:	2220      	movs	r2, #32
 8002f38:	189b      	adds	r3, r3, r2
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d015      	beq.n	8002f6e <UART_SetConfig+0x516>
 8002f42:	dc18      	bgt.n	8002f76 <UART_SetConfig+0x51e>
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d00d      	beq.n	8002f64 <UART_SetConfig+0x50c>
 8002f48:	dc15      	bgt.n	8002f76 <UART_SetConfig+0x51e>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <UART_SetConfig+0x4fc>
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d005      	beq.n	8002f5e <UART_SetConfig+0x506>
 8002f52:	e010      	b.n	8002f76 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f54:	f7fe fe88 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f5c:	e014      	b.n	8002f88 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f5e:	4b67      	ldr	r3, [pc, #412]	@ (80030fc <UART_SetConfig+0x6a4>)
 8002f60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f62:	e011      	b.n	8002f88 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f64:	f7fe fdf4 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f6c:	e00c      	b.n	8002f88 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f74:	e008      	b.n	8002f88 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002f7a:	231a      	movs	r3, #26
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
        break;
 8002f86:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d100      	bne.n	8002f90 <UART_SetConfig+0x538>
 8002f8e:	e09a      	b.n	80030c6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f94:	4b5a      	ldr	r3, [pc, #360]	@ (8003100 <UART_SetConfig+0x6a8>)
 8002f96:	0052      	lsls	r2, r2, #1
 8002f98:	5ad3      	ldrh	r3, [r2, r3]
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f9e:	f7fd f8b1 	bl	8000104 <__udivsi3>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	005a      	lsls	r2, r3, #1
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	18d2      	adds	r2, r2, r3
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	0010      	movs	r0, r2
 8002fb6:	f7fd f8a5 	bl	8000104 <__udivsi3>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc0:	2b0f      	cmp	r3, #15
 8002fc2:	d921      	bls.n	8003008 <UART_SetConfig+0x5b0>
 8002fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	025b      	lsls	r3, r3, #9
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d21c      	bcs.n	8003008 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	200e      	movs	r0, #14
 8002fd4:	2420      	movs	r4, #32
 8002fd6:	1903      	adds	r3, r0, r4
 8002fd8:	19db      	adds	r3, r3, r7
 8002fda:	210f      	movs	r1, #15
 8002fdc:	438a      	bics	r2, r1
 8002fde:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	4013      	ands	r3, r2
 8002fea:	b299      	uxth	r1, r3
 8002fec:	1903      	adds	r3, r0, r4
 8002fee:	19db      	adds	r3, r3, r7
 8002ff0:	1902      	adds	r2, r0, r4
 8002ff2:	19d2      	adds	r2, r2, r7
 8002ff4:	8812      	ldrh	r2, [r2, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	1902      	adds	r2, r0, r4
 8003000:	19d2      	adds	r2, r2, r7
 8003002:	8812      	ldrh	r2, [r2, #0]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	e05e      	b.n	80030c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003008:	231a      	movs	r3, #26
 800300a:	2220      	movs	r2, #32
 800300c:	189b      	adds	r3, r3, r2
 800300e:	19db      	adds	r3, r3, r7
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e057      	b.n	80030c6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003016:	231b      	movs	r3, #27
 8003018:	2220      	movs	r2, #32
 800301a:	189b      	adds	r3, r3, r2
 800301c:	19db      	adds	r3, r3, r7
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d015      	beq.n	8003050 <UART_SetConfig+0x5f8>
 8003024:	dc18      	bgt.n	8003058 <UART_SetConfig+0x600>
 8003026:	2b04      	cmp	r3, #4
 8003028:	d00d      	beq.n	8003046 <UART_SetConfig+0x5ee>
 800302a:	dc15      	bgt.n	8003058 <UART_SetConfig+0x600>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <UART_SetConfig+0x5de>
 8003030:	2b02      	cmp	r3, #2
 8003032:	d005      	beq.n	8003040 <UART_SetConfig+0x5e8>
 8003034:	e010      	b.n	8003058 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003036:	f7fe fe17 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 800303a:	0003      	movs	r3, r0
 800303c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800303e:	e014      	b.n	800306a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003040:	4b2e      	ldr	r3, [pc, #184]	@ (80030fc <UART_SetConfig+0x6a4>)
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003044:	e011      	b.n	800306a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7fe fd83 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 800304a:	0003      	movs	r3, r0
 800304c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800304e:	e00c      	b.n	800306a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003050:	2380      	movs	r3, #128	@ 0x80
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003056:	e008      	b.n	800306a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800305c:	231a      	movs	r3, #26
 800305e:	2220      	movs	r2, #32
 8003060:	189b      	adds	r3, r3, r2
 8003062:	19db      	adds	r3, r3, r7
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
        break;
 8003068:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800306a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306c:	2b00      	cmp	r3, #0
 800306e:	d02a      	beq.n	80030c6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003074:	4b22      	ldr	r3, [pc, #136]	@ (8003100 <UART_SetConfig+0x6a8>)
 8003076:	0052      	lsls	r2, r2, #1
 8003078:	5ad3      	ldrh	r3, [r2, r3]
 800307a:	0019      	movs	r1, r3
 800307c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800307e:	f7fd f841 	bl	8000104 <__udivsi3>
 8003082:	0003      	movs	r3, r0
 8003084:	001a      	movs	r2, r3
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	18d2      	adds	r2, r2, r3
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	0019      	movs	r1, r3
 8003094:	0010      	movs	r0, r2
 8003096:	f7fd f835 	bl	8000104 <__udivsi3>
 800309a:	0003      	movs	r3, r0
 800309c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	2b0f      	cmp	r3, #15
 80030a2:	d90a      	bls.n	80030ba <UART_SetConfig+0x662>
 80030a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	025b      	lsls	r3, r3, #9
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d205      	bcs.n	80030ba <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60da      	str	r2, [r3, #12]
 80030b8:	e005      	b.n	80030c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80030ba:	231a      	movs	r3, #26
 80030bc:	2220      	movs	r2, #32
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	19db      	adds	r3, r3, r7
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	226a      	movs	r2, #106	@ 0x6a
 80030ca:	2101      	movs	r1, #1
 80030cc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	2268      	movs	r2, #104	@ 0x68
 80030d2:	2101      	movs	r1, #1
 80030d4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	2200      	movs	r2, #0
 80030da:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	2200      	movs	r2, #0
 80030e0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80030e2:	231a      	movs	r3, #26
 80030e4:	2220      	movs	r2, #32
 80030e6:	189b      	adds	r3, r3, r2
 80030e8:	19db      	adds	r3, r3, r7
 80030ea:	781b      	ldrb	r3, [r3, #0]
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b010      	add	sp, #64	@ 0x40
 80030f2:	bdb0      	pop	{r4, r5, r7, pc}
 80030f4:	40008000 	.word	0x40008000
 80030f8:	40008400 	.word	0x40008400
 80030fc:	00f42400 	.word	0x00f42400
 8003100:	08004918 	.word	0x08004918

08003104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	2208      	movs	r2, #8
 8003112:	4013      	ands	r3, r2
 8003114:	d00b      	beq.n	800312e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a4a      	ldr	r2, [pc, #296]	@ (8003248 <UART_AdvFeatureConfig+0x144>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	2201      	movs	r2, #1
 8003134:	4013      	ands	r3, r2
 8003136:	d00b      	beq.n	8003150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a43      	ldr	r2, [pc, #268]	@ (800324c <UART_AdvFeatureConfig+0x148>)
 8003140:	4013      	ands	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d00b      	beq.n	8003172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a3b      	ldr	r2, [pc, #236]	@ (8003250 <UART_AdvFeatureConfig+0x14c>)
 8003162:	4013      	ands	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003176:	2204      	movs	r2, #4
 8003178:	4013      	ands	r3, r2
 800317a:	d00b      	beq.n	8003194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4a34      	ldr	r2, [pc, #208]	@ (8003254 <UART_AdvFeatureConfig+0x150>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	2210      	movs	r2, #16
 800319a:	4013      	ands	r3, r2
 800319c:	d00b      	beq.n	80031b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003258 <UART_AdvFeatureConfig+0x154>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	2220      	movs	r2, #32
 80031bc:	4013      	ands	r3, r2
 80031be:	d00b      	beq.n	80031d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4a25      	ldr	r2, [pc, #148]	@ (800325c <UART_AdvFeatureConfig+0x158>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031dc:	2240      	movs	r2, #64	@ 0x40
 80031de:	4013      	ands	r3, r2
 80031e0:	d01d      	beq.n	800321e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003260 <UART_AdvFeatureConfig+0x15c>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	035b      	lsls	r3, r3, #13
 8003202:	429a      	cmp	r2, r3
 8003204:	d10b      	bne.n	800321e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a15      	ldr	r2, [pc, #84]	@ (8003264 <UART_AdvFeatureConfig+0x160>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	2280      	movs	r2, #128	@ 0x80
 8003224:	4013      	ands	r3, r2
 8003226:	d00b      	beq.n	8003240 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a0e      	ldr	r2, [pc, #56]	@ (8003268 <UART_AdvFeatureConfig+0x164>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
  }
}
 8003240:	46c0      	nop			@ (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	ffff7fff 	.word	0xffff7fff
 800324c:	fffdffff 	.word	0xfffdffff
 8003250:	fffeffff 	.word	0xfffeffff
 8003254:	fffbffff 	.word	0xfffbffff
 8003258:	ffffefff 	.word	0xffffefff
 800325c:	ffffdfff 	.word	0xffffdfff
 8003260:	ffefffff 	.word	0xffefffff
 8003264:	ff9fffff 	.word	0xff9fffff
 8003268:	fff7ffff 	.word	0xfff7ffff

0800326c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b092      	sub	sp, #72	@ 0x48
 8003270:	af02      	add	r7, sp, #8
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2290      	movs	r2, #144	@ 0x90
 8003278:	2100      	movs	r1, #0
 800327a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800327c:	f7fd fc7a 	bl	8000b74 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2208      	movs	r2, #8
 800328c:	4013      	ands	r3, r2
 800328e:	2b08      	cmp	r3, #8
 8003290:	d12d      	bne.n	80032ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003294:	2280      	movs	r2, #128	@ 0x80
 8003296:	0391      	lsls	r1, r2, #14
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4a47      	ldr	r2, [pc, #284]	@ (80033b8 <UART_CheckIdleState+0x14c>)
 800329c:	9200      	str	r2, [sp, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	f000 f88e 	bl	80033c0 <UART_WaitOnFlagUntilTimeout>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d022      	beq.n	80032ee <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032b2:	2301      	movs	r3, #1
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			@ (mov r8, r8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2180      	movs	r1, #128	@ 0x80
 80032ca:	438a      	bics	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2288      	movs	r2, #136	@ 0x88
 80032de:	2120      	movs	r1, #32
 80032e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2284      	movs	r2, #132	@ 0x84
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e060      	b.n	80033b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2204      	movs	r2, #4
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d146      	bne.n	800338a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fe:	2280      	movs	r2, #128	@ 0x80
 8003300:	03d1      	lsls	r1, r2, #15
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4a2c      	ldr	r2, [pc, #176]	@ (80033b8 <UART_CheckIdleState+0x14c>)
 8003306:	9200      	str	r2, [sp, #0]
 8003308:	2200      	movs	r2, #0
 800330a:	f000 f859 	bl	80033c0 <UART_WaitOnFlagUntilTimeout>
 800330e:	1e03      	subs	r3, r0, #0
 8003310:	d03b      	beq.n	800338a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003312:	f3ef 8310 	mrs	r3, PRIMASK
 8003316:	60fb      	str	r3, [r7, #12]
  return(result);
 8003318:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800331a:	637b      	str	r3, [r7, #52]	@ 0x34
 800331c:	2301      	movs	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4922      	ldr	r1, [pc, #136]	@ (80033bc <UART_CheckIdleState+0x150>)
 8003334:	400a      	ands	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f383 8810 	msr	PRIMASK, r3
}
 8003342:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003344:	f3ef 8310 	mrs	r3, PRIMASK
 8003348:	61bb      	str	r3, [r7, #24]
  return(result);
 800334a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334c:	633b      	str	r3, [r7, #48]	@ 0x30
 800334e:	2301      	movs	r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			@ (mov r8, r8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	438a      	bics	r2, r1
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	f383 8810 	msr	PRIMASK, r3
}
 8003374:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	228c      	movs	r2, #140	@ 0x8c
 800337a:	2120      	movs	r1, #32
 800337c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2284      	movs	r2, #132	@ 0x84
 8003382:	2100      	movs	r1, #0
 8003384:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e012      	b.n	80033b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2288      	movs	r2, #136	@ 0x88
 800338e:	2120      	movs	r1, #32
 8003390:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	228c      	movs	r2, #140	@ 0x8c
 8003396:	2120      	movs	r1, #32
 8003398:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2284      	movs	r2, #132	@ 0x84
 80033aa:	2100      	movs	r1, #0
 80033ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	0018      	movs	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b010      	add	sp, #64	@ 0x40
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	01ffffff 	.word	0x01ffffff
 80033bc:	fffffedf 	.word	0xfffffedf

080033c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	1dfb      	adds	r3, r7, #7
 80033ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d0:	e051      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	3301      	adds	r3, #1
 80033d6:	d04e      	beq.n	8003476 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7fd fbcc 	bl	8000b74 <HAL_GetTick>
 80033dc:	0002      	movs	r2, r0
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e051      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2204      	movs	r2, #4
 80033fa:	4013      	ands	r3, r2
 80033fc:	d03b      	beq.n	8003476 <UART_WaitOnFlagUntilTimeout+0xb6>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b80      	cmp	r3, #128	@ 0x80
 8003402:	d038      	beq.n	8003476 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b40      	cmp	r3, #64	@ 0x40
 8003408:	d035      	beq.n	8003476 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	2208      	movs	r2, #8
 8003412:	4013      	ands	r3, r2
 8003414:	2b08      	cmp	r3, #8
 8003416:	d111      	bne.n	800343c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2208      	movs	r2, #8
 800341e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	0018      	movs	r0, r3
 8003424:	f000 f960 	bl	80036e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2290      	movs	r2, #144	@ 0x90
 800342c:	2108      	movs	r1, #8
 800342e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2284      	movs	r2, #132	@ 0x84
 8003434:	2100      	movs	r1, #0
 8003436:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e02c      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69da      	ldr	r2, [r3, #28]
 8003442:	2380      	movs	r3, #128	@ 0x80
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	401a      	ands	r2, r3
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	429a      	cmp	r2, r3
 800344e:	d112      	bne.n	8003476 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2280      	movs	r2, #128	@ 0x80
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	0018      	movs	r0, r3
 800345e:	f000 f943 	bl	80036e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2290      	movs	r2, #144	@ 0x90
 8003466:	2120      	movs	r1, #32
 8003468:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2284      	movs	r2, #132	@ 0x84
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e00f      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	4013      	ands	r3, r2
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	425a      	negs	r2, r3
 8003486:	4153      	adcs	r3, r2
 8003488:	b2db      	uxtb	r3, r3
 800348a:	001a      	movs	r2, r3
 800348c:	1dfb      	adds	r3, r7, #7
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d09e      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b004      	add	sp, #16
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b098      	sub	sp, #96	@ 0x60
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	1dbb      	adds	r3, r7, #6
 80034ac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1dba      	adds	r2, r7, #6
 80034b8:	215c      	movs	r1, #92	@ 0x5c
 80034ba:	8812      	ldrh	r2, [r2, #0]
 80034bc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1dba      	adds	r2, r7, #6
 80034c2:	215e      	movs	r1, #94	@ 0x5e
 80034c4:	8812      	ldrh	r2, [r2, #0]
 80034c6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	2380      	movs	r3, #128	@ 0x80
 80034d4:	015b      	lsls	r3, r3, #5
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d10d      	bne.n	80034f6 <UART_Start_Receive_IT+0x56>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <UART_Start_Receive_IT+0x4c>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2260      	movs	r2, #96	@ 0x60
 80034e6:	497b      	ldr	r1, [pc, #492]	@ (80036d4 <UART_Start_Receive_IT+0x234>)
 80034e8:	5299      	strh	r1, [r3, r2]
 80034ea:	e02e      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2260      	movs	r2, #96	@ 0x60
 80034f0:	21ff      	movs	r1, #255	@ 0xff
 80034f2:	5299      	strh	r1, [r3, r2]
 80034f4:	e029      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <UART_Start_Receive_IT+0x7a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <UART_Start_Receive_IT+0x70>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2260      	movs	r2, #96	@ 0x60
 800350a:	21ff      	movs	r1, #255	@ 0xff
 800350c:	5299      	strh	r1, [r3, r2]
 800350e:	e01c      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2260      	movs	r2, #96	@ 0x60
 8003514:	217f      	movs	r1, #127	@ 0x7f
 8003516:	5299      	strh	r1, [r3, r2]
 8003518:	e017      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	055b      	lsls	r3, r3, #21
 8003522:	429a      	cmp	r2, r3
 8003524:	d10d      	bne.n	8003542 <UART_Start_Receive_IT+0xa2>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <UART_Start_Receive_IT+0x98>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2260      	movs	r2, #96	@ 0x60
 8003532:	217f      	movs	r1, #127	@ 0x7f
 8003534:	5299      	strh	r1, [r3, r2]
 8003536:	e008      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2260      	movs	r2, #96	@ 0x60
 800353c:	213f      	movs	r1, #63	@ 0x3f
 800353e:	5299      	strh	r1, [r3, r2]
 8003540:	e003      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2260      	movs	r2, #96	@ 0x60
 8003546:	2100      	movs	r1, #0
 8003548:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2290      	movs	r2, #144	@ 0x90
 800354e:	2100      	movs	r1, #0
 8003550:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	228c      	movs	r2, #140	@ 0x8c
 8003556:	2122      	movs	r1, #34	@ 0x22
 8003558:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355a:	f3ef 8310 	mrs	r3, PRIMASK
 800355e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003562:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003564:	2301      	movs	r3, #1
 8003566:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003582:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003586:	f383 8810 	msr	PRIMASK, r3
}
 800358a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	059b      	lsls	r3, r3, #22
 8003594:	429a      	cmp	r2, r3
 8003596:	d150      	bne.n	800363a <UART_Start_Receive_IT+0x19a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2268      	movs	r2, #104	@ 0x68
 800359c:	5a9b      	ldrh	r3, [r3, r2]
 800359e:	1dba      	adds	r2, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d349      	bcc.n	800363a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	015b      	lsls	r3, r3, #5
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d107      	bne.n	80035c2 <UART_Start_Receive_IT+0x122>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a46      	ldr	r2, [pc, #280]	@ (80036d8 <UART_Start_Receive_IT+0x238>)
 80035be:	675a      	str	r2, [r3, #116]	@ 0x74
 80035c0:	e002      	b.n	80035c8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a45      	ldr	r2, [pc, #276]	@ (80036dc <UART_Start_Receive_IT+0x23c>)
 80035c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d019      	beq.n	8003604 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d0:	f3ef 8310 	mrs	r3, PRIMASK
 80035d4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035da:	2301      	movs	r3, #1
 80035dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e0:	f383 8810 	msr	PRIMASK, r3
}
 80035e4:	46c0      	nop			@ (mov r8, r8)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2180      	movs	r1, #128	@ 0x80
 80035f2:	0049      	lsls	r1, r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003604:	f3ef 8310 	mrs	r3, PRIMASK
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800360c:	657b      	str	r3, [r7, #84]	@ 0x54
 800360e:	2301      	movs	r3, #1
 8003610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003614:	f383 8810 	msr	PRIMASK, r3
}
 8003618:	46c0      	nop			@ (mov r8, r8)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2180      	movs	r1, #128	@ 0x80
 8003626:	0549      	lsls	r1, r1, #21
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	e047      	b.n	80036ca <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	2380      	movs	r3, #128	@ 0x80
 8003640:	015b      	lsls	r3, r3, #5
 8003642:	429a      	cmp	r2, r3
 8003644:	d107      	bne.n	8003656 <UART_Start_Receive_IT+0x1b6>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a23      	ldr	r2, [pc, #140]	@ (80036e0 <UART_Start_Receive_IT+0x240>)
 8003652:	675a      	str	r2, [r3, #116]	@ 0x74
 8003654:	e002      	b.n	800365c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a22      	ldr	r2, [pc, #136]	@ (80036e4 <UART_Start_Receive_IT+0x244>)
 800365a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d019      	beq.n	8003698 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003664:	f3ef 8310 	mrs	r3, PRIMASK
 8003668:	61fb      	str	r3, [r7, #28]
  return(result);
 800366a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800366c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800366e:	2301      	movs	r3, #1
 8003670:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f383 8810 	msr	PRIMASK, r3
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2190      	movs	r1, #144	@ 0x90
 8003686:	0049      	lsls	r1, r1, #1
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	e018      	b.n	80036ca <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003698:	f3ef 8310 	mrs	r3, PRIMASK
 800369c:	613b      	str	r3, [r7, #16]
  return(result);
 800369e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80036a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80036a2:	2301      	movs	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2120      	movs	r1, #32
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f383 8810 	msr	PRIMASK, r3
}
 80036c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b018      	add	sp, #96	@ 0x60
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	000001ff 	.word	0x000001ff
 80036d8:	08004281 	.word	0x08004281
 80036dc:	08003f35 	.word	0x08003f35
 80036e0:	08003d61 	.word	0x08003d61
 80036e4:	08003b8d 	.word	0x08003b8d

080036e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08e      	sub	sp, #56	@ 0x38
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f0:	f3ef 8310 	mrs	r3, PRIMASK
 80036f4:	617b      	str	r3, [r7, #20]
  return(result);
 80036f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036fa:	2301      	movs	r3, #1
 80036fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f383 8810 	msr	PRIMASK, r3
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4926      	ldr	r1, [pc, #152]	@ (80037ac <UART_EndRxTransfer+0xc4>)
 8003712:	400a      	ands	r2, r1
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003718:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f383 8810 	msr	PRIMASK, r3
}
 8003720:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003722:	f3ef 8310 	mrs	r3, PRIMASK
 8003726:	623b      	str	r3, [r7, #32]
  return(result);
 8003728:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800372a:	633b      	str	r3, [r7, #48]	@ 0x30
 800372c:	2301      	movs	r3, #1
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	491b      	ldr	r1, [pc, #108]	@ (80037b0 <UART_EndRxTransfer+0xc8>)
 8003744:	400a      	ands	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	f383 8810 	msr	PRIMASK, r3
}
 8003752:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d118      	bne.n	800378e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375c:	f3ef 8310 	mrs	r3, PRIMASK
 8003760:	60bb      	str	r3, [r7, #8]
  return(result);
 8003762:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003766:	2301      	movs	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2110      	movs	r1, #16
 800377e:	438a      	bics	r2, r1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	228c      	movs	r2, #140	@ 0x8c
 8003792:	2120      	movs	r1, #32
 8003794:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b00e      	add	sp, #56	@ 0x38
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	fffffedf 	.word	0xfffffedf
 80037b0:	effffffe 	.word	0xeffffffe

080037b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	225e      	movs	r2, #94	@ 0x5e
 80037c6:	2100      	movs	r1, #0
 80037c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2256      	movs	r2, #86	@ 0x56
 80037ce:	2100      	movs	r1, #0
 80037d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff f92b 	bl	8002a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b004      	add	sp, #16
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b08a      	sub	sp, #40	@ 0x28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2288      	movs	r2, #136	@ 0x88
 80037ee:	589b      	ldr	r3, [r3, r2]
 80037f0:	2b21      	cmp	r3, #33	@ 0x21
 80037f2:	d14c      	bne.n	800388e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2256      	movs	r2, #86	@ 0x56
 80037f8:	5a9b      	ldrh	r3, [r3, r2]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d132      	bne.n	8003866 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003800:	f3ef 8310 	mrs	r3, PRIMASK
 8003804:	60bb      	str	r3, [r7, #8]
  return(result);
 8003806:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
 800380a:	2301      	movs	r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	46c0      	nop			@ (mov r8, r8)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2180      	movs	r1, #128	@ 0x80
 8003822:	438a      	bics	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f383 8810 	msr	PRIMASK, r3
}
 8003830:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003832:	f3ef 8310 	mrs	r3, PRIMASK
 8003836:	617b      	str	r3, [r7, #20]
  return(result);
 8003838:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800383a:	623b      	str	r3, [r7, #32]
 800383c:	2301      	movs	r3, #1
 800383e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f383 8810 	msr	PRIMASK, r3
}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2140      	movs	r1, #64	@ 0x40
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f383 8810 	msr	PRIMASK, r3
}
 8003862:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003864:	e013      	b.n	800388e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2256      	movs	r2, #86	@ 0x56
 8003880:	5a9b      	ldrh	r3, [r3, r2]
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b299      	uxth	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2256      	movs	r2, #86	@ 0x56
 800388c:	5299      	strh	r1, [r3, r2]
}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b00a      	add	sp, #40	@ 0x28
 8003894:	bd80      	pop	{r7, pc}

08003896 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b08c      	sub	sp, #48	@ 0x30
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2288      	movs	r2, #136	@ 0x88
 80038a2:	589b      	ldr	r3, [r3, r2]
 80038a4:	2b21      	cmp	r3, #33	@ 0x21
 80038a6:	d151      	bne.n	800394c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2256      	movs	r2, #86	@ 0x56
 80038ac:	5a9b      	ldrh	r3, [r3, r2]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d132      	bne.n	800391a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b4:	f3ef 8310 	mrs	r3, PRIMASK
 80038b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80038ba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80038bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038be:	2301      	movs	r3, #1
 80038c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f383 8810 	msr	PRIMASK, r3
}
 80038c8:	46c0      	nop			@ (mov r8, r8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2180      	movs	r1, #128	@ 0x80
 80038d6:	438a      	bics	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80038ec:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f0:	2301      	movs	r3, #1
 80038f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f383 8810 	msr	PRIMASK, r3
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2140      	movs	r1, #64	@ 0x40
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003918:	e018      	b.n	800394c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	001a      	movs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	05d2      	lsls	r2, r2, #23
 800392c:	0dd2      	lsrs	r2, r2, #23
 800392e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003934:	1c9a      	adds	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2256      	movs	r2, #86	@ 0x56
 800393e:	5a9b      	ldrh	r3, [r3, r2]
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b299      	uxth	r1, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2256      	movs	r2, #86	@ 0x56
 800394a:	5299      	strh	r1, [r3, r2]
}
 800394c:	46c0      	nop			@ (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	b00c      	add	sp, #48	@ 0x30
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08c      	sub	sp, #48	@ 0x30
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2288      	movs	r2, #136	@ 0x88
 8003960:	589b      	ldr	r3, [r3, r2]
 8003962:	2b21      	cmp	r3, #33	@ 0x21
 8003964:	d165      	bne.n	8003a32 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003966:	232e      	movs	r3, #46	@ 0x2e
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	216a      	movs	r1, #106	@ 0x6a
 800396e:	5a52      	ldrh	r2, [r2, r1]
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	e059      	b.n	8003a28 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2256      	movs	r2, #86	@ 0x56
 8003978:	5a9b      	ldrh	r3, [r3, r2]
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d133      	bne.n	80039e8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003980:	f3ef 8310 	mrs	r3, PRIMASK
 8003984:	60fb      	str	r3, [r7, #12]
  return(result);
 8003986:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800398a:	2301      	movs	r3, #1
 800398c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f383 8810 	msr	PRIMASK, r3
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4926      	ldr	r1, [pc, #152]	@ (8003a3c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80039a2:	400a      	ands	r2, r1
 80039a4:	609a      	str	r2, [r3, #8]
 80039a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f383 8810 	msr	PRIMASK, r3
}
 80039b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b2:	f3ef 8310 	mrs	r3, PRIMASK
 80039b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80039b8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80039bc:	2301      	movs	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f383 8810 	msr	PRIMASK, r3
}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2140      	movs	r1, #64	@ 0x40
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f383 8810 	msr	PRIMASK, r3
}
 80039e2:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80039e4:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80039e6:	e024      	b.n	8003a32 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	2280      	movs	r2, #128	@ 0x80
 80039f0:	4013      	ands	r3, r2
 80039f2:	d013      	beq.n	8003a1c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2256      	movs	r2, #86	@ 0x56
 8003a0e:	5a9b      	ldrh	r3, [r3, r2]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b299      	uxth	r1, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2256      	movs	r2, #86	@ 0x56
 8003a1a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a1c:	212e      	movs	r1, #46	@ 0x2e
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	881a      	ldrh	r2, [r3, #0]
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	3a01      	subs	r2, #1
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	232e      	movs	r3, #46	@ 0x2e
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1a0      	bne.n	8003974 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b00c      	add	sp, #48	@ 0x30
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	ff7fffff 	.word	0xff7fffff

08003a40 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	@ 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2288      	movs	r2, #136	@ 0x88
 8003a4c:	589b      	ldr	r3, [r3, r2]
 8003a4e:	2b21      	cmp	r3, #33	@ 0x21
 8003a50:	d16a      	bne.n	8003b28 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a52:	232e      	movs	r3, #46	@ 0x2e
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	216a      	movs	r1, #106	@ 0x6a
 8003a5a:	5a52      	ldrh	r2, [r2, r1]
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	e05e      	b.n	8003b1e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2256      	movs	r2, #86	@ 0x56
 8003a64:	5a9b      	ldrh	r3, [r3, r2]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d133      	bne.n	8003ad4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a70:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a72:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a76:	2301      	movs	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f383 8810 	msr	PRIMASK, r3
}
 8003a80:	46c0      	nop			@ (mov r8, r8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4928      	ldr	r1, [pc, #160]	@ (8003b30 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003a8e:	400a      	ands	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f383 8810 	msr	PRIMASK, r3
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa2:	617b      	str	r3, [r7, #20]
  return(result);
 8003aa4:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aa6:	623b      	str	r3, [r7, #32]
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f383 8810 	msr	PRIMASK, r3
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2140      	movs	r1, #64	@ 0x40
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f383 8810 	msr	PRIMASK, r3
}
 8003ace:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8003ad0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003ad2:	e029      	b.n	8003b28 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2280      	movs	r2, #128	@ 0x80
 8003adc:	4013      	ands	r3, r2
 8003ade:	d018      	beq.n	8003b12 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	001a      	movs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	05d2      	lsls	r2, r2, #23
 8003af2:	0dd2      	lsrs	r2, r2, #23
 8003af4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afa:	1c9a      	adds	r2, r3, #2
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2256      	movs	r2, #86	@ 0x56
 8003b04:	5a9b      	ldrh	r3, [r3, r2]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b299      	uxth	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2256      	movs	r2, #86	@ 0x56
 8003b10:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003b12:	212e      	movs	r1, #46	@ 0x2e
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	3a01      	subs	r2, #1
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	232e      	movs	r3, #46	@ 0x2e
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d19b      	bne.n	8003a60 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b00c      	add	sp, #48	@ 0x30
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	ff7fffff 	.word	0xff7fffff

08003b34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b40:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b42:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	2301      	movs	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	46c0      	nop			@ (mov r8, r8)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2140      	movs	r1, #64	@ 0x40
 8003b5e:	438a      	bics	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f383 8810 	msr	PRIMASK, r3
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2288      	movs	r2, #136	@ 0x88
 8003b72:	2120      	movs	r1, #32
 8003b74:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7fe ff4e 	bl	8002a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b84:	46c0      	nop			@ (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b006      	add	sp, #24
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b094      	sub	sp, #80	@ 0x50
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b94:	204e      	movs	r0, #78	@ 0x4e
 8003b96:	183b      	adds	r3, r7, r0
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	2160      	movs	r1, #96	@ 0x60
 8003b9c:	5a52      	ldrh	r2, [r2, r1]
 8003b9e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	228c      	movs	r2, #140	@ 0x8c
 8003ba4:	589b      	ldr	r3, [r3, r2]
 8003ba6:	2b22      	cmp	r3, #34	@ 0x22
 8003ba8:	d000      	beq.n	8003bac <UART_RxISR_8BIT+0x20>
 8003baa:	e0c4      	b.n	8003d36 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bb2:	214c      	movs	r1, #76	@ 0x4c
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	183b      	adds	r3, r7, r0
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b2d9      	uxtb	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	400a      	ands	r2, r1
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	225e      	movs	r2, #94	@ 0x5e
 8003bdc:	5a9b      	ldrh	r3, [r3, r2]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b299      	uxth	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	225e      	movs	r2, #94	@ 0x5e
 8003be8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	225e      	movs	r2, #94	@ 0x5e
 8003bee:	5a9b      	ldrh	r3, [r3, r2]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d000      	beq.n	8003bf8 <UART_RxISR_8BIT+0x6c>
 8003bf6:	e0a6      	b.n	8003d46 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c02:	2301      	movs	r3, #1
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	f383 8810 	msr	PRIMASK, r3
}
 8003c0c:	46c0      	nop			@ (mov r8, r8)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	494d      	ldr	r1, [pc, #308]	@ (8003d50 <UART_RxISR_8BIT+0x1c4>)
 8003c1a:	400a      	ands	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c24:	f383 8810 	msr	PRIMASK, r3
}
 8003c28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c32:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c34:	2301      	movs	r3, #1
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3a:	f383 8810 	msr	PRIMASK, r3
}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	438a      	bics	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c52:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c56:	f383 8810 	msr	PRIMASK, r3
}
 8003c5a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	228c      	movs	r2, #140	@ 0x8c
 8003c60:	2120      	movs	r1, #32
 8003c62:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a37      	ldr	r2, [pc, #220]	@ (8003d54 <UART_RxISR_8BIT+0x1c8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d024      	beq.n	8003cc4 <UART_RxISR_8BIT+0x138>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a36      	ldr	r2, [pc, #216]	@ (8003d58 <UART_RxISR_8BIT+0x1cc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d01f      	beq.n	8003cc4 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	2380      	movs	r3, #128	@ 0x80
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c92:	f3ef 8310 	mrs	r3, PRIMASK
 8003c96:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c98:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	492a      	ldr	r1, [pc, #168]	@ (8003d5c <UART_RxISR_8BIT+0x1d0>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d12f      	bne.n	8003d2c <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cd8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cdc:	2301      	movs	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f383 8810 	msr	PRIMASK, r3
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2110      	movs	r1, #16
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f383 8810 	msr	PRIMASK, r3
}
 8003d02:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d103      	bne.n	8003d1a <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2210      	movs	r2, #16
 8003d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	225c      	movs	r2, #92	@ 0x5c
 8003d1e:	5a9a      	ldrh	r2, [r3, r2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7fe fe8b 	bl	8002a40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d2a:	e00c      	b.n	8003d46 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7fc fcd8 	bl	80006e4 <HAL_UART_RxCpltCallback>
}
 8003d34:	e007      	b.n	8003d46 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2108      	movs	r1, #8
 8003d42:	430a      	orrs	r2, r1
 8003d44:	619a      	str	r2, [r3, #24]
}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b014      	add	sp, #80	@ 0x50
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	fffffedf 	.word	0xfffffedf
 8003d54:	40008000 	.word	0x40008000
 8003d58:	40008400 	.word	0x40008400
 8003d5c:	fbffffff 	.word	0xfbffffff

08003d60 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b094      	sub	sp, #80	@ 0x50
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d68:	204e      	movs	r0, #78	@ 0x4e
 8003d6a:	183b      	adds	r3, r7, r0
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	2160      	movs	r1, #96	@ 0x60
 8003d70:	5a52      	ldrh	r2, [r2, r1]
 8003d72:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	228c      	movs	r2, #140	@ 0x8c
 8003d78:	589b      	ldr	r3, [r3, r2]
 8003d7a:	2b22      	cmp	r3, #34	@ 0x22
 8003d7c:	d000      	beq.n	8003d80 <UART_RxISR_16BIT+0x20>
 8003d7e:	e0c4      	b.n	8003f0a <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d86:	214c      	movs	r1, #76	@ 0x4c
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	183a      	adds	r2, r7, r0
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	8812      	ldrh	r2, [r2, #0]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da6:	1c9a      	adds	r2, r3, #2
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	225e      	movs	r2, #94	@ 0x5e
 8003db0:	5a9b      	ldrh	r3, [r3, r2]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b299      	uxth	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	225e      	movs	r2, #94	@ 0x5e
 8003dbc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	225e      	movs	r2, #94	@ 0x5e
 8003dc2:	5a9b      	ldrh	r3, [r3, r2]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d000      	beq.n	8003dcc <UART_RxISR_16BIT+0x6c>
 8003dca:	e0a6      	b.n	8003f1a <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd0:	623b      	str	r3, [r7, #32]
  return(result);
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			@ (mov r8, r8)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	494d      	ldr	r1, [pc, #308]	@ (8003f24 <UART_RxISR_16BIT+0x1c4>)
 8003dee:	400a      	ands	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	f383 8810 	msr	PRIMASK, r3
}
 8003dfc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e06:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e08:	2301      	movs	r3, #1
 8003e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	f383 8810 	msr	PRIMASK, r3
}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2101      	movs	r1, #1
 8003e20:	438a      	bics	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e26:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2a:	f383 8810 	msr	PRIMASK, r3
}
 8003e2e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	228c      	movs	r2, #140	@ 0x8c
 8003e34:	2120      	movs	r1, #32
 8003e36:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a37      	ldr	r2, [pc, #220]	@ (8003f28 <UART_RxISR_16BIT+0x1c8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d024      	beq.n	8003e98 <UART_RxISR_16BIT+0x138>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a36      	ldr	r2, [pc, #216]	@ (8003f2c <UART_RxISR_16BIT+0x1cc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d01f      	beq.n	8003e98 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	2380      	movs	r3, #128	@ 0x80
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	4013      	ands	r3, r2
 8003e64:	d018      	beq.n	8003e98 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e66:	f3ef 8310 	mrs	r3, PRIMASK
 8003e6a:	617b      	str	r3, [r7, #20]
  return(result);
 8003e6c:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e70:	2301      	movs	r3, #1
 8003e72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f383 8810 	msr	PRIMASK, r3
}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	492a      	ldr	r1, [pc, #168]	@ (8003f30 <UART_RxISR_16BIT+0x1d0>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d12f      	bne.n	8003f00 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eac:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2110      	movs	r1, #16
 8003ec8:	438a      	bics	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	2210      	movs	r2, #16
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b10      	cmp	r3, #16
 8003ee4:	d103      	bne.n	8003eee <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2210      	movs	r2, #16
 8003eec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	225c      	movs	r2, #92	@ 0x5c
 8003ef2:	5a9a      	ldrh	r2, [r3, r2]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	0011      	movs	r1, r2
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fe fda1 	bl	8002a40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003efe:	e00c      	b.n	8003f1a <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7fc fbee 	bl	80006e4 <HAL_UART_RxCpltCallback>
}
 8003f08:	e007      	b.n	8003f1a <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699a      	ldr	r2, [r3, #24]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2108      	movs	r1, #8
 8003f16:	430a      	orrs	r2, r1
 8003f18:	619a      	str	r2, [r3, #24]
}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b014      	add	sp, #80	@ 0x50
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	fffffedf 	.word	0xfffffedf
 8003f28:	40008000 	.word	0x40008000
 8003f2c:	40008400 	.word	0x40008400
 8003f30:	fbffffff 	.word	0xfbffffff

08003f34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b0a0      	sub	sp, #128	@ 0x80
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003f3c:	237a      	movs	r3, #122	@ 0x7a
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	2160      	movs	r1, #96	@ 0x60
 8003f44:	5a52      	ldrh	r2, [r2, r1]
 8003f46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	228c      	movs	r2, #140	@ 0x8c
 8003f64:	589b      	ldr	r3, [r3, r2]
 8003f66:	2b22      	cmp	r3, #34	@ 0x22
 8003f68:	d000      	beq.n	8003f6c <UART_RxISR_8BIT_FIFOEN+0x38>
 8003f6a:	e16f      	b.n	800424c <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003f6c:	236e      	movs	r3, #110	@ 0x6e
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	2168      	movs	r1, #104	@ 0x68
 8003f74:	5a52      	ldrh	r2, [r2, r1]
 8003f76:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f78:	e116      	b.n	80041a8 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f80:	216c      	movs	r1, #108	@ 0x6c
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	237a      	movs	r3, #122	@ 0x7a
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b2d9      	uxtb	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f98:	400a      	ands	r2, r1
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	225e      	movs	r2, #94	@ 0x5e
 8003fac:	5a9b      	ldrh	r3, [r3, r2]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b299      	uxth	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	225e      	movs	r2, #94	@ 0x5e
 8003fb8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003fc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fc4:	2207      	movs	r2, #7
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d049      	beq.n	800405e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d010      	beq.n	8003ff4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003fd2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2290      	movs	r2, #144	@ 0x90
 8003fe8:	589b      	ldr	r3, [r3, r2]
 8003fea:	2201      	movs	r2, #1
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2190      	movs	r1, #144	@ 0x90
 8003ff2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ff4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d00f      	beq.n	800401c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003ffc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ffe:	2201      	movs	r2, #1
 8004000:	4013      	ands	r3, r2
 8004002:	d00b      	beq.n	800401c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2202      	movs	r2, #2
 800400a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2290      	movs	r2, #144	@ 0x90
 8004010:	589b      	ldr	r3, [r3, r2]
 8004012:	2204      	movs	r2, #4
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2190      	movs	r1, #144	@ 0x90
 800401a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800401c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800401e:	2204      	movs	r2, #4
 8004020:	4013      	ands	r3, r2
 8004022:	d00f      	beq.n	8004044 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004024:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004026:	2201      	movs	r2, #1
 8004028:	4013      	ands	r3, r2
 800402a:	d00b      	beq.n	8004044 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2204      	movs	r2, #4
 8004032:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2290      	movs	r2, #144	@ 0x90
 8004038:	589b      	ldr	r3, [r3, r2]
 800403a:	2202      	movs	r2, #2
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2190      	movs	r1, #144	@ 0x90
 8004042:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2290      	movs	r2, #144	@ 0x90
 8004048:	589b      	ldr	r3, [r3, r2]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0018      	movs	r0, r3
 8004052:	f7fe fced 	bl	8002a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2290      	movs	r2, #144	@ 0x90
 800405a:	2100      	movs	r1, #0
 800405c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	225e      	movs	r2, #94	@ 0x5e
 8004062:	5a9b      	ldrh	r3, [r3, r2]
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d000      	beq.n	800406c <UART_RxISR_8BIT_FIFOEN+0x138>
 800406a:	e09d      	b.n	80041a8 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406c:	f3ef 8310 	mrs	r3, PRIMASK
 8004070:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004076:	2301      	movs	r3, #1
 8004078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800407c:	f383 8810 	msr	PRIMASK, r3
}
 8004080:	46c0      	nop			@ (mov r8, r8)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4975      	ldr	r1, [pc, #468]	@ (8004264 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800408e:	400a      	ands	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004094:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004098:	f383 8810 	msr	PRIMASK, r3
}
 800409c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409e:	f3ef 8310 	mrs	r3, PRIMASK
 80040a2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80040a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80040a8:	2301      	movs	r3, #1
 80040aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	496a      	ldr	r1, [pc, #424]	@ (8004268 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	228c      	movs	r2, #140	@ 0x8c
 80040d4:	2120      	movs	r1, #32
 80040d6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a60      	ldr	r2, [pc, #384]	@ (800426c <UART_RxISR_8BIT_FIFOEN+0x338>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d024      	beq.n	8004138 <UART_RxISR_8BIT_FIFOEN+0x204>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004270 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d01f      	beq.n	8004138 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	2380      	movs	r3, #128	@ 0x80
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	4013      	ands	r3, r2
 8004104:	d018      	beq.n	8004138 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004106:	f3ef 8310 	mrs	r3, PRIMASK
 800410a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800410c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800410e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004110:	2301      	movs	r3, #1
 8004112:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004116:	f383 8810 	msr	PRIMASK, r3
}
 800411a:	46c0      	nop			@ (mov r8, r8)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4953      	ldr	r1, [pc, #332]	@ (8004274 <UART_RxISR_8BIT_FIFOEN+0x340>)
 8004128:	400a      	ands	r2, r1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800412e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004132:	f383 8810 	msr	PRIMASK, r3
}
 8004136:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d12f      	bne.n	80041a0 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004146:	f3ef 8310 	mrs	r3, PRIMASK
 800414a:	623b      	str	r3, [r7, #32]
  return(result);
 800414c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004150:	2301      	movs	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			@ (mov r8, r8)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2110      	movs	r1, #16
 8004168:	438a      	bics	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800416e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	2210      	movs	r2, #16
 8004180:	4013      	ands	r3, r2
 8004182:	2b10      	cmp	r3, #16
 8004184:	d103      	bne.n	800418e <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2210      	movs	r2, #16
 800418c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	225c      	movs	r2, #92	@ 0x5c
 8004192:	5a9a      	ldrh	r2, [r3, r2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0011      	movs	r1, r2
 8004198:	0018      	movs	r0, r3
 800419a:	f7fe fc51 	bl	8002a40 <HAL_UARTEx_RxEventCallback>
 800419e:	e003      	b.n	80041a8 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fc fa9e 	bl	80006e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041a8:	236e      	movs	r3, #110	@ 0x6e
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <UART_RxISR_8BIT_FIFOEN+0x288>
 80041b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041b4:	2220      	movs	r2, #32
 80041b6:	4013      	ands	r3, r2
 80041b8:	d000      	beq.n	80041bc <UART_RxISR_8BIT_FIFOEN+0x288>
 80041ba:	e6de      	b.n	8003f7a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80041bc:	205a      	movs	r0, #90	@ 0x5a
 80041be:	183b      	adds	r3, r7, r0
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	215e      	movs	r1, #94	@ 0x5e
 80041c4:	5a52      	ldrh	r2, [r2, r1]
 80041c6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80041c8:	0001      	movs	r1, r0
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d044      	beq.n	800425c <UART_RxISR_8BIT_FIFOEN+0x328>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2268      	movs	r2, #104	@ 0x68
 80041d6:	5a9b      	ldrh	r3, [r3, r2]
 80041d8:	187a      	adds	r2, r7, r1
 80041da:	8812      	ldrh	r2, [r2, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d23d      	bcs.n	800425c <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e0:	f3ef 8310 	mrs	r3, PRIMASK
 80041e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041e6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80041e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ea:	2301      	movs	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f383 8810 	msr	PRIMASK, r3
}
 80041f4:	46c0      	nop			@ (mov r8, r8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	491d      	ldr	r1, [pc, #116]	@ (8004278 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8004202:	400a      	ands	r2, r1
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004208:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f383 8810 	msr	PRIMASK, r3
}
 8004210:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a19      	ldr	r2, [pc, #100]	@ (800427c <UART_RxISR_8BIT_FIFOEN+0x348>)
 8004216:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004218:	f3ef 8310 	mrs	r3, PRIMASK
 800421c:	617b      	str	r3, [r7, #20]
  return(result);
 800421e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004220:	653b      	str	r3, [r7, #80]	@ 0x50
 8004222:	2301      	movs	r3, #1
 8004224:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f383 8810 	msr	PRIMASK, r3
}
 800422c:	46c0      	nop			@ (mov r8, r8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2120      	movs	r1, #32
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004240:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f383 8810 	msr	PRIMASK, r3
}
 8004248:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800424a:	e007      	b.n	800425c <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2108      	movs	r1, #8
 8004258:	430a      	orrs	r2, r1
 800425a:	619a      	str	r2, [r3, #24]
}
 800425c:	46c0      	nop			@ (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b020      	add	sp, #128	@ 0x80
 8004262:	bd80      	pop	{r7, pc}
 8004264:	fffffeff 	.word	0xfffffeff
 8004268:	effffffe 	.word	0xeffffffe
 800426c:	40008000 	.word	0x40008000
 8004270:	40008400 	.word	0x40008400
 8004274:	fbffffff 	.word	0xfbffffff
 8004278:	efffffff 	.word	0xefffffff
 800427c:	08003b8d 	.word	0x08003b8d

08004280 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b0a2      	sub	sp, #136	@ 0x88
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004288:	2382      	movs	r3, #130	@ 0x82
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	2160      	movs	r1, #96	@ 0x60
 8004290:	5a52      	ldrh	r2, [r2, r1]
 8004292:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	2284      	movs	r2, #132	@ 0x84
 800429c:	18ba      	adds	r2, r7, r2
 800429e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	228c      	movs	r2, #140	@ 0x8c
 80042b4:	589b      	ldr	r3, [r3, r2]
 80042b6:	2b22      	cmp	r3, #34	@ 0x22
 80042b8:	d000      	beq.n	80042bc <UART_RxISR_16BIT_FIFOEN+0x3c>
 80042ba:	e179      	b.n	80045b0 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80042bc:	2376      	movs	r3, #118	@ 0x76
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	2168      	movs	r1, #104	@ 0x68
 80042c4:	5a52      	ldrh	r2, [r2, r1]
 80042c6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042c8:	e11e      	b.n	8004508 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042d0:	2174      	movs	r1, #116	@ 0x74
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	2282      	movs	r2, #130	@ 0x82
 80042e0:	18ba      	adds	r2, r7, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	8812      	ldrh	r2, [r2, #0]
 80042e6:	4013      	ands	r3, r2
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	1c9a      	adds	r2, r3, #2
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	225e      	movs	r2, #94	@ 0x5e
 80042fc:	5a9b      	ldrh	r3, [r3, r2]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b299      	uxth	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	225e      	movs	r2, #94	@ 0x5e
 8004308:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	2184      	movs	r1, #132	@ 0x84
 8004312:	187a      	adds	r2, r7, r1
 8004314:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004316:	187b      	adds	r3, r7, r1
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2207      	movs	r2, #7
 800431c:	4013      	ands	r3, r2
 800431e:	d04e      	beq.n	80043be <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004320:	187b      	adds	r3, r7, r1
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2201      	movs	r2, #1
 8004326:	4013      	ands	r3, r2
 8004328:	d010      	beq.n	800434c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800432a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4013      	ands	r3, r2
 8004332:	d00b      	beq.n	800434c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2201      	movs	r2, #1
 800433a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2290      	movs	r2, #144	@ 0x90
 8004340:	589b      	ldr	r3, [r3, r2]
 8004342:	2201      	movs	r2, #1
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2190      	movs	r1, #144	@ 0x90
 800434a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800434c:	2384      	movs	r3, #132	@ 0x84
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2202      	movs	r2, #2
 8004354:	4013      	ands	r3, r2
 8004356:	d00f      	beq.n	8004378 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800435a:	2201      	movs	r2, #1
 800435c:	4013      	ands	r3, r2
 800435e:	d00b      	beq.n	8004378 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2202      	movs	r2, #2
 8004366:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2290      	movs	r2, #144	@ 0x90
 800436c:	589b      	ldr	r3, [r3, r2]
 800436e:	2204      	movs	r2, #4
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2190      	movs	r1, #144	@ 0x90
 8004376:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004378:	2384      	movs	r3, #132	@ 0x84
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2204      	movs	r2, #4
 8004380:	4013      	ands	r3, r2
 8004382:	d00f      	beq.n	80043a4 <UART_RxISR_16BIT_FIFOEN+0x124>
 8004384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004386:	2201      	movs	r2, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d00b      	beq.n	80043a4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2204      	movs	r2, #4
 8004392:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2290      	movs	r2, #144	@ 0x90
 8004398:	589b      	ldr	r3, [r3, r2]
 800439a:	2202      	movs	r2, #2
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2190      	movs	r1, #144	@ 0x90
 80043a2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2290      	movs	r2, #144	@ 0x90
 80043a8:	589b      	ldr	r3, [r3, r2]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7fe fb3d 	bl	8002a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2290      	movs	r2, #144	@ 0x90
 80043ba:	2100      	movs	r1, #0
 80043bc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	225e      	movs	r2, #94	@ 0x5e
 80043c2:	5a9b      	ldrh	r3, [r3, r2]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d000      	beq.n	80043cc <UART_RxISR_16BIT_FIFOEN+0x14c>
 80043ca:	e09d      	b.n	8004508 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043cc:	f3ef 8310 	mrs	r3, PRIMASK
 80043d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80043d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043d6:	2301      	movs	r3, #1
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043dc:	f383 8810 	msr	PRIMASK, r3
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4976      	ldr	r1, [pc, #472]	@ (80045c8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004406:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004408:	2301      	movs	r3, #1
 800440a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	496b      	ldr	r1, [pc, #428]	@ (80045cc <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8004420:	400a      	ands	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004426:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	228c      	movs	r2, #140	@ 0x8c
 8004434:	2120      	movs	r1, #32
 8004436:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a61      	ldr	r2, [pc, #388]	@ (80045d0 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d024      	beq.n	8004498 <UART_RxISR_16BIT_FIFOEN+0x218>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a60      	ldr	r2, [pc, #384]	@ (80045d4 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d01f      	beq.n	8004498 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	2380      	movs	r3, #128	@ 0x80
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	4013      	ands	r3, r2
 8004464:	d018      	beq.n	8004498 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004466:	f3ef 8310 	mrs	r3, PRIMASK
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800446e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004470:	2301      	movs	r3, #1
 8004472:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004476:	f383 8810 	msr	PRIMASK, r3
}
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4954      	ldr	r1, [pc, #336]	@ (80045d8 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8004488:	400a      	ands	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800448e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004492:	f383 8810 	msr	PRIMASK, r3
}
 8004496:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d12f      	bne.n	8004500 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a6:	f3ef 8310 	mrs	r3, PRIMASK
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80044b0:	2301      	movs	r3, #1
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2110      	movs	r1, #16
 80044c8:	438a      	bics	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	2210      	movs	r2, #16
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d103      	bne.n	80044ee <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2210      	movs	r2, #16
 80044ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	225c      	movs	r2, #92	@ 0x5c
 80044f2:	5a9a      	ldrh	r2, [r3, r2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	0011      	movs	r1, r2
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7fe faa1 	bl	8002a40 <HAL_UARTEx_RxEventCallback>
 80044fe:	e003      	b.n	8004508 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0018      	movs	r0, r3
 8004504:	f7fc f8ee 	bl	80006e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004508:	2376      	movs	r3, #118	@ 0x76
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d006      	beq.n	8004520 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8004512:	2384      	movs	r3, #132	@ 0x84
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2220      	movs	r2, #32
 800451a:	4013      	ands	r3, r2
 800451c:	d000      	beq.n	8004520 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 800451e:	e6d4      	b.n	80042ca <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004520:	205e      	movs	r0, #94	@ 0x5e
 8004522:	183b      	adds	r3, r7, r0
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	215e      	movs	r1, #94	@ 0x5e
 8004528:	5a52      	ldrh	r2, [r2, r1]
 800452a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800452c:	0001      	movs	r1, r0
 800452e:	187b      	adds	r3, r7, r1
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d044      	beq.n	80045c0 <UART_RxISR_16BIT_FIFOEN+0x340>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2268      	movs	r2, #104	@ 0x68
 800453a:	5a9b      	ldrh	r3, [r3, r2]
 800453c:	187a      	adds	r2, r7, r1
 800453e:	8812      	ldrh	r2, [r2, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d23d      	bcs.n	80045c0 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004544:	f3ef 8310 	mrs	r3, PRIMASK
 8004548:	60fb      	str	r3, [r7, #12]
  return(result);
 800454a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800454c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800454e:	2301      	movs	r3, #1
 8004550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f383 8810 	msr	PRIMASK, r3
}
 8004558:	46c0      	nop			@ (mov r8, r8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	491d      	ldr	r1, [pc, #116]	@ (80045dc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8004566:	400a      	ands	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
 800456a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800456c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f383 8810 	msr	PRIMASK, r3
}
 8004574:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a19      	ldr	r2, [pc, #100]	@ (80045e0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800457a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457c:	f3ef 8310 	mrs	r3, PRIMASK
 8004580:	61bb      	str	r3, [r7, #24]
  return(result);
 8004582:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004584:	657b      	str	r3, [r7, #84]	@ 0x54
 8004586:	2301      	movs	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f383 8810 	msr	PRIMASK, r3
}
 8004590:	46c0      	nop			@ (mov r8, r8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2120      	movs	r1, #32
 800459e:	430a      	orrs	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f383 8810 	msr	PRIMASK, r3
}
 80045ac:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045ae:	e007      	b.n	80045c0 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2108      	movs	r1, #8
 80045bc:	430a      	orrs	r2, r1
 80045be:	619a      	str	r2, [r3, #24]
}
 80045c0:	46c0      	nop			@ (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b022      	add	sp, #136	@ 0x88
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	fffffeff 	.word	0xfffffeff
 80045cc:	effffffe 	.word	0xeffffffe
 80045d0:	40008000 	.word	0x40008000
 80045d4:	40008400 	.word	0x40008400
 80045d8:	fbffffff 	.word	0xfbffffff
 80045dc:	efffffff 	.word	0xefffffff
 80045e0:	08003d61 	.word	0x08003d61

080045e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045ec:	46c0      	nop			@ (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b002      	add	sp, #8
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800460c:	46c0      	nop			@ (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2284      	movs	r2, #132	@ 0x84
 8004620:	5c9b      	ldrb	r3, [r3, r2]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_UARTEx_DisableFifoMode+0x16>
 8004626:	2302      	movs	r3, #2
 8004628:	e027      	b.n	800467a <HAL_UARTEx_DisableFifoMode+0x66>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2284      	movs	r2, #132	@ 0x84
 800462e:	2101      	movs	r1, #1
 8004630:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2288      	movs	r2, #136	@ 0x88
 8004636:	2124      	movs	r1, #36	@ 0x24
 8004638:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2101      	movs	r1, #1
 800464e:	438a      	bics	r2, r1
 8004650:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a0b      	ldr	r2, [pc, #44]	@ (8004684 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004656:	4013      	ands	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2288      	movs	r2, #136	@ 0x88
 800466c:	2120      	movs	r1, #32
 800466e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2284      	movs	r2, #132	@ 0x84
 8004674:	2100      	movs	r1, #0
 8004676:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	0018      	movs	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	b004      	add	sp, #16
 8004680:	bd80      	pop	{r7, pc}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	dfffffff 	.word	0xdfffffff

08004688 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2284      	movs	r2, #132	@ 0x84
 8004696:	5c9b      	ldrb	r3, [r3, r2]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800469c:	2302      	movs	r3, #2
 800469e:	e02e      	b.n	80046fe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2284      	movs	r2, #132	@ 0x84
 80046a4:	2101      	movs	r1, #1
 80046a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2288      	movs	r2, #136	@ 0x88
 80046ac:	2124      	movs	r1, #36	@ 0x24
 80046ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2101      	movs	r1, #1
 80046c4:	438a      	bics	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	08d9      	lsrs	r1, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 f854 	bl	800478c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2288      	movs	r2, #136	@ 0x88
 80046f0:	2120      	movs	r1, #32
 80046f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2284      	movs	r2, #132	@ 0x84
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	0018      	movs	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	b004      	add	sp, #16
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2284      	movs	r2, #132	@ 0x84
 8004716:	5c9b      	ldrb	r3, [r3, r2]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800471c:	2302      	movs	r3, #2
 800471e:	e02f      	b.n	8004780 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2284      	movs	r2, #132	@ 0x84
 8004724:	2101      	movs	r1, #1
 8004726:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2288      	movs	r2, #136	@ 0x88
 800472c:	2124      	movs	r1, #36	@ 0x24
 800472e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	438a      	bics	r2, r1
 8004746:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	4a0e      	ldr	r2, [pc, #56]	@ (8004788 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004750:	4013      	ands	r3, r2
 8004752:	0019      	movs	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0018      	movs	r0, r3
 8004762:	f000 f813 	bl	800478c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2288      	movs	r2, #136	@ 0x88
 8004772:	2120      	movs	r1, #32
 8004774:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2284      	movs	r2, #132	@ 0x84
 800477a:	2100      	movs	r1, #0
 800477c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b004      	add	sp, #16
 8004786:	bd80      	pop	{r7, pc}
 8004788:	f1ffffff 	.word	0xf1ffffff

0800478c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800478c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004798:	2b00      	cmp	r3, #0
 800479a:	d108      	bne.n	80047ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	226a      	movs	r2, #106	@ 0x6a
 80047a0:	2101      	movs	r1, #1
 80047a2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2268      	movs	r2, #104	@ 0x68
 80047a8:	2101      	movs	r1, #1
 80047aa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047ac:	e043      	b.n	8004836 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047ae:	260f      	movs	r6, #15
 80047b0:	19bb      	adds	r3, r7, r6
 80047b2:	2208      	movs	r2, #8
 80047b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047b6:	200e      	movs	r0, #14
 80047b8:	183b      	adds	r3, r7, r0
 80047ba:	2208      	movs	r2, #8
 80047bc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	0e5b      	lsrs	r3, r3, #25
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	240d      	movs	r4, #13
 80047ca:	193b      	adds	r3, r7, r4
 80047cc:	2107      	movs	r1, #7
 80047ce:	400a      	ands	r2, r1
 80047d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	0f5b      	lsrs	r3, r3, #29
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	250c      	movs	r5, #12
 80047de:	197b      	adds	r3, r7, r5
 80047e0:	2107      	movs	r1, #7
 80047e2:	400a      	ands	r2, r1
 80047e4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047e6:	183b      	adds	r3, r7, r0
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	197a      	adds	r2, r7, r5
 80047ec:	7812      	ldrb	r2, [r2, #0]
 80047ee:	4914      	ldr	r1, [pc, #80]	@ (8004840 <UARTEx_SetNbDataToProcess+0xb4>)
 80047f0:	5c8a      	ldrb	r2, [r1, r2]
 80047f2:	435a      	muls	r2, r3
 80047f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80047f6:	197b      	adds	r3, r7, r5
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	4a12      	ldr	r2, [pc, #72]	@ (8004844 <UARTEx_SetNbDataToProcess+0xb8>)
 80047fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047fe:	0019      	movs	r1, r3
 8004800:	f7fb fd0a 	bl	8000218 <__divsi3>
 8004804:	0003      	movs	r3, r0
 8004806:	b299      	uxth	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	226a      	movs	r2, #106	@ 0x6a
 800480c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800480e:	19bb      	adds	r3, r7, r6
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	193a      	adds	r2, r7, r4
 8004814:	7812      	ldrb	r2, [r2, #0]
 8004816:	490a      	ldr	r1, [pc, #40]	@ (8004840 <UARTEx_SetNbDataToProcess+0xb4>)
 8004818:	5c8a      	ldrb	r2, [r1, r2]
 800481a:	435a      	muls	r2, r3
 800481c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800481e:	193b      	adds	r3, r7, r4
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	4a08      	ldr	r2, [pc, #32]	@ (8004844 <UARTEx_SetNbDataToProcess+0xb8>)
 8004824:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004826:	0019      	movs	r1, r3
 8004828:	f7fb fcf6 	bl	8000218 <__divsi3>
 800482c:	0003      	movs	r3, r0
 800482e:	b299      	uxth	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2268      	movs	r2, #104	@ 0x68
 8004834:	5299      	strh	r1, [r3, r2]
}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b005      	add	sp, #20
 800483c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	08004930 	.word	0x08004930
 8004844:	08004938 	.word	0x08004938

08004848 <memset>:
 8004848:	0003      	movs	r3, r0
 800484a:	1882      	adds	r2, r0, r2
 800484c:	4293      	cmp	r3, r2
 800484e:	d100      	bne.n	8004852 <memset+0xa>
 8004850:	4770      	bx	lr
 8004852:	7019      	strb	r1, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	e7f9      	b.n	800484c <memset+0x4>

08004858 <__libc_init_array>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	2600      	movs	r6, #0
 800485c:	4c0c      	ldr	r4, [pc, #48]	@ (8004890 <__libc_init_array+0x38>)
 800485e:	4d0d      	ldr	r5, [pc, #52]	@ (8004894 <__libc_init_array+0x3c>)
 8004860:	1b64      	subs	r4, r4, r5
 8004862:	10a4      	asrs	r4, r4, #2
 8004864:	42a6      	cmp	r6, r4
 8004866:	d109      	bne.n	800487c <__libc_init_array+0x24>
 8004868:	2600      	movs	r6, #0
 800486a:	f000 f819 	bl	80048a0 <_init>
 800486e:	4c0a      	ldr	r4, [pc, #40]	@ (8004898 <__libc_init_array+0x40>)
 8004870:	4d0a      	ldr	r5, [pc, #40]	@ (800489c <__libc_init_array+0x44>)
 8004872:	1b64      	subs	r4, r4, r5
 8004874:	10a4      	asrs	r4, r4, #2
 8004876:	42a6      	cmp	r6, r4
 8004878:	d105      	bne.n	8004886 <__libc_init_array+0x2e>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	00b3      	lsls	r3, r6, #2
 800487e:	58eb      	ldr	r3, [r5, r3]
 8004880:	4798      	blx	r3
 8004882:	3601      	adds	r6, #1
 8004884:	e7ee      	b.n	8004864 <__libc_init_array+0xc>
 8004886:	00b3      	lsls	r3, r6, #2
 8004888:	58eb      	ldr	r3, [r5, r3]
 800488a:	4798      	blx	r3
 800488c:	3601      	adds	r6, #1
 800488e:	e7f2      	b.n	8004876 <__libc_init_array+0x1e>
 8004890:	08004948 	.word	0x08004948
 8004894:	08004948 	.word	0x08004948
 8004898:	0800494c 	.word	0x0800494c
 800489c:	08004948 	.word	0x08004948

080048a0 <_init>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr

080048ac <_fini>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr
